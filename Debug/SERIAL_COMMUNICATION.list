
SERIAL_COMMUNICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ce4  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08005ec8  08005ec8  00006ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006050  08006050  00008264  2**0
                  CONTENTS
  4 .ARM          00000000  08006050  08006050  00008264  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006050  08006050  00008264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006050  08006050  00007050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006054  08006054  00007054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  08006058  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d68  20000264  080062bc  00008264  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fcc  080062bc  00008fcc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d591  00000000  00000000  0000828d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002553  00000000  00000000  0001581e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00017d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000922  00000000  00000000  00018938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f05  00000000  00000000  0001925a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe1a  00000000  00000000  0003315f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093db8  00000000  00000000  00042f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6d31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033f4  00000000  00000000  000d6d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000da168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000264 	.word	0x20000264
 8000200:	00000000 	.word	0x00000000
 8000204:	08005eb0 	.word	0x08005eb0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000268 	.word	0x20000268
 8000220:	08005eb0 	.word	0x08005eb0

08000224 <Compute_CRC16>:
		crctable16[divident] = curByte;
	}
}

unsigned short Compute_CRC16(unsigned char* bytes, const int BYTES_LEN)
{
 8000224:	b480      	push	{r7}
 8000226:	b087      	sub	sp, #28
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	6039      	str	r1, [r7, #0]
	unsigned short crc = 0;
 800022e:	2300      	movs	r3, #0
 8000230:	82fb      	strh	r3, [r7, #22]

	for (int i = 0; i < BYTES_LEN; i++)
 8000232:	2300      	movs	r3, #0
 8000234:	613b      	str	r3, [r7, #16]
 8000236:	e019      	b.n	800026c <Compute_CRC16+0x48>
	{
		unsigned char b = bytes[i];
 8000238:	693b      	ldr	r3, [r7, #16]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	4413      	add	r3, r2
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	73fb      	strb	r3, [r7, #15]

		/* XOR-in next input byte into MSB of crc, that's our new intermediate divident */
		unsigned char pos = (unsigned char)((crc >> 8) ^ b);
 8000242:	8afb      	ldrh	r3, [r7, #22]
 8000244:	0a1b      	lsrs	r3, r3, #8
 8000246:	b29b      	uxth	r3, r3
 8000248:	b2da      	uxtb	r2, r3
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	4053      	eors	r3, r2
 800024e:	73bb      	strb	r3, [r7, #14]
		/* Shift out the MSB used for division per lookuptable and XOR with the remainder */
		crc = (unsigned short)((crc << 8) ^ (unsigned short)(crctable16[pos]));
 8000250:	8afb      	ldrh	r3, [r7, #22]
 8000252:	021b      	lsls	r3, r3, #8
 8000254:	b21a      	sxth	r2, r3
 8000256:	7bbb      	ldrb	r3, [r7, #14]
 8000258:	4909      	ldr	r1, [pc, #36]	@ (8000280 <Compute_CRC16+0x5c>)
 800025a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800025e:	b21b      	sxth	r3, r3
 8000260:	4053      	eors	r3, r2
 8000262:	b21b      	sxth	r3, r3
 8000264:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < BYTES_LEN; i++)
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	3301      	adds	r3, #1
 800026a:	613b      	str	r3, [r7, #16]
 800026c:	693a      	ldr	r2, [r7, #16]
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	429a      	cmp	r2, r3
 8000272:	dbe1      	blt.n	8000238 <Compute_CRC16+0x14>

	}
//	printf("\nHERE 3");

	return crc;
 8000274:	8afb      	ldrh	r3, [r7, #22]
}
 8000276:	4618      	mov	r0, r3
 8000278:	371c      	adds	r7, #28
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	20000000 	.word	0x20000000

08000284 <DectModHandler>:

extern FrameParse_t FrameParse;

uint8_t FP_HEADER[] = {FP_H1, FP_H2, FP_T1, FP_T2};
uint8_t DectModHandler(FrameParse_t *FP_handler, uint8_t __char)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	460b      	mov	r3, r1
 800028e:	70fb      	strb	r3, [r7, #3]
	if (__char == FP_HEADER[FP_handler->H_Index])
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	789b      	ldrb	r3, [r3, #2]
 8000294:	461a      	mov	r2, r3
 8000296:	4b0d      	ldr	r3, [pc, #52]	@ (80002cc <DectModHandler+0x48>)
 8000298:	5c9b      	ldrb	r3, [r3, r2]
 800029a:	78fa      	ldrb	r2, [r7, #3]
 800029c:	429a      	cmp	r2, r3
 800029e:	d10e      	bne.n	80002be <DectModHandler+0x3a>
	{
		// go to next header
		if((++FP_handler->H_Index) == sizeof(FP_HEADER))
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	789b      	ldrb	r3, [r3, #2]
 80002a4:	3301      	adds	r3, #1
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	709a      	strb	r2, [r3, #2]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	789b      	ldrb	r3, [r3, #2]
 80002b0:	2b04      	cmp	r3, #4
 80002b2:	d102      	bne.n	80002ba <DectModHandler+0x36>
			FP_handler->H_Index = 0;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2200      	movs	r2, #0
 80002b8:	709a      	strb	r2, [r3, #2]

		return FP_OK;
 80002ba:	2301      	movs	r3, #1
 80002bc:	e000      	b.n	80002c0 <DectModHandler+0x3c>
	}
	return FP_FAIL;
 80002be:	2300      	movs	r3, #0
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	20000200 	.word	0x20000200

080002d0 <FP_Init>:

void FP_Init(FrameParse_t *FP_handler)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	// initialize fields
	FP_handler->FP_MOD = DECT_H_MOD;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2200      	movs	r2, #0
 80002dc:	701a      	strb	r2, [r3, #0]
	FP_handler->FP_Status = FP_OK;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2201      	movs	r2, #1
 80002e2:	705a      	strb	r2, [r3, #1]

	//
	FP_handler->H_Index = 0;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2200      	movs	r2, #0
 80002e8:	709a      	strb	r2, [r3, #2]
	FP_handler->_CRC.index = 0;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2200      	movs	r2, #0
 80002ee:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
	FP_handler->buffer.index = 0;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2200      	movs	r2, #0
 80002f6:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr

08000304 <HandleFPStatusFail>:
  * @note   .
  * @param  __char character.
  * @retval
  */
void HandleFPStatusFail(FrameParse_t *FP_handler)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	FP_Init(FP_handler);
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	f7ff ffdf 	bl	80002d0 <FP_Init>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <FP_CheckCRC>:

uint8_t FP_CheckCRC(FrameParse_t *FP_handler)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	b084      	sub	sp, #16
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
	uint16_t FRAME_CRC = (FP_handler->_CRC.buffer[1] << 8)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 8000328:	021b      	lsls	r3, r3, #8
						| FP_handler->_CRC.buffer[0];
 800032a:	b21a      	sxth	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8000332:	b21b      	sxth	r3, r3
 8000334:	4313      	orrs	r3, r2
 8000336:	b21b      	sxth	r3, r3
	uint16_t FRAME_CRC = (FP_handler->_CRC.buffer[1] << 8)
 8000338:	81fb      	strh	r3, [r7, #14]
	return Compute_CRC16(FP_handler->buffer.data, FP_handler->buffer.len)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	1d5a      	adds	r2, r3, #5
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	791b      	ldrb	r3, [r3, #4]
 8000342:	4619      	mov	r1, r3
 8000344:	4610      	mov	r0, r2
 8000346:	f7ff ff6d 	bl	8000224 <Compute_CRC16>
 800034a:	4603      	mov	r3, r0
 800034c:	461a      	mov	r2, r3
			== FRAME_CRC;
 800034e:	89fb      	ldrh	r3, [r7, #14]
 8000350:	4293      	cmp	r3, r2
 8000352:	bf0c      	ite	eq
 8000354:	2301      	moveq	r3, #1
 8000356:	2300      	movne	r3, #0
 8000358:	b2db      	uxtb	r3, r3
}
 800035a:	4618      	mov	r0, r3
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <ParseFrameHandler>:

void ParseFrameHandler(FrameParse_t *FP_handler, uint8_t __char)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	70fb      	strb	r3, [r7, #3]
	// pre handlers

	// Status fail
	if(FP_handler->FP_Status == FP_FAIL)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	785b      	ldrb	r3, [r3, #1]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d102      	bne.n	800037e <ParseFrameHandler+0x1a>
	{
		// handlers
		HandleFPStatusFail(FP_handler);
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f7ff ffc3 	bl	8000304 <HandleFPStatusFail>
	}

	//
	FP_handler->cur_char = __char;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	78fa      	ldrb	r2, [r7, #3]
 8000382:	70da      	strb	r2, [r3, #3]
	switch (FP_handler->FP_MOD) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b04      	cmp	r3, #4
 800038a:	f200 8091 	bhi.w	80004b0 <ParseFrameHandler+0x14c>
 800038e:	a201      	add	r2, pc, #4	@ (adr r2, 8000394 <ParseFrameHandler+0x30>)
 8000390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000394:	080003a9 	.word	0x080003a9
 8000398:	080003f5 	.word	0x080003f5
 800039c:	08000405 	.word	0x08000405
 80003a0:	0800042b 	.word	0x0800042b
 80003a4:	08000469 	.word	0x08000469
		case DECT_H_MOD:
			FP_handler->FP_Status = DectModHandler(FP_handler, __char);
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	4619      	mov	r1, r3
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f7ff ff69 	bl	8000284 <DectModHandler>
 80003b2:	4603      	mov	r3, r0
 80003b4:	461a      	mov	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	705a      	strb	r2, [r3, #1]

			// go to next mode
			if(FP_HEADER[FP_handler->H_Index] == FP_T1)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	789b      	ldrb	r3, [r3, #2]
 80003be:	461a      	mov	r2, r3
 80003c0:	4b41      	ldr	r3, [pc, #260]	@ (80004c8 <ParseFrameHandler+0x164>)
 80003c2:	5c9b      	ldrb	r3, [r3, r2]
 80003c4:	2be1      	cmp	r3, #225	@ 0xe1
 80003c6:	d102      	bne.n	80003ce <ParseFrameHandler+0x6a>
				FP_handler->FP_MOD = DECT_CMD;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	701a      	strb	r2, [r3, #0]
			if(FP_HEADER[FP_handler->H_Index] == FP_H1)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	789b      	ldrb	r3, [r3, #2]
 80003d2:	461a      	mov	r2, r3
 80003d4:	4b3c      	ldr	r3, [pc, #240]	@ (80004c8 <ParseFrameHandler+0x164>)
 80003d6:	5c9b      	ldrb	r3, [r3, r2]
 80003d8:	2bab      	cmp	r3, #171	@ 0xab
 80003da:	d16b      	bne.n	80004b4 <ParseFrameHandler+0x150>
			{
				// case that the buffer has buffer length
				if(FP_handler->buffer.len)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	791b      	ldrb	r3, [r3, #4]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d003      	beq.n	80003ec <ParseFrameHandler+0x88>
					FP_handler->FP_MOD = COL_CRC;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2204      	movs	r2, #4
 80003e8:	701a      	strb	r2, [r3, #0]
				else
					FP_handler->FP_MOD = DECT_COML;
			}

			break;
 80003ea:	e063      	b.n	80004b4 <ParseFrameHandler+0x150>
					FP_handler->FP_MOD = DECT_COML;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2205      	movs	r2, #5
 80003f0:	701a      	strb	r2, [r3, #0]
			break;
 80003f2:	e05f      	b.n	80004b4 <ParseFrameHandler+0x150>
		case DECT_CMD:
//			FP_handler->dev.id = __char & 0x7Fu;
//			FP_handler->dev.mode = __char >> 7;
			FP_handler->_CMD = __char;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	78fa      	ldrb	r2, [r7, #3]
 80003f8:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

			// go to next mode
			FP_handler->FP_MOD = DECT_BUF_LEN;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2202      	movs	r2, #2
 8000400:	701a      	strb	r2, [r3, #0]
			break;
 8000402:	e05c      	b.n	80004be <ParseFrameHandler+0x15a>
		case DECT_BUF_LEN:
			FP_handler->buffer.len = __char;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	78fa      	ldrb	r2, [r7, #3]
 8000408:	711a      	strb	r2, [r3, #4]


			//
			FP_handler->buffer.index = 0;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	2200      	movs	r2, #0
 800040e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104

			// go to next mode
			if(FP_handler->buffer.len)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	791b      	ldrb	r3, [r3, #4]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d003      	beq.n	8000422 <ParseFrameHandler+0xbe>
				FP_handler->FP_MOD = COL_BUF_DATA;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	2203      	movs	r2, #3
 800041e:	701a      	strb	r2, [r3, #0]
			else
				FP_handler->FP_MOD = DECT_H_MOD;
			break;
 8000420:	e04d      	b.n	80004be <ParseFrameHandler+0x15a>
				FP_handler->FP_MOD = DECT_H_MOD;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
			break;
 8000428:	e049      	b.n	80004be <ParseFrameHandler+0x15a>
		case COL_BUF_DATA:
			if(FP_handler->buffer.len)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	791b      	ldrb	r3, [r3, #4]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d007      	beq.n	8000442 <ParseFrameHandler+0xde>
				FP_handler->buffer.data[FP_handler->buffer.index] = __char;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8000438:	461a      	mov	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4413      	add	r3, r2
 800043e:	78fa      	ldrb	r2, [r7, #3]
 8000440:	715a      	strb	r2, [r3, #5]

			// increase buffer index, and go to next mode
			if((++FP_handler->buffer.index) == FP_handler->buffer.len)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8000448:	3301      	adds	r3, #1
 800044a:	b2da      	uxtb	r2, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	791b      	ldrb	r3, [r3, #4]
 800045c:	429a      	cmp	r2, r3
 800045e:	d12b      	bne.n	80004b8 <ParseFrameHandler+0x154>
			{
				FP_handler->FP_MOD = DECT_H_MOD;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2200      	movs	r2, #0
 8000464:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000466:	e027      	b.n	80004b8 <ParseFrameHandler+0x154>
		case COL_CRC:
			FP_handler->_CRC.buffer[FP_handler->_CRC.index] = __char;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 800046e:	461a      	mov	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4413      	add	r3, r2
 8000474:	78fa      	ldrb	r2, [r7, #3]
 8000476:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106

			// increase buffer index, and go to next mode
			if((++FP_handler->_CRC.index) == sizeof(FP_handler->_CRC.buffer))
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8000480:	3301      	adds	r3, #1
 8000482:	b2da      	uxtb	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8000490:	2b02      	cmp	r3, #2
 8000492:	d113      	bne.n	80004bc <ParseFrameHandler+0x158>
			{
				if(FP_CheckCRC(FP_handler))
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f7ff ff40 	bl	800031a <FP_CheckCRC>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d003      	beq.n	80004a8 <ParseFrameHandler+0x144>
				{
					FP_handler->FP_MOD = DECT_COML;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2205      	movs	r2, #5
 80004a4:	701a      	strb	r2, [r3, #0]
				else
				{
					HandleFPStatusFail(FP_handler);
				}
			}
			break;
 80004a6:	e009      	b.n	80004bc <ParseFrameHandler+0x158>
					HandleFPStatusFail(FP_handler);
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f7ff ff2b 	bl	8000304 <HandleFPStatusFail>
			break;
 80004ae:	e005      	b.n	80004bc <ParseFrameHandler+0x158>
		default:
			break;
 80004b0:	bf00      	nop
 80004b2:	e004      	b.n	80004be <ParseFrameHandler+0x15a>
			break;
 80004b4:	bf00      	nop
 80004b6:	e002      	b.n	80004be <ParseFrameHandler+0x15a>
			break;
 80004b8:	bf00      	nop
 80004ba:	e000      	b.n	80004be <ParseFrameHandler+0x15a>
			break;
 80004bc:	bf00      	nop
	}

}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000200 	.word	0x20000200

080004cc <HandlerDeviceAction>:
extern int8_t validHeartRate; // indicator to show if the heart rate calculation is valid

//
extern uint8_t startToCalculate;
void HandlerDeviceAction(uint8_t CMD, uint8_t buffer_len, uint8_t *buffer)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b0c6      	sub	sp, #280	@ 0x118
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80004d6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80004e0:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80004e4:	4602      	mov	r2, r0
 80004e6:	701a      	strb	r2, [r3, #0]
 80004e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80004ec:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 80004f0:	460a      	mov	r2, r1
 80004f2:	701a      	strb	r2, [r3, #0]
	uint8_t devID = CMD & 0x7Fu;
 80004f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80004f8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000502:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	uint8_t mode = CMD >> 7;
 8000506:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800050a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	09db      	lsrs	r3, r3, #7
 8000512:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
	if(mode == DEV_W_MOD)
 8000516:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800051a:	2b00      	cmp	r3, #0
 800051c:	d127      	bne.n	800056e <HandlerDeviceAction+0xa2>
	{
		switch (devID) {
 800051e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000522:	2b00      	cmp	r3, #0
 8000524:	d002      	beq.n	800052c <HandlerDeviceAction+0x60>
 8000526:	2b01      	cmp	r3, #1
 8000528:	d014      	beq.n	8000554 <HandlerDeviceAction+0x88>
		case DEV_1_ID:
			HAL_GPIO_WritePin(DEV_1_PORT, DEV_1_PIN, buffer[0]);

			break;
		default:
			break;
 800052a:	e055      	b.n	80005d8 <HandlerDeviceAction+0x10c>
			startToCalculate = *buffer;
 800052c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000530:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	781a      	ldrb	r2, [r3, #0]
 8000538:	4b2a      	ldr	r3, [pc, #168]	@ (80005e4 <HandlerDeviceAction+0x118>)
 800053a:	701a      	strb	r2, [r3, #0]
			USART_Transmit(&USART_handler, "\r\nReceive start: %d", *buffer);
 800053c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000540:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	4927      	ldr	r1, [pc, #156]	@ (80005e8 <HandlerDeviceAction+0x11c>)
 800054c:	4827      	ldr	r0, [pc, #156]	@ (80005ec <HandlerDeviceAction+0x120>)
 800054e:	f002 f837 	bl	80025c0 <USART_Transmit>
			break;
 8000552:	e041      	b.n	80005d8 <HandlerDeviceAction+0x10c>
			HAL_GPIO_WritePin(DEV_1_PORT, DEV_1_PIN, buffer[0]);
 8000554:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000558:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	461a      	mov	r2, r3
 8000562:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000566:	4822      	ldr	r0, [pc, #136]	@ (80005f0 <HandlerDeviceAction+0x124>)
 8000568:	f002 fcd8 	bl	8002f1c <HAL_GPIO_WritePin>
			break;
 800056c:	e034      	b.n	80005d8 <HandlerDeviceAction+0x10c>

	}
	else
	{
		//
		uint8_t pData[FP_F_MAX_LEN], pLen = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
		uint8_t pIndex = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	f887 3114 	strb.w	r3, [r7, #276]	@ 0x114
		// | H1 | H2 |
		pData[pIndex++] = FP_H1; pData[pIndex++] = FP_H2;
 800057a:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 800057e:	1c5a      	adds	r2, r3, #1
 8000580:	f887 2114 	strb.w	r2, [r7, #276]	@ 0x114
 8000584:	461a      	mov	r2, r3
 8000586:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800058a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800058e:	21ab      	movs	r1, #171	@ 0xab
 8000590:	5499      	strb	r1, [r3, r2]
 8000592:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	f887 2114 	strb.w	r2, [r7, #276]	@ 0x114
 800059c:	461a      	mov	r2, r3
 800059e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80005a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80005a6:	21cd      	movs	r1, #205	@ 0xcd
 80005a8:	5499      	strb	r1, [r3, r2]
		pData[pIndex++] = devID; // | CMD |
 80005aa:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 80005ae:	1c5a      	adds	r2, r3, #1
 80005b0:	f887 2114 	strb.w	r2, [r7, #276]	@ 0x114
 80005b4:	4619      	mov	r1, r3
 80005b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80005ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80005be:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 80005c2:	545a      	strb	r2, [r3, r1]
		//
		switch (devID) {
 80005c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d002      	beq.n	80005d2 <HandlerDeviceAction+0x106>
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d002      	beq.n	80005d6 <HandlerDeviceAction+0x10a>
		{

			break;
		}
		default:
			break;
 80005d0:	e002      	b.n	80005d8 <HandlerDeviceAction+0x10c>
			break;
 80005d2:	bf00      	nop
 80005d4:	e000      	b.n	80005d8 <HandlerDeviceAction+0x10c>
			break;
 80005d6:	bf00      	nop
//		if(pLen)
//		{
//			HAL_UART_Transmit(&huart4, pData, pLen, 100);
//		}
	}
}
 80005d8:	bf00      	nop
 80005da:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000204 	.word	0x20000204
 80005e8:	08005ec8 	.word	0x08005ec8
 80005ec:	200004b0 	.word	0x200004b0
 80005f0:	40010c00 	.word	0x40010c00

080005f4 <HandleDeviceSendFrame>:

void HandleDeviceSendFrame(uint8_t devID, uint8_t buffer_len, uint8_t *buffer)
{
 80005f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005f8:	b0c9      	sub	sp, #292	@ 0x124
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000600:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800060a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800060e:	4602      	mov	r2, r0
 8000610:	701a      	strb	r2, [r3, #0]
 8000612:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000616:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800061a:	460a      	mov	r2, r1
 800061c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 800061e:	200a      	movs	r0, #10
 8000620:	f002 f874 	bl	800270c <HAL_Delay>
	uint8_t pData[FP_F_MAX_LEN], pLen = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	uint8_t pIndex = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
	// | H1 | H2 |
	pData[pIndex++] = FP_H1; pData[pIndex++] = FP_H2;
 8000630:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000634:	1c5a      	adds	r2, r3, #1
 8000636:	f887 211e 	strb.w	r2, [r7, #286]	@ 0x11e
 800063a:	461a      	mov	r2, r3
 800063c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000640:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000644:	21ab      	movs	r1, #171	@ 0xab
 8000646:	5499      	strb	r1, [r3, r2]
 8000648:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	f887 211e 	strb.w	r2, [r7, #286]	@ 0x11e
 8000652:	461a      	mov	r2, r3
 8000654:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000658:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800065c:	21cd      	movs	r1, #205	@ 0xcd
 800065e:	5499      	strb	r1, [r3, r2]
	pData[pIndex++] = devID; // | CMD |
 8000660:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000664:	1c5a      	adds	r2, r3, #1
 8000666:	f887 211e 	strb.w	r2, [r7, #286]	@ 0x11e
 800066a:	4619      	mov	r1, r3
 800066c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000670:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000674:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000678:	f2a2 1219 	subw	r2, r2, #281	@ 0x119
 800067c:	7812      	ldrb	r2, [r2, #0]
 800067e:	545a      	strb	r2, [r3, r1]

	switch (devID) {
 8000680:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000684:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	f040 80b9 	bne.w	8000802 <HandleDeviceSendFrame+0x20e>
		case DEV_0_ID:
			//
			pLen = FP_F_LEN(buffer_len);
 8000690:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000694:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	3308      	adds	r3, #8
 800069c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
			pData[pIndex++] = buffer_len; // | DATA LEN |
 80006a0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80006a4:	1c5a      	adds	r2, r3, #1
 80006a6:	f887 211e 	strb.w	r2, [r7, #286]	@ 0x11e
 80006aa:	4619      	mov	r1, r3
 80006ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80006b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80006b4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80006b8:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 80006bc:	7812      	ldrb	r2, [r2, #0]
 80006be:	545a      	strb	r2, [r3, r1]

			//
			uint8_t DATA[buffer_len];
 80006c0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80006c4:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80006c8:	7819      	ldrb	r1, [r3, #0]
 80006ca:	466b      	mov	r3, sp
 80006cc:	461e      	mov	r6, r3
 80006ce:	460b      	mov	r3, r1
 80006d0:	3b01      	subs	r3, #1
 80006d2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80006d6:	b2cb      	uxtb	r3, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	4698      	mov	r8, r3
 80006dc:	4691      	mov	r9, r2
 80006de:	f04f 0200 	mov.w	r2, #0
 80006e2:	f04f 0300 	mov.w	r3, #0
 80006e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80006ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80006ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80006f2:	b2cb      	uxtb	r3, r1
 80006f4:	2200      	movs	r2, #0
 80006f6:	461c      	mov	r4, r3
 80006f8:	4615      	mov	r5, r2
 80006fa:	f04f 0200 	mov.w	r2, #0
 80006fe:	f04f 0300 	mov.w	r3, #0
 8000702:	00eb      	lsls	r3, r5, #3
 8000704:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000708:	00e2      	lsls	r2, r4, #3
 800070a:	460b      	mov	r3, r1
 800070c:	3307      	adds	r3, #7
 800070e:	08db      	lsrs	r3, r3, #3
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	ebad 0d03 	sub.w	sp, sp, r3
 8000716:	466b      	mov	r3, sp
 8000718:	3300      	adds	r3, #0
 800071a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
			for(uint8_t i = 0;i < buffer_len;i++)
 800071e:	2300      	movs	r3, #0
 8000720:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000724:	e012      	b.n	800074c <HandleDeviceSendFrame+0x158>
				DATA[i] = buffer[i];
 8000726:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800072a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800072e:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8000732:	6812      	ldr	r2, [r2, #0]
 8000734:	441a      	add	r2, r3
 8000736:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800073a:	7811      	ldrb	r1, [r2, #0]
 800073c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000740:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0;i < buffer_len;i++)
 8000742:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000746:	3301      	adds	r3, #1
 8000748:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 800074c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000750:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000754:	f897 211d 	ldrb.w	r2, [r7, #285]	@ 0x11d
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	429a      	cmp	r2, r3
 800075c:	d3e3      	bcc.n	8000726 <HandleDeviceSendFrame+0x132>

			//
			for(uint8_t i = 0;i < buffer_len;i++)
 800075e:	2300      	movs	r3, #0
 8000760:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8000764:	e014      	b.n	8000790 <HandleDeviceSendFrame+0x19c>
			{
				//				(DATA & (0xFF << i)) >> i; // | DATA |
				pData[pIndex++] = DATA[i];
 8000766:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 800076a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800076e:	1c59      	adds	r1, r3, #1
 8000770:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 8000774:	4619      	mov	r1, r3
 8000776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800077a:	5c9a      	ldrb	r2, [r3, r2]
 800077c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000780:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000784:	545a      	strb	r2, [r3, r1]
			for(uint8_t i = 0;i < buffer_len;i++)
 8000786:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 800078a:	3301      	adds	r3, #1
 800078c:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8000790:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000794:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000798:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	429a      	cmp	r2, r3
 80007a0:	d3e1      	bcc.n	8000766 <HandleDeviceSendFrame+0x172>
			}

			//
			pData[pIndex++] = FP_T1; pData[pIndex++] = FP_T2; // | T1 | T2 |
 80007a2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80007a6:	1c5a      	adds	r2, r3, #1
 80007a8:	f887 211e 	strb.w	r2, [r7, #286]	@ 0x11e
 80007ac:	461a      	mov	r2, r3
 80007ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007b2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80007b6:	21e1      	movs	r1, #225	@ 0xe1
 80007b8:	5499      	strb	r1, [r3, r2]
 80007ba:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	f887 211e 	strb.w	r2, [r7, #286]	@ 0x11e
 80007c4:	461a      	mov	r2, r3
 80007c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007ca:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80007ce:	21e2      	movs	r1, #226	@ 0xe2
 80007d0:	5499      	strb	r1, [r3, r2]

			// | CRC |
			uint16_t *pCRC = (uint16_t*)(pData + pIndex);
 80007d2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80007d6:	f107 0208 	add.w	r2, r7, #8
 80007da:	4413      	add	r3, r2
 80007dc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
			*pCRC = Compute_CRC16(DATA, buffer_len);
 80007e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007e4:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	4619      	mov	r1, r3
 80007ec:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80007f0:	f7ff fd18 	bl	8000224 <Compute_CRC16>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80007fc:	801a      	strh	r2, [r3, #0]

			break;
 80007fe:	bf00      	nop
 8000800:	46b5      	mov	sp, r6
//		default:
//			break;
	}

	//
	if(pLen)
 8000802:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000806:	2b00      	cmp	r3, #0
 8000808:	d009      	beq.n	800081e <HandleDeviceSendFrame+0x22a>
	{
		HAL_UART_Transmit(&huart4, pData, pLen, 2000);
 800080a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800080e:	b29a      	uxth	r2, r3
 8000810:	f107 0108 	add.w	r1, r7, #8
 8000814:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000818:	4804      	ldr	r0, [pc, #16]	@ (800082c <HandleDeviceSendFrame+0x238>)
 800081a:	f004 f865 	bl	80048e8 <HAL_UART_Transmit>
	}
}
 800081e:	bf00      	nop
 8000820:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8000824:	46bd      	mov	sp, r7
 8000826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800082a:	bf00      	nop
 800082c:	200002d4 	.word	0x200002d4

08000830 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	// huart 4
	//	if(*huart == &huart4)
	//	{
	uint8_t rx = huart->Instance->DR;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	73fb      	strb	r3, [r7, #15]

	// put new char into buffer from UART
	RxBuf[RxHead] = rx;
 8000840:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <HAL_UART_RxCpltCallback+0x48>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	490d      	ldr	r1, [pc, #52]	@ (800087c <HAL_UART_RxCpltCallback+0x4c>)
 8000846:	7bfa      	ldrb	r2, [r7, #15]
 8000848:	54ca      	strb	r2, [r1, r3]

	if ((++RxHead) > (RXBUFSIZE-1))
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <HAL_UART_RxCpltCallback+0x48>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	3301      	adds	r3, #1
 8000850:	4a09      	ldr	r2, [pc, #36]	@ (8000878 <HAL_UART_RxCpltCallback+0x48>)
 8000852:	6013      	str	r3, [r2, #0]
 8000854:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <HAL_UART_RxCpltCallback+0x48>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800085c:	db02      	blt.n	8000864 <HAL_UART_RxCpltCallback+0x34>
	{
		RxHead = 0;
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <HAL_UART_RxCpltCallback+0x48>)
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
	}

	//
	HAL_UART_Receive_IT(&huart4, &receive_data, 1);
 8000864:	2201      	movs	r2, #1
 8000866:	4906      	ldr	r1, [pc, #24]	@ (8000880 <HAL_UART_RxCpltCallback+0x50>)
 8000868:	4806      	ldr	r0, [pc, #24]	@ (8000884 <HAL_UART_RxCpltCallback+0x54>)
 800086a:	f004 f8c8 	bl	80049fe <HAL_UART_Receive_IT>
	//	    if(rx == 0xE2u)
	//	    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);

	//	}

}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000d78 	.word	0x20000d78
 800087c:	20000978 	.word	0x20000978
 8000880:	20000364 	.word	0x20000364
 8000884:	200002d4 	.word	0x200002d4

08000888 <Handle_UART_FP>:

void Handle_UART_FP()
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
	if(FrameParse.FP_MOD != DECT_COML)
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <Handle_UART_FP+0x44>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b05      	cmp	r3, #5
 8000894:	d009      	beq.n	80008aa <Handle_UART_FP+0x22>
	{
		uint8_t __char = _getchar();
 8000896:	f001 fe21 	bl	80024dc <_getchar>
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
		ParseFrameHandler(&FrameParse, __char);
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	4619      	mov	r1, r3
 80008a2:	480a      	ldr	r0, [pc, #40]	@ (80008cc <Handle_UART_FP+0x44>)
 80008a4:	f7ff fd5e 	bl	8000364 <ParseFrameHandler>
		HandlerDeviceAction(FrameParse._CMD,
				FrameParse.buffer.len,
				FrameParse.buffer.data);
		FP_Init(&FrameParse);
	}
}
 80008a8:	e00b      	b.n	80008c2 <Handle_UART_FP+0x3a>
		HandlerDeviceAction(FrameParse._CMD,
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <Handle_UART_FP+0x44>)
 80008ac:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80008b0:	4a06      	ldr	r2, [pc, #24]	@ (80008cc <Handle_UART_FP+0x44>)
 80008b2:	7911      	ldrb	r1, [r2, #4]
 80008b4:	4a06      	ldr	r2, [pc, #24]	@ (80008d0 <Handle_UART_FP+0x48>)
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe08 	bl	80004cc <HandlerDeviceAction>
		FP_Init(&FrameParse);
 80008bc:	4803      	ldr	r0, [pc, #12]	@ (80008cc <Handle_UART_FP+0x44>)
 80008be:	f7ff fd07 	bl	80002d0 <FP_Init>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000368 	.word	0x20000368
 80008d0:	2000036d 	.word	0x2000036d

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b08d      	sub	sp, #52	@ 0x34
 80008d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008da:	f001 feb5 	bl	8002648 <HAL_Init>

  /* USER CODE BEGIN Init */
	FP_Init(&FrameParse);
 80008de:	4893      	ldr	r0, [pc, #588]	@ (8000b2c <main+0x258>)
 80008e0:	f7ff fcf6 	bl	80002d0 <FP_Init>
	MAX30105_Init(&particleSensor, &hi2c2);
 80008e4:	4992      	ldr	r1, [pc, #584]	@ (8000b30 <main+0x25c>)
 80008e6:	4893      	ldr	r0, [pc, #588]	@ (8000b34 <main+0x260>)
 80008e8:	f000 face 	bl	8000e88 <MAX30105_Init>
	USART_Init(&USART_handler, &huart1);
 80008ec:	4992      	ldr	r1, [pc, #584]	@ (8000b38 <main+0x264>)
 80008ee:	4893      	ldr	r0, [pc, #588]	@ (8000b3c <main+0x268>)
 80008f0:	f001 fe20 	bl	8002534 <USART_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f4:	f000 f946 	bl	8000b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f8:	f000 fa0c 	bl	8000d14 <MX_GPIO_Init>
  MX_UART4_Init();
 80008fc:	f000 f9b6 	bl	8000c6c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000900:	f000 f9de 	bl	8000cc0 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000904:	f000 f984 	bl	8000c10 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	// Initialize sensor
	if(!MAX30105_begin(&particleSensor, MAX30105_ADDRESS))
 8000908:	21ae      	movs	r1, #174	@ 0xae
 800090a:	488a      	ldr	r0, [pc, #552]	@ (8000b34 <main+0x260>)
 800090c:	f000 fad9 	bl	8000ec2 <MAX30105_begin>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d101      	bne.n	800091a <main+0x46>
	{
		//MAX30105 was not found. Please check wiring/power.
		while(1);
 8000916:	bf00      	nop
 8000918:	e7fd      	b.n	8000916 <main+0x42>
	}

	uint8_t ledBrightness = 60; // Options: 0=Off to 255=50mA
 800091a:	233c      	movs	r3, #60	@ 0x3c
 800091c:	77bb      	strb	r3, [r7, #30]
	uint8_t sampleAverage = 4;  // Options: 1, 2, 4, 8, 16, 32
 800091e:	2304      	movs	r3, #4
 8000920:	777b      	strb	r3, [r7, #29]
	uint8_t ledMode = 2;        // Options: 1 = Red only, 2 = Red + IR, 3 = Red + IR + Green
 8000922:	2302      	movs	r3, #2
 8000924:	773b      	strb	r3, [r7, #28]
	uint8_t sampleRate = 100;   // Options: 50, 100, 200, 400, 800, 1000, 1600, 3200
 8000926:	2364      	movs	r3, #100	@ 0x64
 8000928:	76fb      	strb	r3, [r7, #27]
	int pulseWidth = 411;    // Options: 69, 118, 215, 411
 800092a:	f240 139b 	movw	r3, #411	@ 0x19b
 800092e:	617b      	str	r3, [r7, #20]
	int adcRange = 4096;     // Options: 2048, 4096, 8192, 16384
 8000930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000934:	613b      	str	r3, [r7, #16]

	MAX30105_setup(&particleSensor, ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); // Configure sensor with these settings
 8000936:	7efb      	ldrb	r3, [r7, #27]
 8000938:	7f3c      	ldrb	r4, [r7, #28]
 800093a:	7f78      	ldrb	r0, [r7, #29]
 800093c:	7fb9      	ldrb	r1, [r7, #30]
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	9202      	str	r2, [sp, #8]
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	9201      	str	r2, [sp, #4]
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	4623      	mov	r3, r4
 800094a:	4602      	mov	r2, r0
 800094c:	4879      	ldr	r0, [pc, #484]	@ (8000b34 <main+0x260>)
 800094e:	f000 fe66 	bl	800161e <MAX30105_setup>

	//
	HAL_UART_Receive_IT(&huart4, &receive_data, 1);
 8000952:	2201      	movs	r2, #1
 8000954:	497a      	ldr	r1, [pc, #488]	@ (8000b40 <main+0x26c>)
 8000956:	487b      	ldr	r0, [pc, #492]	@ (8000b44 <main+0x270>)
 8000958:	f004 f851 	bl	80049fe <HAL_UART_Receive_IT>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(RxTail != RxHead || FrameParse.FP_MOD == DECT_COML)
 800095c:	4b7a      	ldr	r3, [pc, #488]	@ (8000b48 <main+0x274>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b7a      	ldr	r3, [pc, #488]	@ (8000b4c <main+0x278>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	429a      	cmp	r2, r3
 8000966:	d103      	bne.n	8000970 <main+0x9c>
 8000968:	4b70      	ldr	r3, [pc, #448]	@ (8000b2c <main+0x258>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b05      	cmp	r3, #5
 800096e:	d102      	bne.n	8000976 <main+0xa2>
			Handle_UART_FP();
 8000970:	f7ff ff8a 	bl	8000888 <Handle_UART_FP>
 8000974:	e0d9      	b.n	8000b2a <main+0x256>
		else

			if(startToCalculate)
 8000976:	4b76      	ldr	r3, [pc, #472]	@ (8000b50 <main+0x27c>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d0ee      	beq.n	800095c <main+0x88>
			{
				uint8_t pData[DEV_0_DT_LEN];
				//		bufferLength = 100; // buffer length of 100 stores 4 seconds of samples running at 25sps
				// read the first 100 samples, and determine the signal range
				for (uint8_t i = 0 ; i < (ledsBufferLength - 1); i++)
 800097e:	2300      	movs	r3, #0
 8000980:	77fb      	strb	r3, [r7, #31]
 8000982:	e048      	b.n	8000a16 <main+0x142>
				{
					while (!MAX30105_available(&particleSensor)) // do we have new data?
						MAX30105_check(&particleSensor);		// Check the sensor for new data
 8000984:	486b      	ldr	r0, [pc, #428]	@ (8000b34 <main+0x260>)
 8000986:	f000 fc17 	bl	80011b8 <MAX30105_check>
					while (!MAX30105_available(&particleSensor)) // do we have new data?
 800098a:	486a      	ldr	r0, [pc, #424]	@ (8000b34 <main+0x260>)
 800098c:	f000 fd48 	bl	8001420 <MAX30105_available>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0f6      	beq.n	8000984 <main+0xb0>

					redBuffer[i] = MAX30105_getRed(&particleSensor);
 8000996:	4867      	ldr	r0, [pc, #412]	@ (8000b34 <main+0x260>)
 8000998:	f000 faae 	bl	8000ef8 <MAX30105_getRed>
 800099c:	4602      	mov	r2, r0
 800099e:	7ffb      	ldrb	r3, [r7, #31]
 80009a0:	b291      	uxth	r1, r2
 80009a2:	4a6c      	ldr	r2, [pc, #432]	@ (8000b54 <main+0x280>)
 80009a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					irBuffer[i] = MAX30105_getIR(&particleSensor);
 80009a8:	4862      	ldr	r0, [pc, #392]	@ (8000b34 <main+0x260>)
 80009aa:	f000 fabe 	bl	8000f2a <MAX30105_getIR>
 80009ae:	4602      	mov	r2, r0
 80009b0:	7ffb      	ldrb	r3, [r7, #31]
 80009b2:	b291      	uxth	r1, r2
 80009b4:	4a68      	ldr	r2, [pc, #416]	@ (8000b58 <main+0x284>)
 80009b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					MAX30105_nextSample(&particleSensor); // We're finished with this sample so move to next sample
 80009ba:	485e      	ldr	r0, [pc, #376]	@ (8000b34 <main+0x260>)
 80009bc:	f000 fd4b 	bl	8001456 <MAX30105_nextSample>
					USART_Transmit(&USART_handler, "\r\nred = %d, i = %d", redBuffer[i], i);
 80009c0:	7ffb      	ldrb	r3, [r7, #31]
 80009c2:	4a64      	ldr	r2, [pc, #400]	@ (8000b54 <main+0x280>)
 80009c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009c8:	461a      	mov	r2, r3
 80009ca:	7ffb      	ldrb	r3, [r7, #31]
 80009cc:	4963      	ldr	r1, [pc, #396]	@ (8000b5c <main+0x288>)
 80009ce:	485b      	ldr	r0, [pc, #364]	@ (8000b3c <main+0x268>)
 80009d0:	f001 fdf6 	bl	80025c0 <USART_Transmit>
					USART_Transmit(&USART_handler, ", ir = %d", irBuffer[i]);
 80009d4:	7ffb      	ldrb	r3, [r7, #31]
 80009d6:	4a60      	ldr	r2, [pc, #384]	@ (8000b58 <main+0x284>)
 80009d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009dc:	461a      	mov	r2, r3
 80009de:	4960      	ldr	r1, [pc, #384]	@ (8000b60 <main+0x28c>)
 80009e0:	4856      	ldr	r0, [pc, #344]	@ (8000b3c <main+0x268>)
 80009e2:	f001 fded 	bl	80025c0 <USART_Transmit>

					//
					*((uint16_t*)pData + 0) = redBuffer[i];
 80009e6:	7ffa      	ldrb	r2, [r7, #31]
 80009e8:	463b      	mov	r3, r7
 80009ea:	495a      	ldr	r1, [pc, #360]	@ (8000b54 <main+0x280>)
 80009ec:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80009f0:	801a      	strh	r2, [r3, #0]
					*((uint16_t*)pData + 1) = irBuffer[i];
 80009f2:	7ffa      	ldrb	r2, [r7, #31]
 80009f4:	463b      	mov	r3, r7
 80009f6:	3302      	adds	r3, #2
 80009f8:	4957      	ldr	r1, [pc, #348]	@ (8000b58 <main+0x284>)
 80009fa:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80009fe:	801a      	strh	r2, [r3, #0]
//					*((uint32_t*)pData + 1) = spo2;
//					*((uint32_t*)pData + 2) = heartRate;
					pData[5] = i; // sychronize, eliminate 8 bytes SPO2 and HR
 8000a00:	7ffb      	ldrb	r3, [r7, #31]
 8000a02:	717b      	strb	r3, [r7, #5]
					//				HandlerDeviceAction(0x00, DEV_0_DT_LEN, pData);
					HandleDeviceSendFrame(0x00, DEV_0_DT_LEN - 8, pData);
 8000a04:	463b      	mov	r3, r7
 8000a06:	461a      	mov	r2, r3
 8000a08:	2105      	movs	r1, #5
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f7ff fdf2 	bl	80005f4 <HandleDeviceSendFrame>
				for (uint8_t i = 0 ; i < (ledsBufferLength - 1); i++)
 8000a10:	7ffb      	ldrb	r3, [r7, #31]
 8000a12:	3301      	adds	r3, #1
 8000a14:	77fb      	strb	r3, [r7, #31]
 8000a16:	7ffa      	ldrb	r2, [r7, #31]
 8000a18:	2364      	movs	r3, #100	@ 0x64
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	dbb4      	blt.n	800098a <main+0xb6>
				}

				// in 100th
				while (!MAX30105_available(&particleSensor)) // do we have new data?
 8000a20:	e002      	b.n	8000a28 <main+0x154>
					MAX30105_check(&particleSensor);		// Check the sensor for new data
 8000a22:	4844      	ldr	r0, [pc, #272]	@ (8000b34 <main+0x260>)
 8000a24:	f000 fbc8 	bl	80011b8 <MAX30105_check>
				while (!MAX30105_available(&particleSensor)) // do we have new data?
 8000a28:	4842      	ldr	r0, [pc, #264]	@ (8000b34 <main+0x260>)
 8000a2a:	f000 fcf9 	bl	8001420 <MAX30105_available>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d0f6      	beq.n	8000a22 <main+0x14e>

				redBuffer[ledsBufferLength - 1] = MAX30105_getRed(&particleSensor);
 8000a34:	483f      	ldr	r0, [pc, #252]	@ (8000b34 <main+0x260>)
 8000a36:	f000 fa5f 	bl	8000ef8 <MAX30105_getRed>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	2364      	movs	r3, #100	@ 0x64
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	b291      	uxth	r1, r2
 8000a42:	4a44      	ldr	r2, [pc, #272]	@ (8000b54 <main+0x280>)
 8000a44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				irBuffer[ledsBufferLength - 1] = MAX30105_getIR(&particleSensor);
 8000a48:	483a      	ldr	r0, [pc, #232]	@ (8000b34 <main+0x260>)
 8000a4a:	f000 fa6e 	bl	8000f2a <MAX30105_getIR>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	2364      	movs	r3, #100	@ 0x64
 8000a52:	3b01      	subs	r3, #1
 8000a54:	b291      	uxth	r1, r2
 8000a56:	4a40      	ldr	r2, [pc, #256]	@ (8000b58 <main+0x284>)
 8000a58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				MAX30105_nextSample(&particleSensor); // We're finished with this sample so move to next sample
 8000a5c:	4835      	ldr	r0, [pc, #212]	@ (8000b34 <main+0x260>)
 8000a5e:	f000 fcfa 	bl	8001456 <MAX30105_nextSample>
				//calculate heart rate and SpO2 after first 100 samples (first 4 seconds of samples)
				maxim_heart_rate_and_oxygen_saturation(irBuffer, ledsBufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
 8000a62:	2164      	movs	r1, #100	@ 0x64
 8000a64:	4b3f      	ldr	r3, [pc, #252]	@ (8000b64 <main+0x290>)
 8000a66:	9302      	str	r3, [sp, #8]
 8000a68:	4b3f      	ldr	r3, [pc, #252]	@ (8000b68 <main+0x294>)
 8000a6a:	9301      	str	r3, [sp, #4]
 8000a6c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b6c <main+0x298>)
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	4b3f      	ldr	r3, [pc, #252]	@ (8000b70 <main+0x29c>)
 8000a72:	4a38      	ldr	r2, [pc, #224]	@ (8000b54 <main+0x280>)
 8000a74:	4838      	ldr	r0, [pc, #224]	@ (8000b58 <main+0x284>)
 8000a76:	f000 ff19 	bl	80018ac <maxim_heart_rate_and_oxygen_saturation>

				USART_Transmit(&USART_handler, "\r\nred = %d, i = %d", redBuffer[ledsBufferLength - 1], ledsBufferLength - 1);
 8000a7a:	2364      	movs	r3, #100	@ 0x64
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	4a35      	ldr	r2, [pc, #212]	@ (8000b54 <main+0x280>)
 8000a80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a84:	461a      	mov	r2, r3
 8000a86:	2364      	movs	r3, #100	@ 0x64
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	4934      	ldr	r1, [pc, #208]	@ (8000b5c <main+0x288>)
 8000a8c:	482b      	ldr	r0, [pc, #172]	@ (8000b3c <main+0x268>)
 8000a8e:	f001 fd97 	bl	80025c0 <USART_Transmit>
				USART_Transmit(&USART_handler, ", ir = %d", irBuffer[ledsBufferLength - 1]);
 8000a92:	2364      	movs	r3, #100	@ 0x64
 8000a94:	3b01      	subs	r3, #1
 8000a96:	4a30      	ldr	r2, [pc, #192]	@ (8000b58 <main+0x284>)
 8000a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4930      	ldr	r1, [pc, #192]	@ (8000b60 <main+0x28c>)
 8000aa0:	4826      	ldr	r0, [pc, #152]	@ (8000b3c <main+0x268>)
 8000aa2:	f001 fd8d 	bl	80025c0 <USART_Transmit>
				USART_Transmit(&USART_handler, ", HR = %d", heartRate);
 8000aa6:	4b30      	ldr	r3, [pc, #192]	@ (8000b68 <main+0x294>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4931      	ldr	r1, [pc, #196]	@ (8000b74 <main+0x2a0>)
 8000aae:	4823      	ldr	r0, [pc, #140]	@ (8000b3c <main+0x268>)
 8000ab0:	f001 fd86 	bl	80025c0 <USART_Transmit>
				USART_Transmit(&USART_handler, ", HRvalid = %d", validHeartRate);
 8000ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b64 <main+0x290>)
 8000ab6:	f993 3000 	ldrsb.w	r3, [r3]
 8000aba:	461a      	mov	r2, r3
 8000abc:	492e      	ldr	r1, [pc, #184]	@ (8000b78 <main+0x2a4>)
 8000abe:	481f      	ldr	r0, [pc, #124]	@ (8000b3c <main+0x268>)
 8000ac0:	f001 fd7e 	bl	80025c0 <USART_Transmit>
				USART_Transmit(&USART_handler, ", SPO2 = %d", spo2);
 8000ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b70 <main+0x29c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	492c      	ldr	r1, [pc, #176]	@ (8000b7c <main+0x2a8>)
 8000acc:	481b      	ldr	r0, [pc, #108]	@ (8000b3c <main+0x268>)
 8000ace:	f001 fd77 	bl	80025c0 <USART_Transmit>
				USART_Transmit(&USART_handler, ", SPO2Valid = %d", validSPO2);
 8000ad2:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <main+0x298>)
 8000ad4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4929      	ldr	r1, [pc, #164]	@ (8000b80 <main+0x2ac>)
 8000adc:	4817      	ldr	r0, [pc, #92]	@ (8000b3c <main+0x268>)
 8000ade:	f001 fd6f 	bl	80025c0 <USART_Transmit>

				//
				*((uint16_t*)pData + 0) = redBuffer[ledsBufferLength - 1];
 8000ae2:	2364      	movs	r3, #100	@ 0x64
 8000ae4:	1e5a      	subs	r2, r3, #1
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	491a      	ldr	r1, [pc, #104]	@ (8000b54 <main+0x280>)
 8000aea:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000aee:	801a      	strh	r2, [r3, #0]
				*((uint16_t*)pData + 1) = irBuffer[ledsBufferLength - 1];
 8000af0:	2364      	movs	r3, #100	@ 0x64
 8000af2:	1e5a      	subs	r2, r3, #1
 8000af4:	463b      	mov	r3, r7
 8000af6:	3302      	adds	r3, #2
 8000af8:	4917      	ldr	r1, [pc, #92]	@ (8000b58 <main+0x284>)
 8000afa:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000afe:	801a      	strh	r2, [r3, #0]
				*((uint32_t*)pData + 1) = spo2;
 8000b00:	4b1b      	ldr	r3, [pc, #108]	@ (8000b70 <main+0x29c>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	463b      	mov	r3, r7
 8000b06:	3304      	adds	r3, #4
 8000b08:	601a      	str	r2, [r3, #0]
				*((uint32_t*)pData + 2) = heartRate;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <main+0x294>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	463b      	mov	r3, r7
 8000b10:	3308      	adds	r3, #8
 8000b12:	601a      	str	r2, [r3, #0]
				pData[DEV_0_DT_LEN - 1] = ledsBufferLength - 1; // sychronize
 8000b14:	2364      	movs	r3, #100	@ 0x64
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	733b      	strb	r3, [r7, #12]
				//			HandlerDeviceAction(0x00, DEV_0_DT_LEN, pData);
				HandleDeviceSendFrame(0x00, DEV_0_DT_LEN, pData);
 8000b1e:	463b      	mov	r3, r7
 8000b20:	461a      	mov	r2, r3
 8000b22:	210d      	movs	r1, #13
 8000b24:	2000      	movs	r0, #0
 8000b26:	f7ff fd65 	bl	80005f4 <HandleDeviceSendFrame>
		if(RxTail != RxHead || FrameParse.FP_MOD == DECT_COML)
 8000b2a:	e717      	b.n	800095c <main+0x88>
 8000b2c:	20000368 	.word	0x20000368
 8000b30:	20000280 	.word	0x20000280
 8000b34:	20000474 	.word	0x20000474
 8000b38:	2000031c 	.word	0x2000031c
 8000b3c:	200004b0 	.word	0x200004b0
 8000b40:	20000364 	.word	0x20000364
 8000b44:	200002d4 	.word	0x200002d4
 8000b48:	20000d7c 	.word	0x20000d7c
 8000b4c:	20000d78 	.word	0x20000d78
 8000b50:	20000204 	.word	0x20000204
 8000b54:	2000057c 	.word	0x2000057c
 8000b58:	200004b4 	.word	0x200004b4
 8000b5c:	08005edc 	.word	0x08005edc
 8000b60:	08005ef0 	.word	0x08005ef0
 8000b64:	20000650 	.word	0x20000650
 8000b68:	2000064c 	.word	0x2000064c
 8000b6c:	20000648 	.word	0x20000648
 8000b70:	20000644 	.word	0x20000644
 8000b74:	08005efc 	.word	0x08005efc
 8000b78:	08005f08 	.word	0x08005f08
 8000b7c:	08005f18 	.word	0x08005f18
 8000b80:	08005f24 	.word	0x08005f24

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b090      	sub	sp, #64	@ 0x40
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	f107 0318 	add.w	r3, r7, #24
 8000b8e:	2228      	movs	r2, #40	@ 0x28
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f004 fcfc 	bl	8005590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000baa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bc2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc8:	f107 0318 	add.w	r3, r7, #24
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f003 fa2b 	bl	8004028 <HAL_RCC_OscConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000bd8:	f000 f90a 	bl	8000df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bdc:	230f      	movs	r3, #15
 8000bde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be0:	2302      	movs	r3, #2
 8000be2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 fc98 	bl	800452c <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c02:	f000 f8f5 	bl	8000df0 <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3740      	adds	r7, #64	@ 0x40
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c14:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <MX_I2C2_Init+0x50>)
 8000c16:	4a13      	ldr	r2, [pc, #76]	@ (8000c64 <MX_I2C2_Init+0x54>)
 8000c18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <MX_I2C2_Init+0x50>)
 8000c1c:	4a12      	ldr	r2, [pc, #72]	@ (8000c68 <MX_I2C2_Init+0x58>)
 8000c1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <MX_I2C2_Init+0x50>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <MX_I2C2_Init+0x50>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <MX_I2C2_Init+0x50>)
 8000c2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c32:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c34:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <MX_I2C2_Init+0x50>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c3a:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <MX_I2C2_Init+0x50>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c40:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <MX_I2C2_Init+0x50>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c46:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <MX_I2C2_Init+0x50>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c4c:	4804      	ldr	r0, [pc, #16]	@ (8000c60 <MX_I2C2_Init+0x50>)
 8000c4e:	f002 f99f 	bl	8002f90 <HAL_I2C_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c58:	f000 f8ca 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000280 	.word	0x20000280
 8000c64:	40005800 	.word	0x40005800
 8000c68:	00061a80 	.word	0x00061a80

08000c6c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c70:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <MX_UART4_Init+0x4c>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	@ (8000cbc <MX_UART4_Init+0x50>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <MX_UART4_Init+0x4c>)
 8000c78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c7c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <MX_UART4_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <MX_UART4_Init+0x4c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <MX_UART4_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <MX_UART4_Init+0x4c>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <MX_UART4_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <MX_UART4_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <MX_UART4_Init+0x4c>)
 8000ca4:	f003 fdd0 	bl	8004848 <HAL_UART_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000cae:	f000 f89f 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200002d4 	.word	0x200002d4
 8000cbc:	40004c00 	.word	0x40004c00

08000cc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	@ (8000d10 <MX_USART1_UART_Init+0x50>)
 8000cc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cca:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ccc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cf8:	f003 fda6 	bl	8004848 <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d02:	f000 f875 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2000031c 	.word	0x2000031c
 8000d10:	40013800 	.word	0x40013800

08000d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	f107 0310 	add.w	r3, r7, #16
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d28:	4b2e      	ldr	r3, [pc, #184]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a2d      	ldr	r2, [pc, #180]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d2e:	f043 0310 	orr.w	r3, r3, #16
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b2b      	ldr	r3, [pc, #172]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0310 	and.w	r3, r3, #16
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d40:	4b28      	ldr	r3, [pc, #160]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a27      	ldr	r2, [pc, #156]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d46:	f043 0320 	orr.w	r3, r3, #32
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b25      	ldr	r3, [pc, #148]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0320 	and.w	r3, r3, #32
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d58:	4b22      	ldr	r3, [pc, #136]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a21      	ldr	r2, [pc, #132]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d5e:	f043 0308 	orr.w	r3, r3, #8
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b1f      	ldr	r3, [pc, #124]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0308 	and.w	r3, r3, #8
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d70:	4b1c      	ldr	r3, [pc, #112]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a1b      	ldr	r2, [pc, #108]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d76:	f043 0304 	orr.w	r3, r3, #4
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b19      	ldr	r3, [pc, #100]	@ (8000de4 <MX_GPIO_Init+0xd0>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f003 0304 	and.w	r3, r3, #4
 8000d84:	603b      	str	r3, [r7, #0]
 8000d86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d8e:	4816      	ldr	r0, [pc, #88]	@ (8000de8 <MX_GPIO_Init+0xd4>)
 8000d90:	f002 f8c4 	bl	8002f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <MX_GPIO_Init+0xd8>)
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4619      	mov	r1, r3
 8000da8:	480f      	ldr	r0, [pc, #60]	@ (8000de8 <MX_GPIO_Init+0xd4>)
 8000daa:	f001 ff23 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4808      	ldr	r0, [pc, #32]	@ (8000de8 <MX_GPIO_Init+0xd4>)
 8000dc8:	f001 ff14 	bl	8002bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2028      	movs	r0, #40	@ 0x28
 8000dd2:	f001 fd96 	bl	8002902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dd6:	2028      	movs	r0, #40	@ 0x28
 8000dd8:	f001 fdaf 	bl	800293a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ddc:	bf00      	nop
 8000dde:	3720      	adds	r7, #32
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010c00 	.word	0x40010c00
 8000dec:	10110000 	.word	0x10110000

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df4:	b672      	cpsid	i
}
 8000df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <Error_Handler+0x8>

08000dfc <I2C_WriteBuffer>:
static const uint8_t SLOT_GREEN_PILOT = 		0x07u;

//

void I2C_WriteBuffer(MAX30105_t *MAX30105_handler, uint8_t address, uint8_t *reg, uint8_t sizeBuf)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af02      	add	r7, sp, #8
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	461a      	mov	r2, r3
 8000e08:	460b      	mov	r3, r1
 8000e0a:	72fb      	strb	r3, [r7, #11]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	72bb      	strb	r3, [r7, #10]
	while(HAL_I2C_Master_Transmit(MAX30105_handler->hi2c, address, reg, sizeBuf, 100))
 8000e10:	e004      	b.n	8000e1c <I2C_WriteBuffer+0x20>
	{
		if(HAL_I2C_GetError(MAX30105_handler->hi2c) != HAL_I2C_ERROR_AF)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 fd75 	bl	8003906 <HAL_I2C_GetError>
	while(HAL_I2C_Master_Transmit(MAX30105_handler->hi2c, address, reg, sizeBuf, 100))
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	7afb      	ldrb	r3, [r7, #11]
 8000e22:	b299      	uxth	r1, r3
 8000e24:	7abb      	ldrb	r3, [r7, #10]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	2264      	movs	r2, #100	@ 0x64
 8000e2a:	9200      	str	r2, [sp, #0]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	f002 f9f3 	bl	8003218 <HAL_I2C_Master_Transmit>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1ec      	bne.n	8000e12 <I2C_WriteBuffer+0x16>
		{

		}
	}
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <I2C_ReadBuffer>:

void I2C_ReadBuffer(MAX30105_t *MAX30105_handler, uint8_t address, uint8_t *pData, uint8_t sizeBuf)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af02      	add	r7, sp, #8
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	460b      	mov	r3, r1
 8000e50:	72fb      	strb	r3, [r7, #11]
 8000e52:	4613      	mov	r3, r2
 8000e54:	72bb      	strb	r3, [r7, #10]
	while(HAL_I2C_Master_Receive(MAX30105_handler->hi2c, address, pData, sizeBuf, 100))
 8000e56:	e004      	b.n	8000e62 <I2C_ReadBuffer+0x20>
	{
		if(HAL_I2C_GetError(MAX30105_handler->hi2c) != HAL_I2C_ERROR_AF)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f002 fd52 	bl	8003906 <HAL_I2C_GetError>
	while(HAL_I2C_Master_Receive(MAX30105_handler->hi2c, address, pData, sizeBuf, 100))
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	6818      	ldr	r0, [r3, #0]
 8000e66:	7afb      	ldrb	r3, [r7, #11]
 8000e68:	b299      	uxth	r1, r3
 8000e6a:	7abb      	ldrb	r3, [r7, #10]
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	2264      	movs	r2, #100	@ 0x64
 8000e70:	9200      	str	r2, [sp, #0]
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	f002 face 	bl	8003414 <HAL_I2C_Master_Receive>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1ec      	bne.n	8000e58 <I2C_ReadBuffer+0x16>
		{

		}
	}
}
 8000e7e:	bf00      	nop
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <MAX30105_Init>:
void MAX30105_Init(MAX30105_t *MAX30105_handler, I2C_HandleTypeDef *hi2c)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
	MAX30105_handler->hi2c = hi2c;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	683a      	ldr	r2, [r7, #0]
 8000e96:	601a      	str	r2, [r3, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr

08000ea2 <MAX30105_readPartID>:

uint8_t MAX30105_readPartID(MAX30105_t *MAX30105_handler)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
	return MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_PARTID);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	791b      	ldrb	r3, [r3, #4]
 8000eae:	22ff      	movs	r2, #255	@ 0xff
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f000 fb2b 	bl	800150e <MAX30105_readRegister8>
 8000eb8:	4603      	mov	r3, r0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <MAX30105_begin>:

uint8_t MAX30105_begin(MAX30105_t *MAX30105_handler, uint8_t i2caddr)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	70fb      	strb	r3, [r7, #3]
	MAX30105_handler->_i2caddr = i2caddr;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	78fa      	ldrb	r2, [r7, #3]
 8000ed2:	711a      	strb	r2, [r3, #4]

	// Step 1: Initial Communication and Verification
	// Check that a MAX30105 is connected
	if(MAX30105_readPartID(MAX30105_handler) != MAX_30105_EXPECTEDPARTID)
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ffe4 	bl	8000ea2 <MAX30105_readPartID>
 8000eda:	4603      	mov	r3, r0
 8000edc:	461a      	mov	r2, r3
 8000ede:	2315      	movs	r3, #21
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d001      	beq.n	8000ee8 <MAX30105_begin+0x26>
		// Error -- Part ID read from MAX30105 does not match expected part ID.
		// This may mean there is a physical connectivity problem (broken wire, unpowered, etc).
		return MAX30105_FAIL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	e003      	b.n	8000ef0 <MAX30105_begin+0x2e>

	// Populate revision ID
	MAX30105_readRevisionID(MAX30105_handler);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 fb54 	bl	8001596 <MAX30105_readRevisionID>

	return MAX30105_OK;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <MAX30105_getRed>:

// Report the most recent red value
uint32_t MAX30105_getRed(MAX30105_t *MAX30105_handler)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	// Check the sensor for new data for 250ms
	if (MAX30105_safeCheck(MAX30105_handler, 250))
 8000f00:	21fa      	movs	r1, #250	@ 0xfa
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f82a 	bl	8000f5c <MAX30105_safeCheck>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d008      	beq.n	8000f20 <MAX30105_getRed+0x28>
		return (MAX30105_handler->sense.red[MAX30105_handler->sense.head]);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000f14:	461a      	mov	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3202      	adds	r2, #2
 8000f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1e:	e000      	b.n	8000f22 <MAX30105_getRed+0x2a>
	else
		return (0); // Sensor failed to find new data
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <MAX30105_getIR>:

// Report the most recent IR value
int32_t MAX30105_getIR(MAX30105_t *MAX30105_handler)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
	// Check the sensor for new data for 250ms
	if (MAX30105_safeCheck(MAX30105_handler, 250))
 8000f32:	21fa      	movs	r1, #250	@ 0xfa
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 f811 	bl	8000f5c <MAX30105_safeCheck>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d008      	beq.n	8000f52 <MAX30105_getIR+0x28>
		return (MAX30105_handler->sense.IR[MAX30105_handler->sense.head]);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000f46:	461a      	mov	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3206      	adds	r2, #6
 8000f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f50:	e000      	b.n	8000f54 <MAX30105_getIR+0x2a>
	else
		return (0); // Sensor failed to find new data
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <MAX30105_safeCheck>:

// Check for new data but give up after a certain amount of time
// Returns true if new data was found
// Returns false if new data was not found
uint8_t MAX30105_safeCheck(MAX30105_t *MAX30105_handler, uint8_t maxTimeToCheck)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	70fb      	strb	r3, [r7, #3]
	uint32_t markTime = HAL_GetTick();
 8000f68:	f001 fbc6 	bl	80026f8 <HAL_GetTick>
 8000f6c:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if(HAL_GetTick() - markTime > maxTimeToCheck)
 8000f6e:	f001 fbc3 	bl	80026f8 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	1ad2      	subs	r2, r2, r3
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d901      	bls.n	8000f82 <MAX30105_safeCheck+0x26>
			return 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e00b      	b.n	8000f9a <MAX30105_safeCheck+0x3e>
		if(MAX30105_check(MAX30105_handler) == 1) // We found new data!
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 f918 	bl	80011b8 <MAX30105_check>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d101      	bne.n	8000f92 <MAX30105_safeCheck+0x36>
			return 1;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e003      	b.n	8000f9a <MAX30105_safeCheck+0x3e>

		HAL_Delay(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f001 fbba 	bl	800270c <HAL_Delay>
		if(HAL_GetTick() - markTime > maxTimeToCheck)
 8000f98:	e7e9      	b.n	8000f6e <MAX30105_safeCheck+0x12>
	}
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <MAX30105_softReset>:

//End Interrupt configuration
void MAX30105_softReset(MAX30105_t *MAX30105_handler)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b084      	sub	sp, #16
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
	MAX30105_bitMask(MAX30105_handler, MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
 8000faa:	2109      	movs	r1, #9
 8000fac:	22bf      	movs	r2, #191	@ 0xbf
 8000fae:	2340      	movs	r3, #64	@ 0x40
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 fb03 	bl	80015bc <MAX30105_bitMask>

	// Poll for bit to clear, reset is then complete
	// Timeout after 100ms
	for(uint8_t i = 0;i < 100;i++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	e014      	b.n	8000fe6 <MAX30105_softReset+0x44>
	{
		uint8_t response = MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_MODECONFIG);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	791b      	ldrb	r3, [r3, #4]
 8000fc0:	2209      	movs	r2, #9
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 faa2 	bl	800150e <MAX30105_readRegister8>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73bb      	strb	r3, [r7, #14]
		if ((response & MAX30105_RESET) == 0)
 8000fce:	2240      	movs	r2, #64	@ 0x40
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d009      	beq.n	8000fee <MAX30105_softReset+0x4c>
			break; //We're done!
		HAL_Delay(1); //Let's not over burden the I2C bus
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f001 fb96 	bl	800270c <HAL_Delay>
	for(uint8_t i = 0;i < 100;i++)
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	2b63      	cmp	r3, #99	@ 0x63
 8000fea:	d9e7      	bls.n	8000fbc <MAX30105_softReset+0x1a>
	}
}
 8000fec:	e000      	b.n	8000ff0 <MAX30105_softReset+0x4e>
			break; //We're done!
 8000fee:	bf00      	nop
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <MAX30105_setLEDMode>:

void MAX30105_setLEDMode(MAX30105_t *MAX30105_handler, uint8_t mode)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
	// Set which LEDs are used for sampling -- Red only, RED+IR only, or custom.
	// See datasheet, page 19
	MAX30105_bitMask(MAX30105_handler, MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
 8001004:	2109      	movs	r1, #9
 8001006:	22f8      	movs	r2, #248	@ 0xf8
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 fad6 	bl	80015bc <MAX30105_bitMask>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <MAX30105_setADCRange>:

void MAX30105_setADCRange(MAX30105_t *MAX30105_handler, uint8_t adcRange)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
	// adcRange: one of MAX30105_ADCRANGE_2048, _4096, _8192, _16384
	MAX30105_bitMask(MAX30105_handler, MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
 8001024:	210a      	movs	r1, #10
 8001026:	229f      	movs	r2, #159	@ 0x9f
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 fac6 	bl	80015bc <MAX30105_bitMask>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <MAX30105_setSampleRate>:

void MAX30105_setSampleRate(MAX30105_t *MAX30105_handler, uint8_t sampleRate)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	70fb      	strb	r3, [r7, #3]
	// sampleRate: one of MAX30105_SAMPLERATE_50, _100, _200, _400, _800, _1000, _1600, _3200
	MAX30105_bitMask(MAX30105_handler, MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
 8001044:	210a      	movs	r1, #10
 8001046:	22e3      	movs	r2, #227	@ 0xe3
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 fab6 	bl	80015bc <MAX30105_bitMask>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <MAX30105_setPulseWidth>:

void MAX30105_setPulseWidth(MAX30105_t *MAX30105_handler, uint8_t pulseWidth)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	70fb      	strb	r3, [r7, #3]
	// pulseWidth: one of MAX30105_PULSEWIDTH_69, _188, _215, _411
	MAX30105_bitMask(MAX30105_handler, MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
 8001064:	210a      	movs	r1, #10
 8001066:	22fc      	movs	r2, #252	@ 0xfc
 8001068:	78fb      	ldrb	r3, [r7, #3]
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 faa6 	bl	80015bc <MAX30105_bitMask>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <MAX30105_setPulseAmplitudeRed>:

// NOTE: Amplitude values: 0x00 = 0mA, 0x7F = 25.4mA, 0xFF = 50mA (typical)
// See datasheet, page 21
void MAX30105_setPulseAmplitudeRed(MAX30105_t *MAX30105_handler, uint8_t value)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	70fb      	strb	r3, [r7, #3]
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_LED1_PULSEAMP, value);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7919      	ldrb	r1, [r3, #4]
 8001088:	220c      	movs	r2, #12
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 fa66 	bl	800155e <MAX30105_writeRegister8>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <MAX30105_setPulseAmplitudeIR>:

void MAX30105_setPulseAmplitudeIR(MAX30105_t *MAX30105_handler, uint8_t value)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	460b      	mov	r3, r1
 80010a4:	70fb      	strb	r3, [r7, #3]
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_LED2_PULSEAMP, value);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7919      	ldrb	r1, [r3, #4]
 80010aa:	220d      	movs	r2, #13
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 fa55 	bl	800155e <MAX30105_writeRegister8>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <MAX30105_setPulseAmplitudeGreen>:

void MAX30105_setPulseAmplitudeGreen(MAX30105_t *MAX30105_handler, uint8_t value)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_LED3_PULSEAMP, value);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	7919      	ldrb	r1, [r3, #4]
 80010cc:	220e      	movs	r2, #14
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 fa44 	bl	800155e <MAX30105_writeRegister8>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <MAX30105_setPulseAmplitudeProximity>:

void MAX30105_setPulseAmplitudeProximity(MAX30105_t *MAX30105_handler, uint8_t value)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	460b      	mov	r3, r1
 80010e8:	70fb      	strb	r3, [r7, #3]
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_LED_PROX_AMP, value);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7919      	ldrb	r1, [r3, #4]
 80010ee:	2210      	movs	r2, #16
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 fa33 	bl	800155e <MAX30105_writeRegister8>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <MAX30105_enableSlot>:

void MAX30105_enableSlot(MAX30105_t *MAX30105_handler, uint8_t slotNumber, uint8_t device)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	70fb      	strb	r3, [r7, #3]
 800110c:	4613      	mov	r3, r2
 800110e:	70bb      	strb	r3, [r7, #2]
//	uint8_t originalContents;

	switch (slotNumber) {
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	3b01      	subs	r3, #1
 8001114:	2b03      	cmp	r3, #3
 8001116:	d82b      	bhi.n	8001170 <MAX30105_enableSlot+0x70>
 8001118:	a201      	add	r2, pc, #4	@ (adr r2, 8001120 <MAX30105_enableSlot+0x20>)
 800111a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111e:	bf00      	nop
 8001120:	08001131 	.word	0x08001131
 8001124:	0800113f 	.word	0x0800113f
 8001128:	08001151 	.word	0x08001151
 800112c:	0800115f 	.word	0x0800115f
	case 1:
		MAX30105_bitMask(MAX30105_handler, MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
 8001130:	2111      	movs	r1, #17
 8001132:	22f8      	movs	r2, #248	@ 0xf8
 8001134:	78bb      	ldrb	r3, [r7, #2]
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 fa40 	bl	80015bc <MAX30105_bitMask>
		break;
 800113c:	e019      	b.n	8001172 <MAX30105_enableSlot+0x72>
	case 2:
		MAX30105_bitMask(MAX30105_handler, MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 800113e:	2111      	movs	r1, #17
 8001140:	228f      	movs	r2, #143	@ 0x8f
 8001142:	78bb      	ldrb	r3, [r7, #2]
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	b2db      	uxtb	r3, r3
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 fa37 	bl	80015bc <MAX30105_bitMask>
		break;
 800114e:	e010      	b.n	8001172 <MAX30105_enableSlot+0x72>
	case 3:
		MAX30105_bitMask(MAX30105_handler, MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
 8001150:	2112      	movs	r1, #18
 8001152:	22f8      	movs	r2, #248	@ 0xf8
 8001154:	78bb      	ldrb	r3, [r7, #2]
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 fa30 	bl	80015bc <MAX30105_bitMask>
		break;
 800115c:	e009      	b.n	8001172 <MAX30105_enableSlot+0x72>
	case 4:
		MAX30105_bitMask(MAX30105_handler, MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
 800115e:	2112      	movs	r1, #18
 8001160:	228f      	movs	r2, #143	@ 0x8f
 8001162:	78bb      	ldrb	r3, [r7, #2]
 8001164:	011b      	lsls	r3, r3, #4
 8001166:	b2db      	uxtb	r3, r3
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 fa27 	bl	80015bc <MAX30105_bitMask>
		break;
 800116e:	e000      	b.n	8001172 <MAX30105_enableSlot+0x72>
	default:
		//Shouldn't be here!
		break;
 8001170:	bf00      	nop
	}
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop

0800117c <MAX30105_setFIFOAverage>:
// FIFO Configuration
//

//Set sample average (Table 3, Page 18)
void MAX30105_setFIFOAverage(MAX30105_t *MAX30105_handler, uint8_t samples)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
	MAX30105_bitMask(MAX30105_handler, MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, samples);
 8001188:	2108      	movs	r1, #8
 800118a:	221f      	movs	r2, #31
 800118c:	78fb      	ldrb	r3, [r7, #3]
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 fa14 	bl	80015bc <MAX30105_bitMask>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <MAX30105_enableFIFORollover>:

//Enable roll over if FIFO over flows
void MAX30105_enableFIFORollover(MAX30105_t *MAX30105_handler)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	MAX30105_bitMask(MAX30105_handler, MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
 80011a4:	2108      	movs	r1, #8
 80011a6:	22ef      	movs	r2, #239	@ 0xef
 80011a8:	2310      	movs	r3, #16
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 fa06 	bl	80015bc <MAX30105_bitMask>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <MAX30105_check>:
//Polls the sensor for new data
//Call regularly
//If new data is available, it updates the head and tail in the main struct
//Returns number of new samples obtained
uint16_t MAX30105_check(MAX30105_t *MAX30105_handler)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b090      	sub	sp, #64	@ 0x40
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	//Read register FIDO_DATA in (3-byte * number of active LED) chunks
	//Until FIFO_RD_PTR = FIFO_WR_PTR
	uint8_t readPointer = MAX30105_getReadPointer(MAX30105_handler);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 f977 	bl	80014b4 <MAX30105_getReadPointer>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t writePointer = MAX30105_getWritePointer(MAX30105_handler);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f961 	bl	8001494 <MAX30105_getWritePointer>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

	int numberOfSamples = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	63fb      	str	r3, [r7, #60]	@ 0x3c

	//Do we have new data?
	if (readPointer != writePointer)
 80011dc:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80011e0:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80011e4:	429a      	cmp	r2, r3
 80011e6:	f000 8115 	beq.w	8001414 <MAX30105_check+0x25c>
	{
		//Calculate the number of readings we need to get from sensor
		numberOfSamples = writePointer - readPointer;
 80011ea:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 80011ee:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 80011f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da02      	bge.n	8001202 <MAX30105_check+0x4a>
 80011fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011fe:	3320      	adds	r3, #32
 8001200:	63fb      	str	r3, [r7, #60]	@ 0x3c

		//We now have the number of readings, now calc bytes to read
		//For this example we are just doing Red and IR (3 bytes each)
		int bytesLeftToRead = numberOfSamples * MAX30105_handler->activeLEDs * 3;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	795b      	ldrb	r3, [r3, #5]
 8001206:	461a      	mov	r2, r3
 8001208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800120a:	fb03 f202 	mul.w	r2, r3, r2
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	63bb      	str	r3, [r7, #56]	@ 0x38

		//Get ready to read a burst of data from the FIFO register
		uint8_t reg = MAX30105_FIFODATA;
 8001216:	2307      	movs	r3, #7
 8001218:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
		I2C_WriteBuffer(MAX30105_handler, MAX30105_handler->_i2caddr, &reg, 1);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	7919      	ldrb	r1, [r3, #4]
 8001220:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001224:	2301      	movs	r3, #1
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff fde8 	bl	8000dfc <I2C_WriteBuffer>

		//We may need to read as many as 288 bytes so we read in blocks no larger than I2C_BUFFER_LENGTH
		//I2C_BUFFER_LENGTH changes based on the platform. 64 bytes for SAMD21, 32 bytes for Uno.
		//Wire.requestFrom() is limited to BUFFER_LENGTH which is 32 on the Uno
		while (bytesLeftToRead > 0)
 800122c:	e0ee      	b.n	800140c <MAX30105_check+0x254>
		{
			int toGet = bytesLeftToRead;
 800122e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001230:	637b      	str	r3, [r7, #52]	@ 0x34
			if (toGet > I2C_BUFFER_LENGTH)
 8001232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001234:	2b20      	cmp	r3, #32
 8001236:	dd0e      	ble.n	8001256 <MAX30105_check+0x9e>
			{
				//If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
				//32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
				//32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

				toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (MAX30105_handler->activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	795b      	ldrb	r3, [r3, #5]
 800123c:	461a      	mov	r2, r3
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	2220      	movs	r2, #32
 8001246:	fb92 f1f3 	sdiv	r1, r2, r3
 800124a:	fb01 f303 	mul.w	r3, r1, r3
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	f1c3 0320 	rsb	r3, r3, #32
 8001254:	637b      	str	r3, [r7, #52]	@ 0x34
			}

			bytesLeftToRead -= toGet;
 8001256:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	63bb      	str	r3, [r7, #56]	@ 0x38

			uint8_t pData[I2C_BUFFER_LENGTH] = {0};
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]
 8001272:	615a      	str	r2, [r3, #20]
 8001274:	619a      	str	r2, [r3, #24]
			I2C_ReadBuffer(MAX30105_handler, MAX30105_handler->_i2caddr, pData, (uint8_t)toGet);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7919      	ldrb	r1, [r3, #4]
 800127a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800127c:	b2db      	uxtb	r3, r3
 800127e:	f107 0208 	add.w	r2, r7, #8
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff fddd 	bl	8000e42 <I2C_ReadBuffer>

			while (toGet > 0)
 8001288:	e0bc      	b.n	8001404 <MAX30105_check+0x24c>
			{
				MAX30105_handler->sense.head++; //Advance the head of the storage struct
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001290:	3301      	adds	r3, #1
 8001292:	b2da      	uxtb	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
				MAX30105_handler->sense.head %= STORAGE_SIZE; //Wrap condition
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

				uint8_t temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
				uint32_t tempLong;

				uint8_t pIndex = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
				//Burst read three bytes - RED
				temp[3] = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				temp[2] = pData[pIndex++];
 80012b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012bc:	1c5a      	adds	r2, r3, #1
 80012be:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 80012c2:	3340      	adds	r3, #64	@ 0x40
 80012c4:	443b      	add	r3, r7
 80012c6:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80012ca:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				temp[1] = pData[pIndex++];
 80012ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 80012d8:	3340      	adds	r3, #64	@ 0x40
 80012da:	443b      	add	r3, r7
 80012dc:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80012e0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
				temp[0] = pData[pIndex++];
 80012e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012e8:	1c5a      	adds	r2, r3, #1
 80012ea:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 80012ee:	3340      	adds	r3, #64	@ 0x40
 80012f0:	443b      	add	r3, r7
 80012f2:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80012f6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

				// Convert array to long
				memcpy(&tempLong, temp, sizeof(tempLong));
 80012fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012fc:	62bb      	str	r3, [r7, #40]	@ 0x28

				tempLong &= 0x3FFFFu; // Zero out all but 18 bits
 80012fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001300:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001304:	62bb      	str	r3, [r7, #40]	@ 0x28

				MAX30105_handler->sense.red[MAX30105_handler->sense.head] = tempLong; // Store this reading into the sense array
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800130c:	461a      	mov	r2, r3
 800130e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3202      	adds	r2, #2
 8001314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				if (MAX30105_handler->activeLEDs > 1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	795b      	ldrb	r3, [r3, #5]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d932      	bls.n	8001386 <MAX30105_check+0x1ce>
				{
					// Burst read three more bytes - IR
					temp[3] = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					temp[2] = pData[pIndex++];
 8001326:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 8001330:	3340      	adds	r3, #64	@ 0x40
 8001332:	443b      	add	r3, r7
 8001334:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001338:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
					temp[1] = pData[pIndex++];
 800133c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 8001346:	3340      	adds	r3, #64	@ 0x40
 8001348:	443b      	add	r3, r7
 800134a:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800134e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
					temp[0] = pData[pIndex++];
 8001352:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 800135c:	3340      	adds	r3, #64	@ 0x40
 800135e:	443b      	add	r3, r7
 8001360:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001364:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

					// Convert array to long
					memcpy(&tempLong, temp, sizeof(tempLong));
 8001368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800136a:	62bb      	str	r3, [r7, #40]	@ 0x28

					tempLong &= 0x3FFFF; // Zero out all but 18 bits
 800136c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800136e:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001372:	62bb      	str	r3, [r7, #40]	@ 0x28

					MAX30105_handler->sense.IR[MAX30105_handler->sense.head] = tempLong;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800137a:	461a      	mov	r2, r3
 800137c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3206      	adds	r2, #6
 8001382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				}

				if (MAX30105_handler->activeLEDs > 2)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	795b      	ldrb	r3, [r3, #5]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d932      	bls.n	80013f4 <MAX30105_check+0x23c>
				{
					// Burst read three more bytes - Green
					temp[3] = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					temp[2] = pData[pIndex++];
 8001394:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 800139e:	3340      	adds	r3, #64	@ 0x40
 80013a0:	443b      	add	r3, r7
 80013a2:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80013a6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
					temp[1] = pData[pIndex++];
 80013aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 80013b4:	3340      	adds	r3, #64	@ 0x40
 80013b6:	443b      	add	r3, r7
 80013b8:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80013bc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
					temp[0] = pData[pIndex++];
 80013c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013c4:	1c5a      	adds	r2, r3, #1
 80013c6:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 80013ca:	3340      	adds	r3, #64	@ 0x40
 80013cc:	443b      	add	r3, r7
 80013ce:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80013d2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

					// Convert array to long
					memcpy(&tempLong, temp, sizeof(tempLong));
 80013d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013d8:	62bb      	str	r3, [r7, #40]	@ 0x28

					tempLong &= 0x3FFFF; // Zero out all but 18 bits
 80013da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013dc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80013e0:	62bb      	str	r3, [r7, #40]	@ 0x28

					MAX30105_handler->sense.green[MAX30105_handler->sense.head] = tempLong;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80013e8:	461a      	mov	r2, r3
 80013ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	320a      	adds	r2, #10
 80013f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				}

				toGet -= MAX30105_handler->activeLEDs * 3;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	795b      	ldrb	r3, [r3, #5]
 80013f8:	461a      	mov	r2, r3
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001400:	4413      	add	r3, r2
 8001402:	637b      	str	r3, [r7, #52]	@ 0x34
			while (toGet > 0)
 8001404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001406:	2b00      	cmp	r3, #0
 8001408:	f73f af3f 	bgt.w	800128a <MAX30105_check+0xd2>
		while (bytesLeftToRead > 0)
 800140c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800140e:	2b00      	cmp	r3, #0
 8001410:	f73f af0d 	bgt.w	800122e <MAX30105_check+0x76>
			}
		}// End while (bytesLeftToRead > 0)

	}// End readPtr != writePtr

	return (numberOfSamples); // Let the world know how much new data we found
 8001414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001416:	b29b      	uxth	r3, r3
}
 8001418:	4618      	mov	r0, r3
 800141a:	3740      	adds	r7, #64	@ 0x40
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <MAX30105_available>:

//Tell caller how many samples are available
uint8_t MAX30105_available(MAX30105_t *MAX30105_handler)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	int8_t numberOfSamples = MAX30105_handler->sense.head - MAX30105_handler->sense.tail;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	73fb      	strb	r3, [r7, #15]
	if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;
 800143a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143e:	2b00      	cmp	r3, #0
 8001440:	da03      	bge.n	800144a <MAX30105_available+0x2a>
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	3304      	adds	r3, #4
 8001446:	b2db      	uxtb	r3, r3
 8001448:	73fb      	strb	r3, [r7, #15]

	return (numberOfSamples);
 800144a:	7bfb      	ldrb	r3, [r7, #15]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <MAX30105_nextSample>:

// Advance the tail
void MAX30105_nextSample(MAX30105_t *MAX30105_handler)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
	if (MAX30105_available(MAX30105_handler)) // Only advance the tail if new data is available
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ffde 	bl	8001420 <MAX30105_available>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d010      	beq.n	800148c <MAX30105_nextSample+0x36>
	  {
	    MAX30105_handler->sense.tail++;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001470:	3301      	adds	r3, #1
 8001472:	b2da      	uxtb	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	    MAX30105_handler->sense.tail %= STORAGE_SIZE; // Wrap condition
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	b2da      	uxtb	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	  }
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <MAX30105_getWritePointer>:

//Read the FIFO Write Pointer
uint8_t MAX30105_getWritePointer(MAX30105_t *MAX30105_handler)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	return (MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_FIFOWRITEPTR));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	791b      	ldrb	r3, [r3, #4]
 80014a0:	2204      	movs	r2, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 f832 	bl	800150e <MAX30105_readRegister8>
 80014aa:	4603      	mov	r3, r0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <MAX30105_getReadPointer>:

//Read the FIFO Read Pointer
uint8_t MAX30105_getReadPointer(MAX30105_t *MAX30105_handler)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	return (MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_FIFOREADPTR));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	791b      	ldrb	r3, [r3, #4]
 80014c0:	2206      	movs	r2, #6
 80014c2:	4619      	mov	r1, r3
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 f822 	bl	800150e <MAX30105_readRegister8>
 80014ca:	4603      	mov	r3, r0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <MAX30105_clearFIFO>:

void MAX30105_clearFIFO(MAX30105_t *MAX30105_handler)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	//Resets all points to start in a known state
	//Page 15 recommends clearing FIFO before beginning a read
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_FIFOWRITEPTR, 0);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7919      	ldrb	r1, [r3, #4]
 80014e0:	2204      	movs	r2, #4
 80014e2:	2300      	movs	r3, #0
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 f83a 	bl	800155e <MAX30105_writeRegister8>
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_FIFOOVERFLOW, 0);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7919      	ldrb	r1, [r3, #4]
 80014ee:	2205      	movs	r2, #5
 80014f0:	2300      	movs	r3, #0
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f833 	bl	800155e <MAX30105_writeRegister8>
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_FIFOREADPTR, 0);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7919      	ldrb	r1, [r3, #4]
 80014fc:	2206      	movs	r2, #6
 80014fe:	2300      	movs	r3, #0
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f82c 	bl	800155e <MAX30105_writeRegister8>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <MAX30105_readRegister8>:

//
// Low-level I2C Communication
//
uint8_t MAX30105_readRegister8(MAX30105_t *MAX30105_handler, uint8_t address, uint8_t reg)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	460b      	mov	r3, r1
 8001518:	70fb      	strb	r3, [r7, #3]
 800151a:	4613      	mov	r3, r2
 800151c:	70bb      	strb	r3, [r7, #2]
//	HAL_I2C_Master_Transmit(MAX30105_handler->hi2c, address, &reg, 1, 100);
	I2C_WriteBuffer(MAX30105_handler, address | 0x01, &reg, 1);
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	b2d9      	uxtb	r1, r3
 8001526:	1cba      	adds	r2, r7, #2
 8001528:	2301      	movs	r3, #1
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff fc66 	bl	8000dfc <I2C_WriteBuffer>
	//
	while(HAL_I2C_GetState(MAX30105_handler->hi2c) != HAL_I2C_STATE_READY);
 8001530:	bf00      	nop
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f002 f9d8 	bl	80038ec <HAL_I2C_GetState>
 800153c:	4603      	mov	r3, r0
 800153e:	2b20      	cmp	r3, #32
 8001540:	d1f7      	bne.n	8001532 <MAX30105_readRegister8+0x24>
	uint8_t pData = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	73fb      	strb	r3, [r7, #15]
//	HAL_I2C_Master_Receive(MAX30105_handler->hi2c, address, &pData, 1, 100);
	I2C_ReadBuffer(MAX30105_handler, address, &pData, 1);
 8001546:	f107 020f 	add.w	r2, r7, #15
 800154a:	78f9      	ldrb	r1, [r7, #3]
 800154c:	2301      	movs	r3, #1
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff fc77 	bl	8000e42 <I2C_ReadBuffer>

	return pData;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <MAX30105_writeRegister8>:

void MAX30105_writeRegister8(MAX30105_t *MAX30105_handler, uint8_t address, uint8_t reg, uint8_t value)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b084      	sub	sp, #16
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	4608      	mov	r0, r1
 8001568:	4611      	mov	r1, r2
 800156a:	461a      	mov	r2, r3
 800156c:	4603      	mov	r3, r0
 800156e:	70fb      	strb	r3, [r7, #3]
 8001570:	460b      	mov	r3, r1
 8001572:	70bb      	strb	r3, [r7, #2]
 8001574:	4613      	mov	r3, r2
 8001576:	707b      	strb	r3, [r7, #1]
	uint8_t pData[] = {reg, value};
 8001578:	78bb      	ldrb	r3, [r7, #2]
 800157a:	733b      	strb	r3, [r7, #12]
 800157c:	787b      	ldrb	r3, [r7, #1]
 800157e:	737b      	strb	r3, [r7, #13]
	I2C_WriteBuffer(MAX30105_handler, address, pData, 2);
 8001580:	f107 020c 	add.w	r2, r7, #12
 8001584:	78f9      	ldrb	r1, [r7, #3]
 8001586:	2302      	movs	r3, #2
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff fc37 	bl	8000dfc <I2C_WriteBuffer>
//	I2C_WriteBuffer(MAX30105_handler, address, value, 1);
//	HAL_I2C_Master_Transmit(MAX30105_handler->hi2c, address, &reg, 1, 100);
//	HAL_I2C_Master_Transmit(MAX30105_handler->hi2c, address, &value, 1, 100);
}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <MAX30105_readRevisionID>:

void MAX30105_readRevisionID(MAX30105_t *MAX30105_handler)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
	MAX30105_handler->revisionID = MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_REVISIONID);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	791b      	ldrb	r3, [r3, #4]
 80015a2:	22fe      	movs	r2, #254	@ 0xfe
 80015a4:	4619      	mov	r1, r3
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ffb1 	bl	800150e <MAX30105_readRegister8>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	719a      	strb	r2, [r3, #6]
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <MAX30105_bitMask>:

//Given a register, read it, mask it, and then set the thing
void MAX30105_bitMask(MAX30105_t *MAX30105_handler, uint8_t reg, uint8_t mask, uint8_t thing)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	4608      	mov	r0, r1
 80015c6:	4611      	mov	r1, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	70fb      	strb	r3, [r7, #3]
 80015ce:	460b      	mov	r3, r1
 80015d0:	70bb      	strb	r3, [r7, #2]
 80015d2:	4613      	mov	r3, r2
 80015d4:	707b      	strb	r3, [r7, #1]
	// Grab current register context
	uint8_t originalContents = MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, reg);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	791b      	ldrb	r3, [r3, #4]
 80015da:	78fa      	ldrb	r2, [r7, #3]
 80015dc:	4619      	mov	r1, r3
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ff95 	bl	800150e <MAX30105_readRegister8>
 80015e4:	4603      	mov	r3, r0
 80015e6:	73fb      	strb	r3, [r7, #15]

	// Zero-out the portions of the register we're interested in
	originalContents = originalContents & mask;
 80015e8:	7bfa      	ldrb	r2, [r7, #15]
 80015ea:	78bb      	ldrb	r3, [r7, #2]
 80015ec:	4013      	ands	r3, r2
 80015ee:	73fb      	strb	r3, [r7, #15]

	// Change contents
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, reg, originalContents | thing);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	7919      	ldrb	r1, [r3, #4]
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	787b      	ldrb	r3, [r7, #1]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	78fa      	ldrb	r2, [r7, #3]
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffad 	bl	800155e <MAX30105_writeRegister8>

	uint8_t response = MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, reg);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	791b      	ldrb	r3, [r3, #4]
 8001608:	78fa      	ldrb	r2, [r7, #3]
 800160a:	4619      	mov	r1, r3
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff7e 	bl	800150e <MAX30105_readRegister8>
 8001612:	4603      	mov	r3, r0
 8001614:	73bb      	strb	r3, [r7, #14]
}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <MAX30105_setup>:
// Mode = MultiLED
// ADC Range = 16384 (62.5pA per LSB)
// Sample rate = 50
//Use the default setup if you are just getting started with the MAX30105 sensor
void MAX30105_setup(MAX30105_t *MAX30105_handler, uint8_t powerLevel, uint8_t sampleAverage, uint8_t ledMode, int sampleRate, int pulseWidth, int adcRange)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	4608      	mov	r0, r1
 8001628:	4611      	mov	r1, r2
 800162a:	461a      	mov	r2, r3
 800162c:	4603      	mov	r3, r0
 800162e:	70fb      	strb	r3, [r7, #3]
 8001630:	460b      	mov	r3, r1
 8001632:	70bb      	strb	r3, [r7, #2]
 8001634:	4613      	mov	r3, r2
 8001636:	707b      	strb	r3, [r7, #1]
	MAX30105_softReset(MAX30105_handler); //Reset all configuration, threshold, and data registers to POR values
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fcb2 	bl	8000fa2 <MAX30105_softReset>

	//FIFO Configuration
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	//The chip will average multiple samples of same type together if you wish
	if (sampleAverage == 1) MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
 800163e:	78bb      	ldrb	r3, [r7, #2]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d105      	bne.n	8001650 <MAX30105_setup+0x32>
 8001644:	2300      	movs	r3, #0
 8001646:	4619      	mov	r1, r3
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff fd97 	bl	800117c <MAX30105_setFIFOAverage>
 800164e:	e031      	b.n	80016b4 <MAX30105_setup+0x96>
	else if (sampleAverage == 2) MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_2);
 8001650:	78bb      	ldrb	r3, [r7, #2]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d105      	bne.n	8001662 <MAX30105_setup+0x44>
 8001656:	2320      	movs	r3, #32
 8001658:	4619      	mov	r1, r3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff fd8e 	bl	800117c <MAX30105_setFIFOAverage>
 8001660:	e028      	b.n	80016b4 <MAX30105_setup+0x96>
	else if (sampleAverage == 4) MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_4);
 8001662:	78bb      	ldrb	r3, [r7, #2]
 8001664:	2b04      	cmp	r3, #4
 8001666:	d105      	bne.n	8001674 <MAX30105_setup+0x56>
 8001668:	2340      	movs	r3, #64	@ 0x40
 800166a:	4619      	mov	r1, r3
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fd85 	bl	800117c <MAX30105_setFIFOAverage>
 8001672:	e01f      	b.n	80016b4 <MAX30105_setup+0x96>
	else if (sampleAverage == 8) MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_8);
 8001674:	78bb      	ldrb	r3, [r7, #2]
 8001676:	2b08      	cmp	r3, #8
 8001678:	d105      	bne.n	8001686 <MAX30105_setup+0x68>
 800167a:	2360      	movs	r3, #96	@ 0x60
 800167c:	4619      	mov	r1, r3
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff fd7c 	bl	800117c <MAX30105_setFIFOAverage>
 8001684:	e016      	b.n	80016b4 <MAX30105_setup+0x96>
	else if (sampleAverage == 16) MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_16);
 8001686:	78bb      	ldrb	r3, [r7, #2]
 8001688:	2b10      	cmp	r3, #16
 800168a:	d105      	bne.n	8001698 <MAX30105_setup+0x7a>
 800168c:	2380      	movs	r3, #128	@ 0x80
 800168e:	4619      	mov	r1, r3
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fd73 	bl	800117c <MAX30105_setFIFOAverage>
 8001696:	e00d      	b.n	80016b4 <MAX30105_setup+0x96>
	else if (sampleAverage == 32) MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_32);
 8001698:	78bb      	ldrb	r3, [r7, #2]
 800169a:	2b20      	cmp	r3, #32
 800169c:	d105      	bne.n	80016aa <MAX30105_setup+0x8c>
 800169e:	23a0      	movs	r3, #160	@ 0xa0
 80016a0:	4619      	mov	r1, r3
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fd6a 	bl	800117c <MAX30105_setFIFOAverage>
 80016a8:	e004      	b.n	80016b4 <MAX30105_setup+0x96>
	else MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_4);
 80016aa:	2340      	movs	r3, #64	@ 0x40
 80016ac:	4619      	mov	r1, r3
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fd64 	bl	800117c <MAX30105_setFIFOAverage>

	//setFIFOAlmostFull(2); //Set to 30 samples to trigger an 'Almost Full' interrupt
	MAX30105_enableFIFORollover(MAX30105_handler); //Allow FIFO to wrap/roll over
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff fd71 	bl	800119c <MAX30105_enableFIFORollover>
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	//Mode Configuration
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	if (ledMode == 3) MAX30105_setLEDMode(MAX30105_handler, MAX30105_MODE_MULTILED); //Watch all three LED channels
 80016ba:	787b      	ldrb	r3, [r7, #1]
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d105      	bne.n	80016cc <MAX30105_setup+0xae>
 80016c0:	2307      	movs	r3, #7
 80016c2:	4619      	mov	r1, r3
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff fc97 	bl	8000ff8 <MAX30105_setLEDMode>
 80016ca:	e00d      	b.n	80016e8 <MAX30105_setup+0xca>
	else if (ledMode == 2) MAX30105_setLEDMode(MAX30105_handler, MAX30105_MODE_REDIRONLY); //Red and IR
 80016cc:	787b      	ldrb	r3, [r7, #1]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d105      	bne.n	80016de <MAX30105_setup+0xc0>
 80016d2:	2303      	movs	r3, #3
 80016d4:	4619      	mov	r1, r3
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fc8e 	bl	8000ff8 <MAX30105_setLEDMode>
 80016dc:	e004      	b.n	80016e8 <MAX30105_setup+0xca>
	else MAX30105_setLEDMode(MAX30105_handler, MAX30105_MODE_REDONLY); //Red only
 80016de:	2302      	movs	r3, #2
 80016e0:	4619      	mov	r1, r3
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fc88 	bl	8000ff8 <MAX30105_setLEDMode>

	MAX30105_handler->activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	787a      	ldrb	r2, [r7, #1]
 80016ec:	715a      	strb	r2, [r3, #5]
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	//Particle Sensing Configuration
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	if(adcRange < 4096) MAX30105_setADCRange(MAX30105_handler, MAX30105_ADCRANGE_2048); //7.81pA per LSB
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016f4:	da05      	bge.n	8001702 <MAX30105_setup+0xe4>
 80016f6:	2300      	movs	r3, #0
 80016f8:	4619      	mov	r1, r3
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fc8c 	bl	8001018 <MAX30105_setADCRange>
 8001700:	e022      	b.n	8001748 <MAX30105_setup+0x12a>
	else if(adcRange < 8192) MAX30105_setADCRange(MAX30105_handler, MAX30105_ADCRANGE_4096); //15.63pA per LSB
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001708:	da05      	bge.n	8001716 <MAX30105_setup+0xf8>
 800170a:	2320      	movs	r3, #32
 800170c:	4619      	mov	r1, r3
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fc82 	bl	8001018 <MAX30105_setADCRange>
 8001714:	e018      	b.n	8001748 <MAX30105_setup+0x12a>
	else if(adcRange < 16384) MAX30105_setADCRange(MAX30105_handler, MAX30105_ADCRANGE_8192); //31.25pA per LSB
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800171c:	da05      	bge.n	800172a <MAX30105_setup+0x10c>
 800171e:	2340      	movs	r3, #64	@ 0x40
 8001720:	4619      	mov	r1, r3
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fc78 	bl	8001018 <MAX30105_setADCRange>
 8001728:	e00e      	b.n	8001748 <MAX30105_setup+0x12a>
	else if(adcRange == 16384) MAX30105_setADCRange(MAX30105_handler, MAX30105_ADCRANGE_16384); //62.5pA per LSB
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001730:	d105      	bne.n	800173e <MAX30105_setup+0x120>
 8001732:	2360      	movs	r3, #96	@ 0x60
 8001734:	4619      	mov	r1, r3
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fc6e 	bl	8001018 <MAX30105_setADCRange>
 800173c:	e004      	b.n	8001748 <MAX30105_setup+0x12a>
	else MAX30105_setADCRange(MAX30105_handler, MAX30105_ADCRANGE_2048);
 800173e:	2300      	movs	r3, #0
 8001740:	4619      	mov	r1, r3
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fc68 	bl	8001018 <MAX30105_setADCRange>

	if (sampleRate < 100) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_50); //Take 50 samples per second
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	2b63      	cmp	r3, #99	@ 0x63
 800174c:	dc05      	bgt.n	800175a <MAX30105_setup+0x13c>
 800174e:	2300      	movs	r3, #0
 8001750:	4619      	mov	r1, r3
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fc70 	bl	8001038 <MAX30105_setSampleRate>
 8001758:	e049      	b.n	80017ee <MAX30105_setup+0x1d0>
	else if (sampleRate < 200) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_100);
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	2bc7      	cmp	r3, #199	@ 0xc7
 800175e:	dc05      	bgt.n	800176c <MAX30105_setup+0x14e>
 8001760:	2304      	movs	r3, #4
 8001762:	4619      	mov	r1, r3
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fc67 	bl	8001038 <MAX30105_setSampleRate>
 800176a:	e040      	b.n	80017ee <MAX30105_setup+0x1d0>
	else if (sampleRate < 400) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_200);
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001772:	da05      	bge.n	8001780 <MAX30105_setup+0x162>
 8001774:	2308      	movs	r3, #8
 8001776:	4619      	mov	r1, r3
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fc5d 	bl	8001038 <MAX30105_setSampleRate>
 800177e:	e036      	b.n	80017ee <MAX30105_setup+0x1d0>
	else if (sampleRate < 800) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_400);
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001786:	da05      	bge.n	8001794 <MAX30105_setup+0x176>
 8001788:	230c      	movs	r3, #12
 800178a:	4619      	mov	r1, r3
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff fc53 	bl	8001038 <MAX30105_setSampleRate>
 8001792:	e02c      	b.n	80017ee <MAX30105_setup+0x1d0>
	else if (sampleRate < 1000) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_800);
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800179a:	da05      	bge.n	80017a8 <MAX30105_setup+0x18a>
 800179c:	2310      	movs	r3, #16
 800179e:	4619      	mov	r1, r3
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fc49 	bl	8001038 <MAX30105_setSampleRate>
 80017a6:	e022      	b.n	80017ee <MAX30105_setup+0x1d0>
	else if (sampleRate < 1600) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_1000);
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80017ae:	da05      	bge.n	80017bc <MAX30105_setup+0x19e>
 80017b0:	2314      	movs	r3, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff fc3f 	bl	8001038 <MAX30105_setSampleRate>
 80017ba:	e018      	b.n	80017ee <MAX30105_setup+0x1d0>
	else if (sampleRate < 3200) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_1600);
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 80017c2:	da05      	bge.n	80017d0 <MAX30105_setup+0x1b2>
 80017c4:	2318      	movs	r3, #24
 80017c6:	4619      	mov	r1, r3
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff fc35 	bl	8001038 <MAX30105_setSampleRate>
 80017ce:	e00e      	b.n	80017ee <MAX30105_setup+0x1d0>
	else if (sampleRate == 3200) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_3200);
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 80017d6:	d105      	bne.n	80017e4 <MAX30105_setup+0x1c6>
 80017d8:	231c      	movs	r3, #28
 80017da:	4619      	mov	r1, r3
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff fc2b 	bl	8001038 <MAX30105_setSampleRate>
 80017e2:	e004      	b.n	80017ee <MAX30105_setup+0x1d0>
	else MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_50);
 80017e4:	2300      	movs	r3, #0
 80017e6:	4619      	mov	r1, r3
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff fc25 	bl	8001038 <MAX30105_setSampleRate>

	//The longer the pulse width the longer range of detection you'll have
	//At 69us and 0.4mA it's about 2 inches
	//At 411us and 0.4mA it's about 6 inches
	if (pulseWidth < 118) MAX30105_setPulseWidth(MAX30105_handler, MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	2b75      	cmp	r3, #117	@ 0x75
 80017f2:	dc05      	bgt.n	8001800 <MAX30105_setup+0x1e2>
 80017f4:	2300      	movs	r3, #0
 80017f6:	4619      	mov	r1, r3
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff fc2d 	bl	8001058 <MAX30105_setPulseWidth>
 80017fe:	e022      	b.n	8001846 <MAX30105_setup+0x228>
	else if (pulseWidth < 215) MAX30105_setPulseWidth(MAX30105_handler, MAX30105_PULSEWIDTH_118); //16 bit resolution
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	2bd6      	cmp	r3, #214	@ 0xd6
 8001804:	dc05      	bgt.n	8001812 <MAX30105_setup+0x1f4>
 8001806:	2301      	movs	r3, #1
 8001808:	4619      	mov	r1, r3
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff fc24 	bl	8001058 <MAX30105_setPulseWidth>
 8001810:	e019      	b.n	8001846 <MAX30105_setup+0x228>
	else if (pulseWidth < 411) MAX30105_setPulseWidth(MAX30105_handler, MAX30105_PULSEWIDTH_215); //17 bit resolution
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f5b3 7fcd 	cmp.w	r3, #410	@ 0x19a
 8001818:	dc05      	bgt.n	8001826 <MAX30105_setup+0x208>
 800181a:	2302      	movs	r3, #2
 800181c:	4619      	mov	r1, r3
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fc1a 	bl	8001058 <MAX30105_setPulseWidth>
 8001824:	e00f      	b.n	8001846 <MAX30105_setup+0x228>
	else if (pulseWidth == 411) MAX30105_setPulseWidth(MAX30105_handler, MAX30105_PULSEWIDTH_411); //18 bit resolution
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f240 129b 	movw	r2, #411	@ 0x19b
 800182c:	4293      	cmp	r3, r2
 800182e:	d105      	bne.n	800183c <MAX30105_setup+0x21e>
 8001830:	2303      	movs	r3, #3
 8001832:	4619      	mov	r1, r3
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fc0f 	bl	8001058 <MAX30105_setPulseWidth>
 800183a:	e004      	b.n	8001846 <MAX30105_setup+0x228>
	else MAX30105_setPulseWidth(MAX30105_handler, MAX30105_PULSEWIDTH_69);
 800183c:	2300      	movs	r3, #0
 800183e:	4619      	mov	r1, r3
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff fc09 	bl	8001058 <MAX30105_setPulseWidth>
	//powerLevel = 0x02, 0.4mA - Presence detection of ~4 inch
	//powerLevel = 0x1F, 6.4mA - Presence detection of ~8 inch
	//powerLevel = 0x7F, 25.4mA - Presence detection of ~8 inch
	//powerLevel = 0xFF, 50.0mA - Presence detection of ~12 inch

	MAX30105_setPulseAmplitudeRed(MAX30105_handler, powerLevel);
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	4619      	mov	r1, r3
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff fc14 	bl	8001078 <MAX30105_setPulseAmplitudeRed>
	MAX30105_setPulseAmplitudeIR(MAX30105_handler, powerLevel);
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	4619      	mov	r1, r3
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff fc20 	bl	800109a <MAX30105_setPulseAmplitudeIR>
	MAX30105_setPulseAmplitudeGreen(MAX30105_handler, powerLevel);
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	4619      	mov	r1, r3
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff fc2c 	bl	80010bc <MAX30105_setPulseAmplitudeGreen>
	MAX30105_setPulseAmplitudeProximity(MAX30105_handler, powerLevel);
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	4619      	mov	r1, r3
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff fc38 	bl	80010de <MAX30105_setPulseAmplitudeProximity>

	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	//Multi-LED Mode Configuration, Enable the reading of the three LEDs
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	MAX30105_enableSlot(MAX30105_handler, 1, SLOT_RED_LED);
 800186e:	2301      	movs	r3, #1
 8001870:	461a      	mov	r2, r3
 8001872:	2101      	movs	r1, #1
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff fc43 	bl	8001100 <MAX30105_enableSlot>
	if (ledMode > 1) MAX30105_enableSlot(MAX30105_handler, 2, SLOT_IR_LED);
 800187a:	787b      	ldrb	r3, [r7, #1]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d905      	bls.n	800188c <MAX30105_setup+0x26e>
 8001880:	2302      	movs	r3, #2
 8001882:	461a      	mov	r2, r3
 8001884:	2102      	movs	r1, #2
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff fc3a 	bl	8001100 <MAX30105_enableSlot>
	if (ledMode > 2) MAX30105_enableSlot(MAX30105_handler, 3, SLOT_GREEN_LED);
 800188c:	787b      	ldrb	r3, [r7, #1]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d905      	bls.n	800189e <MAX30105_setup+0x280>
 8001892:	2303      	movs	r3, #3
 8001894:	461a      	mov	r2, r3
 8001896:	2103      	movs	r1, #3
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff fc31 	bl	8001100 <MAX30105_enableSlot>
	//enableSlot(1, SLOT_RED_PILOT);
	//enableSlot(2, SLOT_IR_PILOT);
	//enableSlot(3, SLOT_GREEN_PILOT);
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	MAX30105_clearFIFO(MAX30105_handler);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fe18 	bl	80014d4 <MAX30105_clearFIFO>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b0b0      	sub	sp, #192	@ 0xc0
 80018b0:	af04      	add	r7, sp, #16
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
  int32_t n_peak_interval_sum;
  
  int32_t n_y_ac, n_x_ac;
  int32_t n_spo2_calc; 
  int32_t n_y_dc_max, n_x_dc_max; 
  int32_t n_y_dc_max_idx = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int32_t n_x_dc_max_idx = 0; 
 80018c0:	2300      	movs	r3, #0
 80018c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  int32_t an_ratio[5], n_ratio_average; 
  int32_t n_nume, n_denom ;

  // calculates DC mean and subtract DC from ir
  un_ir_mean =0; 
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80018d2:	e010      	b.n	80018f6 <maxim_heart_rate_and_oxygen_saturation+0x4a>
 80018d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	4413      	add	r3, r2
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018e6:	4413      	add	r3, r2
 80018e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80018ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018f0:	3301      	adds	r3, #1
 80018f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80018f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dbe9      	blt.n	80018d4 <maxim_heart_rate_and_oxygen_saturation+0x28>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    
  // remove DC and invert signal so that we can use peak detector as valley detector
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001914:	e014      	b.n	8001940 <maxim_heart_rate_and_oxygen_saturation+0x94>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
 8001916:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	4619      	mov	r1, r3
 800192c:	4ab4      	ldr	r2, [pc, #720]	@ (8001c00 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 800192e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001932:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
 8001936:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800193a:	3301      	adds	r3, #1
 800193c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001940:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	429a      	cmp	r2, r3
 8001948:	dbe5      	blt.n	8001916 <maxim_heart_rate_and_oxygen_saturation+0x6a>
    
  // 4 pt Moving Average
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 800194a:	2300      	movs	r3, #0
 800194c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001950:	e028      	b.n	80019a4 <maxim_heart_rate_and_oxygen_saturation+0xf8>
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
 8001952:	4aab      	ldr	r2, [pc, #684]	@ (8001c00 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 8001954:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001958:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800195c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001960:	3301      	adds	r3, #1
 8001962:	49a7      	ldr	r1, [pc, #668]	@ (8001c00 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 8001964:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001968:	441a      	add	r2, r3
 800196a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800196e:	3302      	adds	r3, #2
 8001970:	49a3      	ldr	r1, [pc, #652]	@ (8001c00 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 8001972:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001976:	441a      	add	r2, r3
 8001978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800197c:	3303      	adds	r3, #3
 800197e:	49a0      	ldr	r1, [pc, #640]	@ (8001c00 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 8001980:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001984:	4413      	add	r3, r2
 8001986:	2b00      	cmp	r3, #0
 8001988:	da00      	bge.n	800198c <maxim_heart_rate_and_oxygen_saturation+0xe0>
 800198a:	3303      	adds	r3, #3
 800198c:	109b      	asrs	r3, r3, #2
 800198e:	4619      	mov	r1, r3
 8001990:	4a9b      	ldr	r2, [pc, #620]	@ (8001c00 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 8001992:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001996:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 800199a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800199e:	3301      	adds	r3, #1
 80019a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80019a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019a8:	2b5f      	cmp	r3, #95	@ 0x5f
 80019aa:	ddd2      	ble.n	8001952 <maxim_heart_rate_and_oxygen_saturation+0xa6>
  }
  // calculate threshold  
  n_th1=0; 
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80019b8:	e00e      	b.n	80019d8 <maxim_heart_rate_and_oxygen_saturation+0x12c>
    n_th1 +=  an_x[k];
 80019ba:	4a91      	ldr	r2, [pc, #580]	@ (8001c00 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 80019bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80019c8:	4413      	add	r3, r2
 80019ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80019ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019d2:	3301      	adds	r3, #1
 80019d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80019d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019dc:	2b63      	cmp	r3, #99	@ 0x63
 80019de:	ddec      	ble.n	80019ba <maxim_heart_rate_and_oxygen_saturation+0x10e>
  }
  n_th1=  n_th1/ ( BUFFER_SIZE);
 80019e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019e4:	4a87      	ldr	r2, [pc, #540]	@ (8001c04 <maxim_heart_rate_and_oxygen_saturation+0x358>)
 80019e6:	fb82 1203 	smull	r1, r2, r2, r3
 80019ea:	1152      	asrs	r2, r2, #5
 80019ec:	17db      	asrs	r3, r3, #31
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if( n_th1<30) n_th1=30; // min allowed
 80019f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019f8:	2b1d      	cmp	r3, #29
 80019fa:	dc02      	bgt.n	8001a02 <maxim_heart_rate_and_oxygen_saturation+0x156>
 80019fc:	231e      	movs	r3, #30
 80019fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if( n_th1>60) n_th1=60; // max allowed
 8001a02:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a06:	2b3c      	cmp	r3, #60	@ 0x3c
 8001a08:	dd02      	ble.n	8001a10 <maxim_heart_rate_and_oxygen_saturation+0x164>
 8001a0a:	233c      	movs	r3, #60	@ 0x3c
 8001a0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a16:	e00c      	b.n	8001a32 <maxim_heart_rate_and_oxygen_saturation+0x186>
 8001a18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	33b0      	adds	r3, #176	@ 0xb0
 8001a20:	443b      	add	r3, r7
 8001a22:	2200      	movs	r2, #0
 8001a24:	f843 2c88 	str.w	r2, [r3, #-136]
 8001a28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a36:	2b0e      	cmp	r3, #14
 8001a38:	ddee      	ble.n	8001a18 <maxim_heart_rate_and_oxygen_saturation+0x16c>
  // since we flipped signal, we use peak detector as valley detector
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
 8001a3a:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8001a3e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001a42:	230f      	movs	r3, #15
 8001a44:	9302      	str	r3, [sp, #8]
 8001a46:	2304      	movs	r3, #4
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2364      	movs	r3, #100	@ 0x64
 8001a52:	4a6b      	ldr	r2, [pc, #428]	@ (8001c00 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 8001a54:	f000 fa36 	bl	8001ec4 <maxim_find_peaks>
  n_peak_interval_sum =0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (n_npks>=2){
 8001a5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	dd38      	ble.n	8001ad6 <maxim_heart_rate_and_oxygen_saturation+0x22a>
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a6a:	e019      	b.n	8001aa0 <maxim_heart_rate_and_oxygen_saturation+0x1f4>
 8001a6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	33b0      	adds	r3, #176	@ 0xb0
 8001a74:	443b      	add	r3, r7
 8001a76:	f853 2c88 	ldr.w	r2, [r3, #-136]
 8001a7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	33b0      	adds	r3, #176	@ 0xb0
 8001a84:	443b      	add	r3, r7
 8001a86:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001a90:	4413      	add	r3, r2
 8001a92:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001a96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001aa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001aa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	dbe0      	blt.n	8001a6c <maxim_heart_rate_and_oxygen_saturation+0x1c0>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
 8001aaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001aac:	3b01      	subs	r3, #1
 8001aae:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001ab2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ab6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
 8001aba:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001abe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ac2:	fb92 f2f3 	sdiv	r2, r2, r3
 8001ac6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001aca:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 1;
 8001acc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
 8001ad4:	e007      	b.n	8001ae6 <maxim_heart_rate_and_oxygen_saturation+0x23a>
  }
  else  { 
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
 8001ad6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ada:	4a4b      	ldr	r2, [pc, #300]	@ (8001c08 <maxim_heart_rate_and_oxygen_saturation+0x35c>)
 8001adc:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 0;
 8001ade:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
  }

  //  load raw value again for SPO2 calculation : RED(=y) and IR(=X)
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001aec:	e01c      	b.n	8001b28 <maxim_heart_rate_and_oxygen_saturation+0x27c>
      an_x[k] =  pun_ir_buffer[k] ; 
 8001aee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	4619      	mov	r1, r3
 8001afc:	4a40      	ldr	r2, [pc, #256]	@ (8001c00 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 8001afe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      an_y[k] =  pun_red_buffer[k] ; 
 8001b06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	4413      	add	r3, r2
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	4619      	mov	r1, r3
 8001b14:	4a3d      	ldr	r2, [pc, #244]	@ (8001c0c <maxim_heart_rate_and_oxygen_saturation+0x360>)
 8001b16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 8001b1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b22:	3301      	adds	r3, #1
 8001b24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b28:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	dbdd      	blt.n	8001aee <maxim_heart_rate_and_oxygen_saturation+0x242>
  }

  // find precise min near an_ir_valley_locs
  n_exact_ir_valley_locs_count =n_npks; 
 8001b32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  
  //using exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration an_ratio
  //finding AC/DC maximum of raw

  n_ratio_average =0; 
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  n_i_ratio_count = 0; 
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  for(k=0; k< 5; k++) an_ratio[k]=0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b4a:	e00c      	b.n	8001b66 <maxim_heart_rate_and_oxygen_saturation+0x2ba>
 8001b4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	33b0      	adds	r3, #176	@ 0xb0
 8001b54:	443b      	add	r3, r7
 8001b56:	2200      	movs	r2, #0
 8001b58:	f843 2c9c 	str.w	r2, [r3, #-156]
 8001b5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b60:	3301      	adds	r3, #1
 8001b62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	ddee      	ble.n	8001b4c <maxim_heart_rate_and_oxygen_saturation+0x2a0>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b74:	e015      	b.n	8001ba2 <maxim_heart_rate_and_oxygen_saturation+0x2f6>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
 8001b76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	33b0      	adds	r3, #176	@ 0xb0
 8001b7e:	443b      	add	r3, r7
 8001b80:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001b84:	2b64      	cmp	r3, #100	@ 0x64
 8001b86:	dd07      	ble.n	8001b98 <maxim_heart_rate_and_oxygen_saturation+0x2ec>
      *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4a1f      	ldr	r2, [pc, #124]	@ (8001c08 <maxim_heart_rate_and_oxygen_saturation+0x35c>)
 8001b8c:	601a      	str	r2, [r3, #0]
      *pch_spo2_valid  = 0; 
 8001b8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
 8001b96:	e189      	b.n	8001eac <maxim_heart_rate_and_oxygen_saturation+0x600>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8001b98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001ba2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001ba6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001baa:	429a      	cmp	r2, r3
 8001bac:	dbe3      	blt.n	8001b76 <maxim_heart_rate_and_oxygen_saturation+0x2ca>
      return;
    }
  }
  // find max between two valley locations 
  // and use an_ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2 
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001bb4:	e129      	b.n	8001e0a <maxim_heart_rate_and_oxygen_saturation+0x55e>
    n_y_dc_max= -16777216 ; 
 8001bb6:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8001bba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    n_x_dc_max= -16777216; 
 8001bbe:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8001bc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
 8001bc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001bca:	3301      	adds	r3, #1
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	33b0      	adds	r3, #176	@ 0xb0
 8001bd0:	443b      	add	r3, r7
 8001bd2:	f853 2c88 	ldr.w	r2, [r3, #-136]
 8001bd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	33b0      	adds	r3, #176	@ 0xb0
 8001bde:	443b      	add	r3, r7
 8001be0:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	f340 810a 	ble.w	8001e00 <maxim_heart_rate_and_oxygen_saturation+0x554>
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 8001bec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	33b0      	adds	r3, #176	@ 0xb0
 8001bf4:	443b      	add	r3, r7
 8001bf6:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001bfe:	e034      	b.n	8001c6a <maxim_heart_rate_and_oxygen_saturation+0x3be>
 8001c00:	20000654 	.word	0x20000654
 8001c04:	51eb851f 	.word	0x51eb851f
 8001c08:	fffffc19 	.word	0xfffffc19
 8001c0c:	200007e4 	.word	0x200007e4
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 8001c10:	4aa8      	ldr	r2, [pc, #672]	@ (8001eb4 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8001c12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	da0a      	bge.n	8001c38 <maxim_heart_rate_and_oxygen_saturation+0x38c>
 8001c22:	4aa4      	ldr	r2, [pc, #656]	@ (8001eb4 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8001c24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001c30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 8001c38:	4a9f      	ldr	r2, [pc, #636]	@ (8001eb8 <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8001c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c46:	429a      	cmp	r2, r3
 8001c48:	da0a      	bge.n	8001c60 <maxim_heart_rate_and_oxygen_saturation+0x3b4>
 8001c4a:	4a9b      	ldr	r2, [pc, #620]	@ (8001eb8 <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8001c4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 8001c60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c64:	3301      	adds	r3, #1
 8001c66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001c6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c6e:	3301      	adds	r3, #1
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	33b0      	adds	r3, #176	@ 0xb0
 8001c74:	443b      	add	r3, r7
 8001c76:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001c7a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	dbc6      	blt.n	8001c10 <maxim_heart_rate_and_oxygen_saturation+0x364>
      }
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
 8001c82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c86:	3301      	adds	r3, #1
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	33b0      	adds	r3, #176	@ 0xb0
 8001c8c:	443b      	add	r3, r7
 8001c8e:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001c92:	4a89      	ldr	r2, [pc, #548]	@ (8001eb8 <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8001c94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	33b0      	adds	r3, #176	@ 0xb0
 8001ca0:	443b      	add	r3, r7
 8001ca2:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001ca6:	4984      	ldr	r1, [pc, #528]	@ (8001eb8 <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8001ca8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cac:	1ad2      	subs	r2, r2, r3
 8001cae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	33b0      	adds	r3, #176	@ 0xb0
 8001cb6:	443b      	add	r3, r7
 8001cb8:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001cbc:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001cc0:	1acb      	subs	r3, r1, r3
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	677b      	str	r3, [r7, #116]	@ 0x74
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
 8001cc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	33b0      	adds	r3, #176	@ 0xb0
 8001cd0:	443b      	add	r3, r7
 8001cd2:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001cd6:	4a78      	ldr	r2, [pc, #480]	@ (8001eb8 <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8001cd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	33b0      	adds	r3, #176	@ 0xb0
 8001ce6:	443b      	add	r3, r7
 8001ce8:	f853 1c88 	ldr.w	r1, [r3, #-136]
 8001cec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	33b0      	adds	r3, #176	@ 0xb0
 8001cf4:	443b      	add	r3, r7
 8001cf6:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001cfa:	1acb      	subs	r3, r1, r3
 8001cfc:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001cfe:	fb91 f3f3 	sdiv	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	677b      	str	r3, [r7, #116]	@ 0x74
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
 8001d06:	4a6c      	ldr	r2, [pc, #432]	@ (8001eb8 <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8001d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	677b      	str	r3, [r7, #116]	@ 0x74
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
 8001d16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	33b0      	adds	r3, #176	@ 0xb0
 8001d20:	443b      	add	r3, r7
 8001d22:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001d26:	4a63      	ldr	r2, [pc, #396]	@ (8001eb4 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8001d28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	33b0      	adds	r3, #176	@ 0xb0
 8001d34:	443b      	add	r3, r7
 8001d36:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001d3a:	495e      	ldr	r1, [pc, #376]	@ (8001eb4 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8001d3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d40:	1ad2      	subs	r2, r2, r3
 8001d42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	33b0      	adds	r3, #176	@ 0xb0
 8001d4a:	443b      	add	r3, r7
 8001d4c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001d50:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8001d54:	1acb      	subs	r3, r1, r3
 8001d56:	fb02 f303 	mul.w	r3, r2, r3
 8001d5a:	673b      	str	r3, [r7, #112]	@ 0x70
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
 8001d5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	33b0      	adds	r3, #176	@ 0xb0
 8001d64:	443b      	add	r3, r7
 8001d66:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001d6a:	4a52      	ldr	r2, [pc, #328]	@ (8001eb4 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8001d6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d74:	3301      	adds	r3, #1
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	33b0      	adds	r3, #176	@ 0xb0
 8001d7a:	443b      	add	r3, r7
 8001d7c:	f853 1c88 	ldr.w	r1, [r3, #-136]
 8001d80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	33b0      	adds	r3, #176	@ 0xb0
 8001d88:	443b      	add	r3, r7
 8001d8a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001d8e:	1acb      	subs	r3, r1, r3
 8001d90:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001d92:	fb91 f3f3 	sdiv	r3, r1, r3
 8001d96:	4413      	add	r3, r2
 8001d98:	673b      	str	r3, [r7, #112]	@ 0x70
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
 8001d9a:	4a46      	ldr	r2, [pc, #280]	@ (8001eb4 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8001d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001da0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001da4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	673b      	str	r3, [r7, #112]	@ 0x70
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 8001daa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dac:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001db0:	fb02 f303 	mul.w	r3, r2, r3
 8001db4:	11db      	asrs	r3, r3, #7
 8001db6:	66fb      	str	r3, [r7, #108]	@ 0x6c
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
 8001db8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001dba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	11db      	asrs	r3, r3, #7
 8001dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 8001dc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	dd19      	ble.n	8001e00 <maxim_heart_rate_and_oxygen_saturation+0x554>
 8001dcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	dc15      	bgt.n	8001e00 <maxim_heart_rate_and_oxygen_saturation+0x554>
 8001dd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d012      	beq.n	8001e00 <maxim_heart_rate_and_oxygen_saturation+0x554>
      {   
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 8001dda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ddc:	2264      	movs	r2, #100	@ 0x64
 8001dde:	fb03 f202 	mul.w	r2, r3, r2
 8001de2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001de4:	fb92 f2f3 	sdiv	r2, r2, r3
 8001de8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	33b0      	adds	r3, #176	@ 0xb0
 8001df0:	443b      	add	r3, r7
 8001df2:	f843 2c9c 	str.w	r2, [r3, #-156]
        n_i_ratio_count++;
 8001df6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8001e00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e04:	3301      	adds	r3, #1
 8001e06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001e0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001e14:	429a      	cmp	r2, r3
 8001e16:	f6ff aece 	blt.w	8001bb6 <maxim_heart_rate_and_oxygen_saturation+0x30a>
      }
    }
  }
  // choose median value since PPG signal may varies from beat to beat
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f942 	bl	80020ac <maxim_sort_ascend>
  n_middle_idx= n_i_ratio_count/2;
 8001e28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e2c:	0fda      	lsrs	r2, r3, #31
 8001e2e:	4413      	add	r3, r2
 8001e30:	105b      	asrs	r3, r3, #1
 8001e32:	67fb      	str	r3, [r7, #124]	@ 0x7c

  if (n_middle_idx >1)
 8001e34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	dd13      	ble.n	8001e62 <maxim_heart_rate_and_oxygen_saturation+0x5b6>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 8001e3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	33b0      	adds	r3, #176	@ 0xb0
 8001e42:	443b      	add	r3, r7
 8001e44:	f853 2c9c 	ldr.w	r2, [r3, #-156]
 8001e48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	33b0      	adds	r3, #176	@ 0xb0
 8001e4e:	443b      	add	r3, r7
 8001e50:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001e54:	4413      	add	r3, r2
 8001e56:	0fda      	lsrs	r2, r3, #31
 8001e58:	4413      	add	r3, r2
 8001e5a:	105b      	asrs	r3, r3, #1
 8001e5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001e60:	e007      	b.n	8001e72 <maxim_heart_rate_and_oxygen_saturation+0x5c6>
  else
    n_ratio_average = an_ratio[n_middle_idx ];
 8001e62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	33b0      	adds	r3, #176	@ 0xb0
 8001e68:	443b      	add	r3, r7
 8001e6a:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001e6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  if( n_ratio_average>2 && n_ratio_average <184){
 8001e72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	dd11      	ble.n	8001e9e <maxim_heart_rate_and_oxygen_saturation+0x5f2>
 8001e7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e7e:	2bb7      	cmp	r3, #183	@ 0xb7
 8001e80:	dc0d      	bgt.n	8001e9e <maxim_heart_rate_and_oxygen_saturation+0x5f2>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 8001e82:	4a0e      	ldr	r2, [pc, #56]	@ (8001ebc <maxim_heart_rate_and_oxygen_saturation+0x610>)
 8001e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e88:	4413      	add	r3, r2
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	67bb      	str	r3, [r7, #120]	@ 0x78
    *pn_spo2 = n_spo2_calc ;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001e92:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 8001e94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	e006      	b.n	8001eac <maxim_heart_rate_and_oxygen_saturation+0x600>
  }
  else{
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	4a07      	ldr	r2, [pc, #28]	@ (8001ec0 <maxim_heart_rate_and_oxygen_saturation+0x614>)
 8001ea2:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0; 
 8001ea4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
  }
}
 8001eac:	37b0      	adds	r7, #176	@ 0xb0
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000654 	.word	0x20000654
 8001eb8:	200007e4 	.word	0x200007e4
 8001ebc:	08005f38 	.word	0x08005f38
 8001ec0:	fffffc19 	.word	0xfffffc19

08001ec4 <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	603b      	str	r3, [r7, #0]
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	68b9      	ldr	r1, [r7, #8]
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 f812 	bl	8001f06 <maxim_peaks_above_min_height>
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 f87f 	bl	8001fec <maxim_remove_close_peaks>
  *n_npks = min( *n_npks, n_max_num );
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	bfa8      	it	ge
 8001ef8:	461a      	movge	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	601a      	str	r2, [r3, #0]
}
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 8001f06:	b480      	push	{r7}
 8001f08:	b087      	sub	sp, #28
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	603b      	str	r3, [r7, #0]
  int32_t i = 1, n_width;
 8001f14:	2301      	movs	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
  *n_npks = 0;
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
  
  while (i < n_size-1){
 8001f1e:	e05a      	b.n	8001fd6 <maxim_peaks_above_min_height+0xd0>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6a3a      	ldr	r2, [r7, #32]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	da4f      	bge.n	8001fd0 <maxim_peaks_above_min_height+0xca>
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	4413      	add	r3, r2
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001f40:	3b01      	subs	r3, #1
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	440b      	add	r3, r1
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	dd40      	ble.n	8001fd0 <maxim_peaks_above_min_height+0xca>
      n_width = 1;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	613b      	str	r3, [r7, #16]
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 8001f52:	e002      	b.n	8001f5a <maxim_peaks_above_min_height+0x54>
        n_width++;
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	3301      	adds	r3, #1
 8001f58:	613b      	str	r3, [r7, #16]
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4413      	add	r3, r2
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	dd0d      	ble.n	8001f82 <maxim_peaks_above_min_height+0x7c>
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	6979      	ldr	r1, [r7, #20]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	440b      	add	r3, r1
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	440b      	add	r3, r1
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d0e8      	beq.n	8001f54 <maxim_peaks_above_min_height+0x4e>
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	6979      	ldr	r1, [r7, #20]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	440b      	add	r3, r1
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	440b      	add	r3, r1
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	dd13      	ble.n	8001fc6 <maxim_peaks_above_min_height+0xc0>
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b0e      	cmp	r3, #14
 8001fa4:	dc0f      	bgt.n	8001fc6 <maxim_peaks_above_min_height+0xc0>
        pn_locs[(*n_npks)++] = i;    
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	1c59      	adds	r1, r3, #1
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	6011      	str	r1, [r2, #0]
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	601a      	str	r2, [r3, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8001fc4:	e007      	b.n	8001fd6 <maxim_peaks_above_min_height+0xd0>
      }
      else
        i += n_width;
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4413      	add	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8001fce:	e002      	b.n	8001fd6 <maxim_peaks_above_min_height+0xd0>
    }
    else
      i++;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
  while (i < n_size-1){
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	db9f      	blt.n	8001f20 <maxim_peaks_above_min_height+0x1a>
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
    
  int32_t i, j, n_old_npks, n_dist;
    
  /* Order peaks from large to small */
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	68f9      	ldr	r1, [r7, #12]
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f894 	bl	8002130 <maxim_sort_indices_descend>

  for ( i = -1; i < *pn_npks; i++ ){
 8002008:	f04f 33ff 	mov.w	r3, #4294967295
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	e03e      	b.n	800208e <maxim_remove_close_peaks+0xa2>
    n_old_npks = *pn_npks;
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	617b      	str	r3, [r7, #20]
    *pn_npks = i+1;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	601a      	str	r2, [r3, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61bb      	str	r3, [r7, #24]
 8002024:	e02c      	b.n	8002080 <maxim_remove_close_peaks+0x94>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4413      	add	r3, r2
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002036:	d005      	beq.n	8002044 <maxim_remove_close_peaks+0x58>
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	68f9      	ldr	r1, [r7, #12]
 800203e:	440b      	add	r3, r1
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	e001      	b.n	8002048 <maxim_remove_close_peaks+0x5c>
 8002044:	f04f 33ff 	mov.w	r3, #4294967295
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	613b      	str	r3, [r7, #16]
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	dc04      	bgt.n	800205e <maxim_remove_close_peaks+0x72>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	425b      	negs	r3, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	429a      	cmp	r2, r3
 800205c:	da0d      	bge.n	800207a <maxim_remove_close_peaks+0x8e>
        pn_locs[(*pn_npks)++] = pn_locs[j];
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	441a      	add	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	1c58      	adds	r0, r3, #1
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	6008      	str	r0, [r1, #0]
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	68f9      	ldr	r1, [r7, #12]
 8002074:	440b      	add	r3, r1
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	601a      	str	r2, [r3, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	3301      	adds	r3, #1
 800207e:	61bb      	str	r3, [r7, #24]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	429a      	cmp	r2, r3
 8002086:	dbce      	blt.n	8002026 <maxim_remove_close_peaks+0x3a>
  for ( i = -1; i < *pn_npks; i++ ){
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	3301      	adds	r3, #1
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	429a      	cmp	r2, r3
 8002096:	dbbb      	blt.n	8002010 <maxim_remove_close_peaks+0x24>
    }
  }

  // Resort indices int32_to ascending order
  maxim_sort_ascend( pn_locs, *pn_npks );
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4619      	mov	r1, r3
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 f804 	bl	80020ac <maxim_sort_ascend>
}
 80020a4:	bf00      	nop
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 80020b6:	2301      	movs	r3, #1
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	e02f      	b.n	800211c <maxim_sort_ascend+0x70>
    n_temp = pn_x[i];
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	60fb      	str	r3, [r7, #12]
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	e00f      	b.n	80020ee <maxim_sort_ascend+0x42>
        pn_x[j] = pn_x[j-1];
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80020d4:	3b01      	subs	r3, #1
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	441a      	add	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	440b      	add	r3, r1
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	601a      	str	r2, [r3, #0]
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	dd0a      	ble.n	800210a <maxim_sort_ascend+0x5e>
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80020fa:	3b01      	subs	r3, #1
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	429a      	cmp	r2, r3
 8002108:	dbe1      	blt.n	80020ce <maxim_sort_ascend+0x22>
    pn_x[j] = n_temp;
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	601a      	str	r2, [r3, #0]
  for (i = 1; i < n_size; i++) {
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	dbcb      	blt.n	80020bc <maxim_sort_ascend+0x10>
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	371c      	adds	r7, #28
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	@ 0x24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 800213c:	2301      	movs	r3, #1
 800213e:	61fb      	str	r3, [r7, #28]
 8002140:	e037      	b.n	80021b2 <maxim_sort_indices_descend+0x82>
    n_temp = pn_indx[i];
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	4413      	add	r3, r2
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	617b      	str	r3, [r7, #20]
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	e00f      	b.n	8002174 <maxim_sort_indices_descend+0x44>
      pn_indx[j] = pn_indx[j-1];
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800215a:	3b01      	subs	r3, #1
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	441a      	add	r2, r3
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	440b      	add	r3, r1
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	601a      	str	r2, [r3, #0]
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	3b01      	subs	r3, #1
 8002172:	61bb      	str	r3, [r7, #24]
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	dd12      	ble.n	80021a0 <maxim_sort_indices_descend+0x70>
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4413      	add	r3, r2
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800218a:	3b01      	subs	r3, #1
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	68b9      	ldr	r1, [r7, #8]
 8002190:	440b      	add	r3, r1
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	68f9      	ldr	r1, [r7, #12]
 8002198:	440b      	add	r3, r1
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	dcd9      	bgt.n	8002154 <maxim_sort_indices_descend+0x24>
    pn_indx[j] = n_temp;
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	4413      	add	r3, r2
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	601a      	str	r2, [r3, #0]
  for (i = 1; i < n_size; i++) {
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	3301      	adds	r3, #1
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	dbc3      	blt.n	8002142 <maxim_sort_indices_descend+0x12>
  }
}
 80021ba:	bf00      	nop
 80021bc:	bf00      	nop
 80021be:	3724      	adds	r7, #36	@ 0x24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
	...

080021c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021ce:	4b15      	ldr	r3, [pc, #84]	@ (8002224 <HAL_MspInit+0x5c>)
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	4a14      	ldr	r2, [pc, #80]	@ (8002224 <HAL_MspInit+0x5c>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6193      	str	r3, [r2, #24]
 80021da:	4b12      	ldr	r3, [pc, #72]	@ (8002224 <HAL_MspInit+0x5c>)
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002224 <HAL_MspInit+0x5c>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002224 <HAL_MspInit+0x5c>)
 80021ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f0:	61d3      	str	r3, [r2, #28]
 80021f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002224 <HAL_MspInit+0x5c>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <HAL_MspInit+0x60>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	4a04      	ldr	r2, [pc, #16]	@ (8002228 <HAL_MspInit+0x60>)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800221a:	bf00      	nop
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	40021000 	.word	0x40021000
 8002228:	40010000 	.word	0x40010000

0800222c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a16      	ldr	r2, [pc, #88]	@ (80022a0 <HAL_I2C_MspInit+0x74>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d124      	bne.n	8002296 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224c:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <HAL_I2C_MspInit+0x78>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4a14      	ldr	r2, [pc, #80]	@ (80022a4 <HAL_I2C_MspInit+0x78>)
 8002252:	f043 0308 	orr.w	r3, r3, #8
 8002256:	6193      	str	r3, [r2, #24]
 8002258:	4b12      	ldr	r3, [pc, #72]	@ (80022a4 <HAL_I2C_MspInit+0x78>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002264:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002268:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800226a:	2312      	movs	r3, #18
 800226c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800226e:	2303      	movs	r3, #3
 8002270:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002272:	f107 0310 	add.w	r3, r7, #16
 8002276:	4619      	mov	r1, r3
 8002278:	480b      	ldr	r0, [pc, #44]	@ (80022a8 <HAL_I2C_MspInit+0x7c>)
 800227a:	f000 fcbb 	bl	8002bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800227e:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <HAL_I2C_MspInit+0x78>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	4a08      	ldr	r2, [pc, #32]	@ (80022a4 <HAL_I2C_MspInit+0x78>)
 8002284:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002288:	61d3      	str	r3, [r2, #28]
 800228a:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <HAL_I2C_MspInit+0x78>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002296:	bf00      	nop
 8002298:	3720      	adds	r7, #32
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40005800 	.word	0x40005800
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40010c00 	.word	0x40010c00

080022ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08c      	sub	sp, #48	@ 0x30
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a42      	ldr	r2, [pc, #264]	@ (80023d0 <HAL_UART_MspInit+0x124>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d13a      	bne.n	8002342 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022cc:	4b41      	ldr	r3, [pc, #260]	@ (80023d4 <HAL_UART_MspInit+0x128>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	4a40      	ldr	r2, [pc, #256]	@ (80023d4 <HAL_UART_MspInit+0x128>)
 80022d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80022d6:	61d3      	str	r3, [r2, #28]
 80022d8:	4b3e      	ldr	r3, [pc, #248]	@ (80023d4 <HAL_UART_MspInit+0x128>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022e0:	61bb      	str	r3, [r7, #24]
 80022e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e4:	4b3b      	ldr	r3, [pc, #236]	@ (80023d4 <HAL_UART_MspInit+0x128>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a3a      	ldr	r2, [pc, #232]	@ (80023d4 <HAL_UART_MspInit+0x128>)
 80022ea:	f043 0310 	orr.w	r3, r3, #16
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b38      	ldr	r3, [pc, #224]	@ (80023d4 <HAL_UART_MspInit+0x128>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002306:	2303      	movs	r3, #3
 8002308:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800230a:	f107 031c 	add.w	r3, r7, #28
 800230e:	4619      	mov	r1, r3
 8002310:	4831      	ldr	r0, [pc, #196]	@ (80023d8 <HAL_UART_MspInit+0x12c>)
 8002312:	f000 fc6f 	bl	8002bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002316:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800231a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002324:	f107 031c 	add.w	r3, r7, #28
 8002328:	4619      	mov	r1, r3
 800232a:	482b      	ldr	r0, [pc, #172]	@ (80023d8 <HAL_UART_MspInit+0x12c>)
 800232c:	f000 fc62 	bl	8002bf4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002330:	2200      	movs	r2, #0
 8002332:	2100      	movs	r1, #0
 8002334:	2034      	movs	r0, #52	@ 0x34
 8002336:	f000 fae4 	bl	8002902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800233a:	2034      	movs	r0, #52	@ 0x34
 800233c:	f000 fafd 	bl	800293a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002340:	e042      	b.n	80023c8 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a25      	ldr	r2, [pc, #148]	@ (80023dc <HAL_UART_MspInit+0x130>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d13d      	bne.n	80023c8 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART1_CLK_ENABLE();
 800234c:	4b21      	ldr	r3, [pc, #132]	@ (80023d4 <HAL_UART_MspInit+0x128>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	4a20      	ldr	r2, [pc, #128]	@ (80023d4 <HAL_UART_MspInit+0x128>)
 8002352:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002356:	6193      	str	r3, [r2, #24]
 8002358:	4b1e      	ldr	r3, [pc, #120]	@ (80023d4 <HAL_UART_MspInit+0x128>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002364:	4b1b      	ldr	r3, [pc, #108]	@ (80023d4 <HAL_UART_MspInit+0x128>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	4a1a      	ldr	r2, [pc, #104]	@ (80023d4 <HAL_UART_MspInit+0x128>)
 800236a:	f043 0308 	orr.w	r3, r3, #8
 800236e:	6193      	str	r3, [r2, #24]
 8002370:	4b18      	ldr	r3, [pc, #96]	@ (80023d4 <HAL_UART_MspInit+0x128>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800237c:	2340      	movs	r3, #64	@ 0x40
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002384:	2303      	movs	r3, #3
 8002386:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002388:	f107 031c 	add.w	r3, r7, #28
 800238c:	4619      	mov	r1, r3
 800238e:	4814      	ldr	r0, [pc, #80]	@ (80023e0 <HAL_UART_MspInit+0x134>)
 8002390:	f000 fc30 	bl	8002bf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002394:	2380      	movs	r3, #128	@ 0x80
 8002396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002398:	2300      	movs	r3, #0
 800239a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a0:	f107 031c 	add.w	r3, r7, #28
 80023a4:	4619      	mov	r1, r3
 80023a6:	480e      	ldr	r0, [pc, #56]	@ (80023e0 <HAL_UART_MspInit+0x134>)
 80023a8:	f000 fc24 	bl	8002bf4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 80023ac:	4b0d      	ldr	r3, [pc, #52]	@ (80023e4 <HAL_UART_MspInit+0x138>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80023b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023c2:	4a08      	ldr	r2, [pc, #32]	@ (80023e4 <HAL_UART_MspInit+0x138>)
 80023c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c6:	6053      	str	r3, [r2, #4]
}
 80023c8:	bf00      	nop
 80023ca:	3730      	adds	r7, #48	@ 0x30
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40004c00 	.word	0x40004c00
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40011000 	.word	0x40011000
 80023dc:	40013800 	.word	0x40013800
 80023e0:	40010c00 	.word	0x40010c00
 80023e4:	40010000 	.word	0x40010000

080023e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <NMI_Handler+0x4>

080023f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f4:	bf00      	nop
 80023f6:	e7fd      	b.n	80023f4 <HardFault_Handler+0x4>

080023f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023fc:	bf00      	nop
 80023fe:	e7fd      	b.n	80023fc <MemManage_Handler+0x4>

08002400 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002404:	bf00      	nop
 8002406:	e7fd      	b.n	8002404 <BusFault_Handler+0x4>

08002408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800240c:	bf00      	nop
 800240e:	e7fd      	b.n	800240c <UsageFault_Handler+0x4>

08002410 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002438:	f000 f94c 	bl	80026d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}

08002440 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002444:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002448:	f000 fd80 	bl	8002f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}

08002450 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
//		RxHead = 0;
//	}
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002454:	4802      	ldr	r0, [pc, #8]	@ (8002460 <UART4_IRQHandler+0x10>)
 8002456:	f002 faf7 	bl	8004a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200002d4 	.word	0x200002d4

08002464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800246c:	4a14      	ldr	r2, [pc, #80]	@ (80024c0 <_sbrk+0x5c>)
 800246e:	4b15      	ldr	r3, [pc, #84]	@ (80024c4 <_sbrk+0x60>)
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002478:	4b13      	ldr	r3, [pc, #76]	@ (80024c8 <_sbrk+0x64>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d102      	bne.n	8002486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002480:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <_sbrk+0x64>)
 8002482:	4a12      	ldr	r2, [pc, #72]	@ (80024cc <_sbrk+0x68>)
 8002484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002486:	4b10      	ldr	r3, [pc, #64]	@ (80024c8 <_sbrk+0x64>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	429a      	cmp	r2, r3
 8002492:	d207      	bcs.n	80024a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002494:	f003 f884 	bl	80055a0 <__errno>
 8002498:	4603      	mov	r3, r0
 800249a:	220c      	movs	r2, #12
 800249c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800249e:	f04f 33ff 	mov.w	r3, #4294967295
 80024a2:	e009      	b.n	80024b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024a4:	4b08      	ldr	r3, [pc, #32]	@ (80024c8 <_sbrk+0x64>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024aa:	4b07      	ldr	r3, [pc, #28]	@ (80024c8 <_sbrk+0x64>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	4a05      	ldr	r2, [pc, #20]	@ (80024c8 <_sbrk+0x64>)
 80024b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024b6:	68fb      	ldr	r3, [r7, #12]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	2000c000 	.word	0x2000c000
 80024c4:	00000400 	.word	0x00000400
 80024c8:	20000974 	.word	0x20000974
 80024cc:	20000fd0 	.word	0x20000fd0

080024d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <_getchar>:
unsigned char TxBuf[TXBUFSIZE];// transmit buffer
int TxHead =0; // circular buffer index
int TxTail =0; // circular buffer index

unsigned char _getchar()
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
	unsigned char temp;
	while (RxTail == RxHead)
 80024e2:	e003      	b.n	80024ec <_getchar+0x10>
	{
		HAL_Delay(1000);
 80024e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024e8:	f000 f910 	bl	800270c <HAL_Delay>
	while (RxTail == RxHead)
 80024ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <_getchar+0x4c>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b0e      	ldr	r3, [pc, #56]	@ (800252c <_getchar+0x50>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d0f5      	beq.n	80024e4 <_getchar+0x8>
	}
	temp = RxBuf[RxTail];
 80024f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <_getchar+0x4c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0c      	ldr	r2, [pc, #48]	@ (8002530 <_getchar+0x54>)
 80024fe:	5cd3      	ldrb	r3, [r2, r3]
 8002500:	71fb      	strb	r3, [r7, #7]
	if (++RxTail > (RXBUFSIZE -1))
 8002502:	4b09      	ldr	r3, [pc, #36]	@ (8002528 <_getchar+0x4c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	3301      	adds	r3, #1
 8002508:	4a07      	ldr	r2, [pc, #28]	@ (8002528 <_getchar+0x4c>)
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <_getchar+0x4c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002514:	db02      	blt.n	800251c <_getchar+0x40>
	{
		RxTail = 0;
 8002516:	4b04      	ldr	r3, [pc, #16]	@ (8002528 <_getchar+0x4c>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
	}
	return(temp);
 800251c:	79fb      	ldrb	r3, [r7, #7]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000d7c 	.word	0x20000d7c
 800252c:	20000d78 	.word	0x20000d78
 8002530:	20000978 	.word	0x20000978

08002534 <USART_Init>:
 *      Author: ADMIN
 */
#include "uart_print.h"

void USART_Init(USART_H_t *USART_handler, UART_HandleTypeDef *huart)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
	USART_handler->_huart = huart;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	601a      	str	r2, [r3, #0]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr

0800254e <UART_sendByte>:

void UART_sendByte(USART_H_t *USART_handler, uint8_t data)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	460b      	mov	r3, r1
 8002558:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(USART_handler->_huart, &data, 1, 100);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	1cf9      	adds	r1, r7, #3
 8002560:	2364      	movs	r3, #100	@ 0x64
 8002562:	2201      	movs	r2, #1
 8002564:	f002 f9c0 	bl	80048e8 <HAL_UART_Transmit>
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <USART_sendChar>:

void USART_sendChar(USART_H_t *USART_handler, uint8_t data)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	70fb      	strb	r3, [r7, #3]
    UART_sendByte(USART_handler, data);
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	4619      	mov	r1, r3
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ffe4 	bl	800254e <UART_sendByte>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <USART_put>:

void USART_put(USART_H_t *USART_handler, char *data)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
	while (data[0] != '\0')
 8002598:	e008      	b.n	80025ac <USART_put+0x1e>
	{
		USART_sendChar(USART_handler, data[0]);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	4619      	mov	r1, r3
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ffe5 	bl	8002570 <USART_sendChar>
		data++;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	3301      	adds	r3, #1
 80025aa:	603b      	str	r3, [r7, #0]
	while (data[0] != '\0')
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f2      	bne.n	800259a <USART_put+0xc>
	}
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <USART_Transmit>:

int USART_Transmit(USART_H_t *USART_handler, const char *fmt, ...)
{
 80025c0:	b40e      	push	{r1, r2, r3}
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b085      	sub	sp, #20
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
	int done;
	va_list args;
	static char buffer[256];
	va_start(args, fmt);
 80025ca:	f107 0320 	add.w	r3, r7, #32
 80025ce:	60bb      	str	r3, [r7, #8]

	done = vsnprintf(buffer, 256, fmt, args);
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025d8:	4807      	ldr	r0, [pc, #28]	@ (80025f8 <USART_Transmit+0x38>)
 80025da:	f002 ffcb 	bl	8005574 <vsniprintf>
 80025de:	60f8      	str	r0, [r7, #12]

	USART_put(USART_handler, buffer);
 80025e0:	4905      	ldr	r1, [pc, #20]	@ (80025f8 <USART_Transmit+0x38>)
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff ffd3 	bl	800258e <USART_put>

	va_end(args);
	return done;
 80025e8:	68fb      	ldr	r3, [r7, #12]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025f4:	b003      	add	sp, #12
 80025f6:	4770      	bx	lr
 80025f8:	20000d80 	.word	0x20000d80

080025fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025fc:	480c      	ldr	r0, [pc, #48]	@ (8002630 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025fe:	490d      	ldr	r1, [pc, #52]	@ (8002634 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002600:	4a0d      	ldr	r2, [pc, #52]	@ (8002638 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002604:	e002      	b.n	800260c <LoopCopyDataInit>

08002606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260a:	3304      	adds	r3, #4

0800260c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800260c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800260e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002610:	d3f9      	bcc.n	8002606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002612:	4a0a      	ldr	r2, [pc, #40]	@ (800263c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002614:	4c0a      	ldr	r4, [pc, #40]	@ (8002640 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002618:	e001      	b.n	800261e <LoopFillZerobss>

0800261a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800261c:	3204      	adds	r2, #4

0800261e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800261e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002620:	d3fb      	bcc.n	800261a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002622:	f7ff ff55 	bl	80024d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002626:	f002 ffc1 	bl	80055ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800262a:	f7fe f953 	bl	80008d4 <main>
  bx lr
 800262e:	4770      	bx	lr
  ldr r0, =_sdata
 8002630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002634:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8002638:	08006058 	.word	0x08006058
  ldr r2, =_sbss
 800263c:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8002640:	20000fcc 	.word	0x20000fcc

08002644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002644:	e7fe      	b.n	8002644 <ADC1_2_IRQHandler>
	...

08002648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800264c:	4b08      	ldr	r3, [pc, #32]	@ (8002670 <HAL_Init+0x28>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a07      	ldr	r2, [pc, #28]	@ (8002670 <HAL_Init+0x28>)
 8002652:	f043 0310 	orr.w	r3, r3, #16
 8002656:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002658:	2003      	movs	r0, #3
 800265a:	f000 f947 	bl	80028ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800265e:	200f      	movs	r0, #15
 8002660:	f000 f808 	bl	8002674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002664:	f7ff fdb0 	bl	80021c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40022000 	.word	0x40022000

08002674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800267c:	4b12      	ldr	r3, [pc, #72]	@ (80026c8 <HAL_InitTick+0x54>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b12      	ldr	r3, [pc, #72]	@ (80026cc <HAL_InitTick+0x58>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800268a:	fbb3 f3f1 	udiv	r3, r3, r1
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f95f 	bl	8002956 <HAL_SYSTICK_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e00e      	b.n	80026c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b0f      	cmp	r3, #15
 80026a6:	d80a      	bhi.n	80026be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a8:	2200      	movs	r2, #0
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	f04f 30ff 	mov.w	r0, #4294967295
 80026b0:	f000 f927 	bl	8002902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026b4:	4a06      	ldr	r2, [pc, #24]	@ (80026d0 <HAL_InitTick+0x5c>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000208 	.word	0x20000208
 80026cc:	20000210 	.word	0x20000210
 80026d0:	2000020c 	.word	0x2000020c

080026d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <HAL_IncTick+0x1c>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	4b05      	ldr	r3, [pc, #20]	@ (80026f4 <HAL_IncTick+0x20>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	4a03      	ldr	r2, [pc, #12]	@ (80026f4 <HAL_IncTick+0x20>)
 80026e6:	6013      	str	r3, [r2, #0]
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	20000210 	.word	0x20000210
 80026f4:	20000e80 	.word	0x20000e80

080026f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return uwTick;
 80026fc:	4b02      	ldr	r3, [pc, #8]	@ (8002708 <HAL_GetTick+0x10>)
 80026fe:	681b      	ldr	r3, [r3, #0]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	20000e80 	.word	0x20000e80

0800270c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002714:	f7ff fff0 	bl	80026f8 <HAL_GetTick>
 8002718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002724:	d005      	beq.n	8002732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002726:	4b0a      	ldr	r3, [pc, #40]	@ (8002750 <HAL_Delay+0x44>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4413      	add	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002732:	bf00      	nop
 8002734:	f7ff ffe0 	bl	80026f8 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	429a      	cmp	r2, r3
 8002742:	d8f7      	bhi.n	8002734 <HAL_Delay+0x28>
  {
  }
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000210 	.word	0x20000210

08002754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002764:	4b0c      	ldr	r3, [pc, #48]	@ (8002798 <__NVIC_SetPriorityGrouping+0x44>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002770:	4013      	ands	r3, r2
 8002772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800277c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002786:	4a04      	ldr	r2, [pc, #16]	@ (8002798 <__NVIC_SetPriorityGrouping+0x44>)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	60d3      	str	r3, [r2, #12]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a0:	4b04      	ldr	r3, [pc, #16]	@ (80027b4 <__NVIC_GetPriorityGrouping+0x18>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	0a1b      	lsrs	r3, r3, #8
 80027a6:	f003 0307 	and.w	r3, r3, #7
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	db0b      	blt.n	80027e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	f003 021f 	and.w	r2, r3, #31
 80027d0:	4906      	ldr	r1, [pc, #24]	@ (80027ec <__NVIC_EnableIRQ+0x34>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	2001      	movs	r0, #1
 80027da:	fa00 f202 	lsl.w	r2, r0, r2
 80027de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	e000e100 	.word	0xe000e100

080027f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	2b00      	cmp	r3, #0
 8002802:	db0a      	blt.n	800281a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	b2da      	uxtb	r2, r3
 8002808:	490c      	ldr	r1, [pc, #48]	@ (800283c <__NVIC_SetPriority+0x4c>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	0112      	lsls	r2, r2, #4
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	440b      	add	r3, r1
 8002814:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002818:	e00a      	b.n	8002830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4908      	ldr	r1, [pc, #32]	@ (8002840 <__NVIC_SetPriority+0x50>)
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	3b04      	subs	r3, #4
 8002828:	0112      	lsls	r2, r2, #4
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	440b      	add	r3, r1
 800282e:	761a      	strb	r2, [r3, #24]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000e100 	.word	0xe000e100
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002844:	b480      	push	{r7}
 8002846:	b089      	sub	sp, #36	@ 0x24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f1c3 0307 	rsb	r3, r3, #7
 800285e:	2b04      	cmp	r3, #4
 8002860:	bf28      	it	cs
 8002862:	2304      	movcs	r3, #4
 8002864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3304      	adds	r3, #4
 800286a:	2b06      	cmp	r3, #6
 800286c:	d902      	bls.n	8002874 <NVIC_EncodePriority+0x30>
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3b03      	subs	r3, #3
 8002872:	e000      	b.n	8002876 <NVIC_EncodePriority+0x32>
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	f04f 32ff 	mov.w	r2, #4294967295
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43da      	mvns	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	401a      	ands	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800288c:	f04f 31ff 	mov.w	r1, #4294967295
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	43d9      	mvns	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800289c:	4313      	orrs	r3, r2
         );
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3724      	adds	r7, #36	@ 0x24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028b8:	d301      	bcc.n	80028be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ba:	2301      	movs	r3, #1
 80028bc:	e00f      	b.n	80028de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028be:	4a0a      	ldr	r2, [pc, #40]	@ (80028e8 <SysTick_Config+0x40>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028c6:	210f      	movs	r1, #15
 80028c8:	f04f 30ff 	mov.w	r0, #4294967295
 80028cc:	f7ff ff90 	bl	80027f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d0:	4b05      	ldr	r3, [pc, #20]	@ (80028e8 <SysTick_Config+0x40>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028d6:	4b04      	ldr	r3, [pc, #16]	@ (80028e8 <SysTick_Config+0x40>)
 80028d8:	2207      	movs	r2, #7
 80028da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	e000e010 	.word	0xe000e010

080028ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ff2d 	bl	8002754 <__NVIC_SetPriorityGrouping>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	4603      	mov	r3, r0
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002914:	f7ff ff42 	bl	800279c <__NVIC_GetPriorityGrouping>
 8002918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68b9      	ldr	r1, [r7, #8]
 800291e:	6978      	ldr	r0, [r7, #20]
 8002920:	f7ff ff90 	bl	8002844 <NVIC_EncodePriority>
 8002924:	4602      	mov	r2, r0
 8002926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ff5f 	bl	80027f0 <__NVIC_SetPriority>
}
 8002932:	bf00      	nop
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	4603      	mov	r3, r0
 8002942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff ff35 	bl	80027b8 <__NVIC_EnableIRQ>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff ffa2 	bl	80028a8 <SysTick_Config>
 8002964:	4603      	mov	r3, r0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800296e:	b480      	push	{r7}
 8002970:	b085      	sub	sp, #20
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d008      	beq.n	8002998 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2204      	movs	r2, #4
 800298a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e020      	b.n	80029da <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 020e 	bic.w	r2, r2, #14
 80029a6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c0:	2101      	movs	r1, #1
 80029c2:	fa01 f202 	lsl.w	r2, r1, r2
 80029c6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d005      	beq.n	8002a08 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2204      	movs	r2, #4
 8002a00:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
 8002a06:	e0d6      	b.n	8002bb6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 020e 	bic.w	r2, r2, #14
 8002a16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4b64      	ldr	r3, [pc, #400]	@ (8002bc0 <HAL_DMA_Abort_IT+0x1dc>)
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d958      	bls.n	8002ae6 <HAL_DMA_Abort_IT+0x102>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a62      	ldr	r2, [pc, #392]	@ (8002bc4 <HAL_DMA_Abort_IT+0x1e0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d04f      	beq.n	8002ade <HAL_DMA_Abort_IT+0xfa>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a61      	ldr	r2, [pc, #388]	@ (8002bc8 <HAL_DMA_Abort_IT+0x1e4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d048      	beq.n	8002ada <HAL_DMA_Abort_IT+0xf6>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a5f      	ldr	r2, [pc, #380]	@ (8002bcc <HAL_DMA_Abort_IT+0x1e8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d040      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0xf0>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a5e      	ldr	r2, [pc, #376]	@ (8002bd0 <HAL_DMA_Abort_IT+0x1ec>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d038      	beq.n	8002ace <HAL_DMA_Abort_IT+0xea>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a5c      	ldr	r2, [pc, #368]	@ (8002bd4 <HAL_DMA_Abort_IT+0x1f0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d030      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0xe4>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a5b      	ldr	r2, [pc, #364]	@ (8002bd8 <HAL_DMA_Abort_IT+0x1f4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d028      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0xde>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a52      	ldr	r2, [pc, #328]	@ (8002bc0 <HAL_DMA_Abort_IT+0x1dc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d020      	beq.n	8002abc <HAL_DMA_Abort_IT+0xd8>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a57      	ldr	r2, [pc, #348]	@ (8002bdc <HAL_DMA_Abort_IT+0x1f8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d019      	beq.n	8002ab8 <HAL_DMA_Abort_IT+0xd4>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a55      	ldr	r2, [pc, #340]	@ (8002be0 <HAL_DMA_Abort_IT+0x1fc>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d012      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0xd0>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a54      	ldr	r2, [pc, #336]	@ (8002be4 <HAL_DMA_Abort_IT+0x200>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d00a      	beq.n	8002aae <HAL_DMA_Abort_IT+0xca>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a52      	ldr	r2, [pc, #328]	@ (8002be8 <HAL_DMA_Abort_IT+0x204>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d102      	bne.n	8002aa8 <HAL_DMA_Abort_IT+0xc4>
 8002aa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aa6:	e01b      	b.n	8002ae0 <HAL_DMA_Abort_IT+0xfc>
 8002aa8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002aac:	e018      	b.n	8002ae0 <HAL_DMA_Abort_IT+0xfc>
 8002aae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ab2:	e015      	b.n	8002ae0 <HAL_DMA_Abort_IT+0xfc>
 8002ab4:	2310      	movs	r3, #16
 8002ab6:	e013      	b.n	8002ae0 <HAL_DMA_Abort_IT+0xfc>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e011      	b.n	8002ae0 <HAL_DMA_Abort_IT+0xfc>
 8002abc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ac0:	e00e      	b.n	8002ae0 <HAL_DMA_Abort_IT+0xfc>
 8002ac2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002ac6:	e00b      	b.n	8002ae0 <HAL_DMA_Abort_IT+0xfc>
 8002ac8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002acc:	e008      	b.n	8002ae0 <HAL_DMA_Abort_IT+0xfc>
 8002ace:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ad2:	e005      	b.n	8002ae0 <HAL_DMA_Abort_IT+0xfc>
 8002ad4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ad8:	e002      	b.n	8002ae0 <HAL_DMA_Abort_IT+0xfc>
 8002ada:	2310      	movs	r3, #16
 8002adc:	e000      	b.n	8002ae0 <HAL_DMA_Abort_IT+0xfc>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	4a42      	ldr	r2, [pc, #264]	@ (8002bec <HAL_DMA_Abort_IT+0x208>)
 8002ae2:	6053      	str	r3, [r2, #4]
 8002ae4:	e057      	b.n	8002b96 <HAL_DMA_Abort_IT+0x1b2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a36      	ldr	r2, [pc, #216]	@ (8002bc4 <HAL_DMA_Abort_IT+0x1e0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d04f      	beq.n	8002b90 <HAL_DMA_Abort_IT+0x1ac>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a34      	ldr	r2, [pc, #208]	@ (8002bc8 <HAL_DMA_Abort_IT+0x1e4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d048      	beq.n	8002b8c <HAL_DMA_Abort_IT+0x1a8>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a33      	ldr	r2, [pc, #204]	@ (8002bcc <HAL_DMA_Abort_IT+0x1e8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d040      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x1a2>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a31      	ldr	r2, [pc, #196]	@ (8002bd0 <HAL_DMA_Abort_IT+0x1ec>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d038      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x19c>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a30      	ldr	r2, [pc, #192]	@ (8002bd4 <HAL_DMA_Abort_IT+0x1f0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d030      	beq.n	8002b7a <HAL_DMA_Abort_IT+0x196>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a2e      	ldr	r2, [pc, #184]	@ (8002bd8 <HAL_DMA_Abort_IT+0x1f4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d028      	beq.n	8002b74 <HAL_DMA_Abort_IT+0x190>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a26      	ldr	r2, [pc, #152]	@ (8002bc0 <HAL_DMA_Abort_IT+0x1dc>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d020      	beq.n	8002b6e <HAL_DMA_Abort_IT+0x18a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a2a      	ldr	r2, [pc, #168]	@ (8002bdc <HAL_DMA_Abort_IT+0x1f8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d019      	beq.n	8002b6a <HAL_DMA_Abort_IT+0x186>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a29      	ldr	r2, [pc, #164]	@ (8002be0 <HAL_DMA_Abort_IT+0x1fc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d012      	beq.n	8002b66 <HAL_DMA_Abort_IT+0x182>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a27      	ldr	r2, [pc, #156]	@ (8002be4 <HAL_DMA_Abort_IT+0x200>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00a      	beq.n	8002b60 <HAL_DMA_Abort_IT+0x17c>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a26      	ldr	r2, [pc, #152]	@ (8002be8 <HAL_DMA_Abort_IT+0x204>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d102      	bne.n	8002b5a <HAL_DMA_Abort_IT+0x176>
 8002b54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b58:	e01b      	b.n	8002b92 <HAL_DMA_Abort_IT+0x1ae>
 8002b5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b5e:	e018      	b.n	8002b92 <HAL_DMA_Abort_IT+0x1ae>
 8002b60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b64:	e015      	b.n	8002b92 <HAL_DMA_Abort_IT+0x1ae>
 8002b66:	2310      	movs	r3, #16
 8002b68:	e013      	b.n	8002b92 <HAL_DMA_Abort_IT+0x1ae>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e011      	b.n	8002b92 <HAL_DMA_Abort_IT+0x1ae>
 8002b6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b72:	e00e      	b.n	8002b92 <HAL_DMA_Abort_IT+0x1ae>
 8002b74:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b78:	e00b      	b.n	8002b92 <HAL_DMA_Abort_IT+0x1ae>
 8002b7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b7e:	e008      	b.n	8002b92 <HAL_DMA_Abort_IT+0x1ae>
 8002b80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b84:	e005      	b.n	8002b92 <HAL_DMA_Abort_IT+0x1ae>
 8002b86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b8a:	e002      	b.n	8002b92 <HAL_DMA_Abort_IT+0x1ae>
 8002b8c:	2310      	movs	r3, #16
 8002b8e:	e000      	b.n	8002b92 <HAL_DMA_Abort_IT+0x1ae>
 8002b90:	2301      	movs	r3, #1
 8002b92:	4a17      	ldr	r2, [pc, #92]	@ (8002bf0 <HAL_DMA_Abort_IT+0x20c>)
 8002b94:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
    } 
  }
  return status;
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40020080 	.word	0x40020080
 8002bc4:	40020008 	.word	0x40020008
 8002bc8:	4002001c 	.word	0x4002001c
 8002bcc:	40020030 	.word	0x40020030
 8002bd0:	40020044 	.word	0x40020044
 8002bd4:	40020058 	.word	0x40020058
 8002bd8:	4002006c 	.word	0x4002006c
 8002bdc:	40020408 	.word	0x40020408
 8002be0:	4002041c 	.word	0x4002041c
 8002be4:	40020430 	.word	0x40020430
 8002be8:	40020444 	.word	0x40020444
 8002bec:	40020400 	.word	0x40020400
 8002bf0:	40020000 	.word	0x40020000

08002bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b08b      	sub	sp, #44	@ 0x2c
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c02:	2300      	movs	r3, #0
 8002c04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c06:	e179      	b.n	8002efc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c08:	2201      	movs	r2, #1
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69fa      	ldr	r2, [r7, #28]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	f040 8168 	bne.w	8002ef6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	4a96      	ldr	r2, [pc, #600]	@ (8002e84 <HAL_GPIO_Init+0x290>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d05e      	beq.n	8002cee <HAL_GPIO_Init+0xfa>
 8002c30:	4a94      	ldr	r2, [pc, #592]	@ (8002e84 <HAL_GPIO_Init+0x290>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d875      	bhi.n	8002d22 <HAL_GPIO_Init+0x12e>
 8002c36:	4a94      	ldr	r2, [pc, #592]	@ (8002e88 <HAL_GPIO_Init+0x294>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d058      	beq.n	8002cee <HAL_GPIO_Init+0xfa>
 8002c3c:	4a92      	ldr	r2, [pc, #584]	@ (8002e88 <HAL_GPIO_Init+0x294>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d86f      	bhi.n	8002d22 <HAL_GPIO_Init+0x12e>
 8002c42:	4a92      	ldr	r2, [pc, #584]	@ (8002e8c <HAL_GPIO_Init+0x298>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d052      	beq.n	8002cee <HAL_GPIO_Init+0xfa>
 8002c48:	4a90      	ldr	r2, [pc, #576]	@ (8002e8c <HAL_GPIO_Init+0x298>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d869      	bhi.n	8002d22 <HAL_GPIO_Init+0x12e>
 8002c4e:	4a90      	ldr	r2, [pc, #576]	@ (8002e90 <HAL_GPIO_Init+0x29c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d04c      	beq.n	8002cee <HAL_GPIO_Init+0xfa>
 8002c54:	4a8e      	ldr	r2, [pc, #568]	@ (8002e90 <HAL_GPIO_Init+0x29c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d863      	bhi.n	8002d22 <HAL_GPIO_Init+0x12e>
 8002c5a:	4a8e      	ldr	r2, [pc, #568]	@ (8002e94 <HAL_GPIO_Init+0x2a0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d046      	beq.n	8002cee <HAL_GPIO_Init+0xfa>
 8002c60:	4a8c      	ldr	r2, [pc, #560]	@ (8002e94 <HAL_GPIO_Init+0x2a0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d85d      	bhi.n	8002d22 <HAL_GPIO_Init+0x12e>
 8002c66:	2b12      	cmp	r3, #18
 8002c68:	d82a      	bhi.n	8002cc0 <HAL_GPIO_Init+0xcc>
 8002c6a:	2b12      	cmp	r3, #18
 8002c6c:	d859      	bhi.n	8002d22 <HAL_GPIO_Init+0x12e>
 8002c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c74 <HAL_GPIO_Init+0x80>)
 8002c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c74:	08002cef 	.word	0x08002cef
 8002c78:	08002cc9 	.word	0x08002cc9
 8002c7c:	08002cdb 	.word	0x08002cdb
 8002c80:	08002d1d 	.word	0x08002d1d
 8002c84:	08002d23 	.word	0x08002d23
 8002c88:	08002d23 	.word	0x08002d23
 8002c8c:	08002d23 	.word	0x08002d23
 8002c90:	08002d23 	.word	0x08002d23
 8002c94:	08002d23 	.word	0x08002d23
 8002c98:	08002d23 	.word	0x08002d23
 8002c9c:	08002d23 	.word	0x08002d23
 8002ca0:	08002d23 	.word	0x08002d23
 8002ca4:	08002d23 	.word	0x08002d23
 8002ca8:	08002d23 	.word	0x08002d23
 8002cac:	08002d23 	.word	0x08002d23
 8002cb0:	08002d23 	.word	0x08002d23
 8002cb4:	08002d23 	.word	0x08002d23
 8002cb8:	08002cd1 	.word	0x08002cd1
 8002cbc:	08002ce5 	.word	0x08002ce5
 8002cc0:	4a75      	ldr	r2, [pc, #468]	@ (8002e98 <HAL_GPIO_Init+0x2a4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d013      	beq.n	8002cee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cc6:	e02c      	b.n	8002d22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	623b      	str	r3, [r7, #32]
          break;
 8002cce:	e029      	b.n	8002d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	623b      	str	r3, [r7, #32]
          break;
 8002cd8:	e024      	b.n	8002d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	3308      	adds	r3, #8
 8002ce0:	623b      	str	r3, [r7, #32]
          break;
 8002ce2:	e01f      	b.n	8002d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	330c      	adds	r3, #12
 8002cea:	623b      	str	r3, [r7, #32]
          break;
 8002cec:	e01a      	b.n	8002d24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d102      	bne.n	8002cfc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	623b      	str	r3, [r7, #32]
          break;
 8002cfa:	e013      	b.n	8002d24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d105      	bne.n	8002d10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d04:	2308      	movs	r3, #8
 8002d06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	611a      	str	r2, [r3, #16]
          break;
 8002d0e:	e009      	b.n	8002d24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d10:	2308      	movs	r3, #8
 8002d12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	615a      	str	r2, [r3, #20]
          break;
 8002d1a:	e003      	b.n	8002d24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	623b      	str	r3, [r7, #32]
          break;
 8002d20:	e000      	b.n	8002d24 <HAL_GPIO_Init+0x130>
          break;
 8002d22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2bff      	cmp	r3, #255	@ 0xff
 8002d28:	d801      	bhi.n	8002d2e <HAL_GPIO_Init+0x13a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	e001      	b.n	8002d32 <HAL_GPIO_Init+0x13e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3304      	adds	r3, #4
 8002d32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	2bff      	cmp	r3, #255	@ 0xff
 8002d38:	d802      	bhi.n	8002d40 <HAL_GPIO_Init+0x14c>
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	e002      	b.n	8002d46 <HAL_GPIO_Init+0x152>
 8002d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d42:	3b08      	subs	r3, #8
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	210f      	movs	r1, #15
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	fa01 f303 	lsl.w	r3, r1, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	401a      	ands	r2, r3
 8002d58:	6a39      	ldr	r1, [r7, #32]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	431a      	orrs	r2, r3
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80c1 	beq.w	8002ef6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d74:	4b49      	ldr	r3, [pc, #292]	@ (8002e9c <HAL_GPIO_Init+0x2a8>)
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	4a48      	ldr	r2, [pc, #288]	@ (8002e9c <HAL_GPIO_Init+0x2a8>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6193      	str	r3, [r2, #24]
 8002d80:	4b46      	ldr	r3, [pc, #280]	@ (8002e9c <HAL_GPIO_Init+0x2a8>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d8c:	4a44      	ldr	r2, [pc, #272]	@ (8002ea0 <HAL_GPIO_Init+0x2ac>)
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	089b      	lsrs	r3, r3, #2
 8002d92:	3302      	adds	r3, #2
 8002d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	220f      	movs	r2, #15
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4013      	ands	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a3c      	ldr	r2, [pc, #240]	@ (8002ea4 <HAL_GPIO_Init+0x2b0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d01f      	beq.n	8002df8 <HAL_GPIO_Init+0x204>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a3b      	ldr	r2, [pc, #236]	@ (8002ea8 <HAL_GPIO_Init+0x2b4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d019      	beq.n	8002df4 <HAL_GPIO_Init+0x200>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a3a      	ldr	r2, [pc, #232]	@ (8002eac <HAL_GPIO_Init+0x2b8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d013      	beq.n	8002df0 <HAL_GPIO_Init+0x1fc>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a39      	ldr	r2, [pc, #228]	@ (8002eb0 <HAL_GPIO_Init+0x2bc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d00d      	beq.n	8002dec <HAL_GPIO_Init+0x1f8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a38      	ldr	r2, [pc, #224]	@ (8002eb4 <HAL_GPIO_Init+0x2c0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d007      	beq.n	8002de8 <HAL_GPIO_Init+0x1f4>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a37      	ldr	r2, [pc, #220]	@ (8002eb8 <HAL_GPIO_Init+0x2c4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d101      	bne.n	8002de4 <HAL_GPIO_Init+0x1f0>
 8002de0:	2305      	movs	r3, #5
 8002de2:	e00a      	b.n	8002dfa <HAL_GPIO_Init+0x206>
 8002de4:	2306      	movs	r3, #6
 8002de6:	e008      	b.n	8002dfa <HAL_GPIO_Init+0x206>
 8002de8:	2304      	movs	r3, #4
 8002dea:	e006      	b.n	8002dfa <HAL_GPIO_Init+0x206>
 8002dec:	2303      	movs	r3, #3
 8002dee:	e004      	b.n	8002dfa <HAL_GPIO_Init+0x206>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e002      	b.n	8002dfa <HAL_GPIO_Init+0x206>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <HAL_GPIO_Init+0x206>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dfc:	f002 0203 	and.w	r2, r2, #3
 8002e00:	0092      	lsls	r2, r2, #2
 8002e02:	4093      	lsls	r3, r2
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e0a:	4925      	ldr	r1, [pc, #148]	@ (8002ea0 <HAL_GPIO_Init+0x2ac>)
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0e:	089b      	lsrs	r3, r3, #2
 8002e10:	3302      	adds	r3, #2
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d006      	beq.n	8002e32 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e24:	4b25      	ldr	r3, [pc, #148]	@ (8002ebc <HAL_GPIO_Init+0x2c8>)
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	4924      	ldr	r1, [pc, #144]	@ (8002ebc <HAL_GPIO_Init+0x2c8>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	608b      	str	r3, [r1, #8]
 8002e30:	e006      	b.n	8002e40 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e32:	4b22      	ldr	r3, [pc, #136]	@ (8002ebc <HAL_GPIO_Init+0x2c8>)
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	4920      	ldr	r1, [pc, #128]	@ (8002ebc <HAL_GPIO_Init+0x2c8>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d006      	beq.n	8002e5a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ebc <HAL_GPIO_Init+0x2c8>)
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	491a      	ldr	r1, [pc, #104]	@ (8002ebc <HAL_GPIO_Init+0x2c8>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60cb      	str	r3, [r1, #12]
 8002e58:	e006      	b.n	8002e68 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e5a:	4b18      	ldr	r3, [pc, #96]	@ (8002ebc <HAL_GPIO_Init+0x2c8>)
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	4916      	ldr	r1, [pc, #88]	@ (8002ebc <HAL_GPIO_Init+0x2c8>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d025      	beq.n	8002ec0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e74:	4b11      	ldr	r3, [pc, #68]	@ (8002ebc <HAL_GPIO_Init+0x2c8>)
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	4910      	ldr	r1, [pc, #64]	@ (8002ebc <HAL_GPIO_Init+0x2c8>)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
 8002e80:	e025      	b.n	8002ece <HAL_GPIO_Init+0x2da>
 8002e82:	bf00      	nop
 8002e84:	10320000 	.word	0x10320000
 8002e88:	10310000 	.word	0x10310000
 8002e8c:	10220000 	.word	0x10220000
 8002e90:	10210000 	.word	0x10210000
 8002e94:	10120000 	.word	0x10120000
 8002e98:	10110000 	.word	0x10110000
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40010000 	.word	0x40010000
 8002ea4:	40010800 	.word	0x40010800
 8002ea8:	40010c00 	.word	0x40010c00
 8002eac:	40011000 	.word	0x40011000
 8002eb0:	40011400 	.word	0x40011400
 8002eb4:	40011800 	.word	0x40011800
 8002eb8:	40011c00 	.word	0x40011c00
 8002ebc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ec0:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <HAL_GPIO_Init+0x324>)
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	4913      	ldr	r1, [pc, #76]	@ (8002f18 <HAL_GPIO_Init+0x324>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d006      	beq.n	8002ee8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002eda:	4b0f      	ldr	r3, [pc, #60]	@ (8002f18 <HAL_GPIO_Init+0x324>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	490e      	ldr	r1, [pc, #56]	@ (8002f18 <HAL_GPIO_Init+0x324>)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]
 8002ee6:	e006      	b.n	8002ef6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <HAL_GPIO_Init+0x324>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	4909      	ldr	r1, [pc, #36]	@ (8002f18 <HAL_GPIO_Init+0x324>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	3301      	adds	r3, #1
 8002efa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	fa22 f303 	lsr.w	r3, r2, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f47f ae7e 	bne.w	8002c08 <HAL_GPIO_Init+0x14>
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	372c      	adds	r7, #44	@ 0x2c
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr
 8002f18:	40010400 	.word	0x40010400

08002f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	807b      	strh	r3, [r7, #2]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f2c:	787b      	ldrb	r3, [r7, #1]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f32:	887a      	ldrh	r2, [r7, #2]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f38:	e003      	b.n	8002f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f3a:	887b      	ldrh	r3, [r7, #2]
 8002f3c:	041a      	lsls	r2, r3, #16
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	611a      	str	r2, [r3, #16]
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr

08002f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f56:	4b08      	ldr	r3, [pc, #32]	@ (8002f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d006      	beq.n	8002f70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f62:	4a05      	ldr	r2, [pc, #20]	@ (8002f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f64:	88fb      	ldrh	r3, [r7, #6]
 8002f66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 f806 	bl	8002f7c <HAL_GPIO_EXTI_Callback>
  }
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40010400 	.word	0x40010400

08002f7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e12b      	b.n	80031fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff f938 	bl	800222c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2224      	movs	r2, #36	@ 0x24
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fe2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ff4:	f001 fbe2 	bl	80047bc <HAL_RCC_GetPCLK1Freq>
 8002ff8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4a81      	ldr	r2, [pc, #516]	@ (8003204 <HAL_I2C_Init+0x274>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d807      	bhi.n	8003014 <HAL_I2C_Init+0x84>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4a80      	ldr	r2, [pc, #512]	@ (8003208 <HAL_I2C_Init+0x278>)
 8003008:	4293      	cmp	r3, r2
 800300a:	bf94      	ite	ls
 800300c:	2301      	movls	r3, #1
 800300e:	2300      	movhi	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	e006      	b.n	8003022 <HAL_I2C_Init+0x92>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a7d      	ldr	r2, [pc, #500]	@ (800320c <HAL_I2C_Init+0x27c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	bf94      	ite	ls
 800301c:	2301      	movls	r3, #1
 800301e:	2300      	movhi	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e0e7      	b.n	80031fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4a78      	ldr	r2, [pc, #480]	@ (8003210 <HAL_I2C_Init+0x280>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	0c9b      	lsrs	r3, r3, #18
 8003034:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a6a      	ldr	r2, [pc, #424]	@ (8003204 <HAL_I2C_Init+0x274>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d802      	bhi.n	8003064 <HAL_I2C_Init+0xd4>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	3301      	adds	r3, #1
 8003062:	e009      	b.n	8003078 <HAL_I2C_Init+0xe8>
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	4a69      	ldr	r2, [pc, #420]	@ (8003214 <HAL_I2C_Init+0x284>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	099b      	lsrs	r3, r3, #6
 8003076:	3301      	adds	r3, #1
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	430b      	orrs	r3, r1
 800307e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800308a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	495c      	ldr	r1, [pc, #368]	@ (8003204 <HAL_I2C_Init+0x274>)
 8003094:	428b      	cmp	r3, r1
 8003096:	d819      	bhi.n	80030cc <HAL_I2C_Init+0x13c>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	1e59      	subs	r1, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030a6:	1c59      	adds	r1, r3, #1
 80030a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030ac:	400b      	ands	r3, r1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_I2C_Init+0x138>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1e59      	subs	r1, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c6:	e051      	b.n	800316c <HAL_I2C_Init+0x1dc>
 80030c8:	2304      	movs	r3, #4
 80030ca:	e04f      	b.n	800316c <HAL_I2C_Init+0x1dc>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d111      	bne.n	80030f8 <HAL_I2C_Init+0x168>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1e58      	subs	r0, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	440b      	add	r3, r1
 80030e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e012      	b.n	800311e <HAL_I2C_Init+0x18e>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1e58      	subs	r0, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	0099      	lsls	r1, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	fbb0 f3f3 	udiv	r3, r0, r3
 800310e:	3301      	adds	r3, #1
 8003110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_Init+0x196>
 8003122:	2301      	movs	r3, #1
 8003124:	e022      	b.n	800316c <HAL_I2C_Init+0x1dc>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10e      	bne.n	800314c <HAL_I2C_Init+0x1bc>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1e58      	subs	r0, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6859      	ldr	r1, [r3, #4]
 8003136:	460b      	mov	r3, r1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	440b      	add	r3, r1
 800313c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003140:	3301      	adds	r3, #1
 8003142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800314a:	e00f      	b.n	800316c <HAL_I2C_Init+0x1dc>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	1e58      	subs	r0, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	0099      	lsls	r1, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003162:	3301      	adds	r3, #1
 8003164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003168:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	6809      	ldr	r1, [r1, #0]
 8003170:	4313      	orrs	r3, r2
 8003172:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69da      	ldr	r2, [r3, #28]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800319a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6911      	ldr	r1, [r2, #16]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68d2      	ldr	r2, [r2, #12]
 80031a6:	4311      	orrs	r1, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	430b      	orrs	r3, r1
 80031ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	000186a0 	.word	0x000186a0
 8003208:	001e847f 	.word	0x001e847f
 800320c:	003d08ff 	.word	0x003d08ff
 8003210:	431bde83 	.word	0x431bde83
 8003214:	10624dd3 	.word	0x10624dd3

08003218 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	607a      	str	r2, [r7, #4]
 8003222:	461a      	mov	r2, r3
 8003224:	460b      	mov	r3, r1
 8003226:	817b      	strh	r3, [r7, #10]
 8003228:	4613      	mov	r3, r2
 800322a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800322c:	f7ff fa64 	bl	80026f8 <HAL_GetTick>
 8003230:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b20      	cmp	r3, #32
 800323c:	f040 80e0 	bne.w	8003400 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	2319      	movs	r3, #25
 8003246:	2201      	movs	r2, #1
 8003248:	4970      	ldr	r1, [pc, #448]	@ (800340c <HAL_I2C_Master_Transmit+0x1f4>)
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fcb6 	bl	8003bbc <I2C_WaitOnFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003256:	2302      	movs	r3, #2
 8003258:	e0d3      	b.n	8003402 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_I2C_Master_Transmit+0x50>
 8003264:	2302      	movs	r3, #2
 8003266:	e0cc      	b.n	8003402 <HAL_I2C_Master_Transmit+0x1ea>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b01      	cmp	r3, #1
 800327c:	d007      	beq.n	800328e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0201 	orr.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800329c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2221      	movs	r2, #33	@ 0x21
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2210      	movs	r2, #16
 80032aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	893a      	ldrh	r2, [r7, #8]
 80032be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a50      	ldr	r2, [pc, #320]	@ (8003410 <HAL_I2C_Master_Transmit+0x1f8>)
 80032ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032d0:	8979      	ldrh	r1, [r7, #10]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	6a3a      	ldr	r2, [r7, #32]
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 fb20 	bl	800391c <I2C_MasterRequestWrite>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e08d      	b.n	8003402 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032fc:	e066      	b.n	80033cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	6a39      	ldr	r1, [r7, #32]
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fd74 	bl	8003df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00d      	beq.n	800332a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	2b04      	cmp	r3, #4
 8003314:	d107      	bne.n	8003326 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003324:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e06b      	b.n	8003402 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	781a      	ldrb	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b04      	cmp	r3, #4
 8003366:	d11b      	bne.n	80033a0 <HAL_I2C_Master_Transmit+0x188>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	d017      	beq.n	80033a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	6a39      	ldr	r1, [r7, #32]
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 fd6b 	bl	8003e80 <I2C_WaitOnBTFFlagUntilTimeout>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00d      	beq.n	80033cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d107      	bne.n	80033c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e01a      	b.n	8003402 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d194      	bne.n	80032fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e000      	b.n	8003402 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003400:	2302      	movs	r3, #2
  }
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	00100002 	.word	0x00100002
 8003410:	ffff0000 	.word	0xffff0000

08003414 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08c      	sub	sp, #48	@ 0x30
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	607a      	str	r2, [r7, #4]
 800341e:	461a      	mov	r2, r3
 8003420:	460b      	mov	r3, r1
 8003422:	817b      	strh	r3, [r7, #10]
 8003424:	4613      	mov	r3, r2
 8003426:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800342c:	f7ff f964 	bl	80026f8 <HAL_GetTick>
 8003430:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b20      	cmp	r3, #32
 800343c:	f040 824b 	bne.w	80038d6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	2319      	movs	r3, #25
 8003446:	2201      	movs	r2, #1
 8003448:	497f      	ldr	r1, [pc, #508]	@ (8003648 <HAL_I2C_Master_Receive+0x234>)
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fbb6 	bl	8003bbc <I2C_WaitOnFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003456:	2302      	movs	r3, #2
 8003458:	e23e      	b.n	80038d8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_I2C_Master_Receive+0x54>
 8003464:	2302      	movs	r3, #2
 8003466:	e237      	b.n	80038d8 <HAL_I2C_Master_Receive+0x4c4>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b01      	cmp	r3, #1
 800347c:	d007      	beq.n	800348e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0201 	orr.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800349c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2222      	movs	r2, #34	@ 0x22
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2210      	movs	r2, #16
 80034aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	893a      	ldrh	r2, [r7, #8]
 80034be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4a5f      	ldr	r2, [pc, #380]	@ (800364c <HAL_I2C_Master_Receive+0x238>)
 80034ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034d0:	8979      	ldrh	r1, [r7, #10]
 80034d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 faa2 	bl	8003a20 <I2C_MasterRequestRead>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e1f8      	b.n	80038d8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d113      	bne.n	8003516 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	61fb      	str	r3, [r7, #28]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	61fb      	str	r3, [r7, #28]
 8003502:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	e1cc      	b.n	80038b0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800351a:	2b01      	cmp	r3, #1
 800351c:	d11e      	bne.n	800355c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800352c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800352e:	b672      	cpsid	i
}
 8003530:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003532:	2300      	movs	r3, #0
 8003534:	61bb      	str	r3, [r7, #24]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	61bb      	str	r3, [r7, #24]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003556:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003558:	b662      	cpsie	i
}
 800355a:	e035      	b.n	80035c8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003560:	2b02      	cmp	r3, #2
 8003562:	d11e      	bne.n	80035a2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003572:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003574:	b672      	cpsid	i
}
 8003576:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800359c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800359e:	b662      	cpsie	i
}
 80035a0:	e012      	b.n	80035c8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b2:	2300      	movs	r3, #0
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80035c8:	e172      	b.n	80038b0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	f200 811f 	bhi.w	8003812 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d123      	bne.n	8003624 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 fc95 	bl	8003f10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e173      	b.n	80038d8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003622:	e145      	b.n	80038b0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003628:	2b02      	cmp	r3, #2
 800362a:	d152      	bne.n	80036d2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003632:	2200      	movs	r2, #0
 8003634:	4906      	ldr	r1, [pc, #24]	@ (8003650 <HAL_I2C_Master_Receive+0x23c>)
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fac0 	bl	8003bbc <I2C_WaitOnFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e148      	b.n	80038d8 <HAL_I2C_Master_Receive+0x4c4>
 8003646:	bf00      	nop
 8003648:	00100002 	.word	0x00100002
 800364c:	ffff0000 	.word	0xffff0000
 8003650:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003654:	b672      	cpsid	i
}
 8003656:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691a      	ldr	r2, [r3, #16]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800369a:	b662      	cpsie	i
}
 800369c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036d0:	e0ee      	b.n	80038b0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d8:	2200      	movs	r2, #0
 80036da:	4981      	ldr	r1, [pc, #516]	@ (80038e0 <HAL_I2C_Master_Receive+0x4cc>)
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 fa6d 	bl	8003bbc <I2C_WaitOnFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0f5      	b.n	80038d8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80036fc:	b672      	cpsid	i
}
 80036fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003732:	4b6c      	ldr	r3, [pc, #432]	@ (80038e4 <HAL_I2C_Master_Receive+0x4d0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	08db      	lsrs	r3, r3, #3
 8003738:	4a6b      	ldr	r2, [pc, #428]	@ (80038e8 <HAL_I2C_Master_Receive+0x4d4>)
 800373a:	fba2 2303 	umull	r2, r3, r2, r3
 800373e:	0a1a      	lsrs	r2, r3, #8
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	00da      	lsls	r2, r3, #3
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	3b01      	subs	r3, #1
 8003750:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d118      	bne.n	800378a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	f043 0220 	orr.w	r2, r3, #32
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800377a:	b662      	cpsie	i
}
 800377c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e0a6      	b.n	80038d8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b04      	cmp	r3, #4
 8003796:	d1d9      	bne.n	800374c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80037da:	b662      	cpsie	i
}
 80037dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003810:	e04e      	b.n	80038b0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003814:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 fb7a 	bl	8003f10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e058      	b.n	80038d8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b04      	cmp	r3, #4
 8003864:	d124      	bne.n	80038b0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386a:	2b03      	cmp	r3, #3
 800386c:	d107      	bne.n	800387e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800387c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f47f ae88 	bne.w	80035ca <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	e000      	b.n	80038d8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80038d6:	2302      	movs	r3, #2
  }
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3728      	adds	r7, #40	@ 0x28
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	00010004 	.word	0x00010004
 80038e4:	20000208 	.word	0x20000208
 80038e8:	14f8b589 	.word	0x14f8b589

080038ec <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038fa:	b2db      	uxtb	r3, r3
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr

08003906 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr

0800391c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	460b      	mov	r3, r1
 800392a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003930:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d006      	beq.n	8003946 <I2C_MasterRequestWrite+0x2a>
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d003      	beq.n	8003946 <I2C_MasterRequestWrite+0x2a>
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003944:	d108      	bne.n	8003958 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	e00b      	b.n	8003970 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395c:	2b12      	cmp	r3, #18
 800395e:	d107      	bne.n	8003970 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800396e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f91d 	bl	8003bbc <I2C_WaitOnFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00d      	beq.n	80039a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003996:	d103      	bne.n	80039a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800399e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e035      	b.n	8003a10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039ac:	d108      	bne.n	80039c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ae:	897b      	ldrh	r3, [r7, #10]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039bc:	611a      	str	r2, [r3, #16]
 80039be:	e01b      	b.n	80039f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039c0:	897b      	ldrh	r3, [r7, #10]
 80039c2:	11db      	asrs	r3, r3, #7
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f003 0306 	and.w	r3, r3, #6
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	f063 030f 	orn	r3, r3, #15
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	490e      	ldr	r1, [pc, #56]	@ (8003a18 <I2C_MasterRequestWrite+0xfc>)
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f966 	bl	8003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e010      	b.n	8003a10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039ee:	897b      	ldrh	r3, [r7, #10]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	4907      	ldr	r1, [pc, #28]	@ (8003a1c <I2C_MasterRequestWrite+0x100>)
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f956 	bl	8003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	00010008 	.word	0x00010008
 8003a1c:	00010002 	.word	0x00010002

08003a20 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	607a      	str	r2, [r7, #4]
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a34:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a44:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d006      	beq.n	8003a5a <I2C_MasterRequestRead+0x3a>
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d003      	beq.n	8003a5a <I2C_MasterRequestRead+0x3a>
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a58:	d108      	bne.n	8003a6c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	e00b      	b.n	8003a84 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a70:	2b11      	cmp	r3, #17
 8003a72:	d107      	bne.n	8003a84 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f893 	bl	8003bbc <I2C_WaitOnFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00d      	beq.n	8003ab8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aaa:	d103      	bne.n	8003ab4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ab2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e079      	b.n	8003bac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ac0:	d108      	bne.n	8003ad4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ac2:	897b      	ldrh	r3, [r7, #10]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	611a      	str	r2, [r3, #16]
 8003ad2:	e05f      	b.n	8003b94 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ad4:	897b      	ldrh	r3, [r7, #10]
 8003ad6:	11db      	asrs	r3, r3, #7
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	f003 0306 	and.w	r3, r3, #6
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	f063 030f 	orn	r3, r3, #15
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	4930      	ldr	r1, [pc, #192]	@ (8003bb4 <I2C_MasterRequestRead+0x194>)
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f8dc 	bl	8003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e054      	b.n	8003bac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b02:	897b      	ldrh	r3, [r7, #10]
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	4929      	ldr	r1, [pc, #164]	@ (8003bb8 <I2C_MasterRequestRead+0x198>)
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f8cc 	bl	8003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e044      	b.n	8003bac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b22:	2300      	movs	r3, #0
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b46:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f831 	bl	8003bbc <I2C_WaitOnFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00d      	beq.n	8003b7c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b6e:	d103      	bne.n	8003b78 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b76:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e017      	b.n	8003bac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003b7c:	897b      	ldrh	r3, [r7, #10]
 8003b7e:	11db      	asrs	r3, r3, #7
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	f003 0306 	and.w	r3, r3, #6
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	f063 030e 	orn	r3, r3, #14
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	4907      	ldr	r1, [pc, #28]	@ (8003bb8 <I2C_MasterRequestRead+0x198>)
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f888 	bl	8003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	00010008 	.word	0x00010008
 8003bb8:	00010002 	.word	0x00010002

08003bbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bcc:	e048      	b.n	8003c60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd4:	d044      	beq.n	8003c60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd6:	f7fe fd8f 	bl	80026f8 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d302      	bcc.n	8003bec <I2C_WaitOnFlagUntilTimeout+0x30>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d139      	bne.n	8003c60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	0c1b      	lsrs	r3, r3, #16
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d10d      	bne.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	43da      	mvns	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4013      	ands	r3, r2
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf0c      	ite	eq
 8003c08:	2301      	moveq	r3, #1
 8003c0a:	2300      	movne	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	e00c      	b.n	8003c2c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	43da      	mvns	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d116      	bne.n	8003c60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4c:	f043 0220 	orr.w	r2, r3, #32
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e023      	b.n	8003ca8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	0c1b      	lsrs	r3, r3, #16
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d10d      	bne.n	8003c86 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	43da      	mvns	r2, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	4013      	ands	r3, r2
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	bf0c      	ite	eq
 8003c7c:	2301      	moveq	r3, #1
 8003c7e:	2300      	movne	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	461a      	mov	r2, r3
 8003c84:	e00c      	b.n	8003ca0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	43da      	mvns	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	4013      	ands	r3, r2
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d093      	beq.n	8003bce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cbe:	e071      	b.n	8003da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cce:	d123      	bne.n	8003d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cde:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ce8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d04:	f043 0204 	orr.w	r2, r3, #4
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e067      	b.n	8003de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1e:	d041      	beq.n	8003da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d20:	f7fe fcea 	bl	80026f8 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d302      	bcc.n	8003d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d136      	bne.n	8003da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	0c1b      	lsrs	r3, r3, #16
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d10c      	bne.n	8003d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	43da      	mvns	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	bf14      	ite	ne
 8003d52:	2301      	movne	r3, #1
 8003d54:	2300      	moveq	r3, #0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	e00b      	b.n	8003d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	43da      	mvns	r2, r3
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	4013      	ands	r3, r2
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	bf14      	ite	ne
 8003d6c:	2301      	movne	r3, #1
 8003d6e:	2300      	moveq	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d016      	beq.n	8003da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d90:	f043 0220 	orr.w	r2, r3, #32
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e021      	b.n	8003de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	0c1b      	lsrs	r3, r3, #16
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d10c      	bne.n	8003dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	43da      	mvns	r2, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4013      	ands	r3, r2
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bf14      	ite	ne
 8003dc0:	2301      	movne	r3, #1
 8003dc2:	2300      	moveq	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	e00b      	b.n	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	43da      	mvns	r2, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	bf14      	ite	ne
 8003dda:	2301      	movne	r3, #1
 8003ddc:	2300      	moveq	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f47f af6d 	bne.w	8003cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dfc:	e034      	b.n	8003e68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f8e3 	bl	8003fca <I2C_IsAcknowledgeFailed>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e034      	b.n	8003e78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e14:	d028      	beq.n	8003e68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e16:	f7fe fc6f 	bl	80026f8 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d302      	bcc.n	8003e2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d11d      	bne.n	8003e68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e36:	2b80      	cmp	r3, #128	@ 0x80
 8003e38:	d016      	beq.n	8003e68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e54:	f043 0220 	orr.w	r2, r3, #32
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e007      	b.n	8003e78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e72:	2b80      	cmp	r3, #128	@ 0x80
 8003e74:	d1c3      	bne.n	8003dfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e8c:	e034      	b.n	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f89b 	bl	8003fca <I2C_IsAcknowledgeFailed>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e034      	b.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea4:	d028      	beq.n	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea6:	f7fe fc27 	bl	80026f8 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d302      	bcc.n	8003ebc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d11d      	bne.n	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d016      	beq.n	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee4:	f043 0220 	orr.w	r2, r3, #32
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e007      	b.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d1c3      	bne.n	8003e8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f1c:	e049      	b.n	8003fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	f003 0310 	and.w	r3, r3, #16
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d119      	bne.n	8003f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f06f 0210 	mvn.w	r2, #16
 8003f34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e030      	b.n	8003fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f60:	f7fe fbca 	bl	80026f8 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d302      	bcc.n	8003f76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d11d      	bne.n	8003fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f80:	2b40      	cmp	r3, #64	@ 0x40
 8003f82:	d016      	beq.n	8003fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	f043 0220 	orr.w	r2, r3, #32
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e007      	b.n	8003fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbc:	2b40      	cmp	r3, #64	@ 0x40
 8003fbe:	d1ae      	bne.n	8003f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fe0:	d11b      	bne.n	800401a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	f043 0204 	orr.w	r2, r3, #4
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr
	...

08004028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e272      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 8087 	beq.w	8004156 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004048:	4b92      	ldr	r3, [pc, #584]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b04      	cmp	r3, #4
 8004052:	d00c      	beq.n	800406e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004054:	4b8f      	ldr	r3, [pc, #572]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 030c 	and.w	r3, r3, #12
 800405c:	2b08      	cmp	r3, #8
 800405e:	d112      	bne.n	8004086 <HAL_RCC_OscConfig+0x5e>
 8004060:	4b8c      	ldr	r3, [pc, #560]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800406c:	d10b      	bne.n	8004086 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800406e:	4b89      	ldr	r3, [pc, #548]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d06c      	beq.n	8004154 <HAL_RCC_OscConfig+0x12c>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d168      	bne.n	8004154 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e24c      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800408e:	d106      	bne.n	800409e <HAL_RCC_OscConfig+0x76>
 8004090:	4b80      	ldr	r3, [pc, #512]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a7f      	ldr	r2, [pc, #508]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	e02e      	b.n	80040fc <HAL_RCC_OscConfig+0xd4>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x98>
 80040a6:	4b7b      	ldr	r3, [pc, #492]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a7a      	ldr	r2, [pc, #488]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	4b78      	ldr	r3, [pc, #480]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a77      	ldr	r2, [pc, #476]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e01d      	b.n	80040fc <HAL_RCC_OscConfig+0xd4>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCC_OscConfig+0xbc>
 80040ca:	4b72      	ldr	r3, [pc, #456]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a71      	ldr	r2, [pc, #452]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	4b6f      	ldr	r3, [pc, #444]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a6e      	ldr	r2, [pc, #440]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	e00b      	b.n	80040fc <HAL_RCC_OscConfig+0xd4>
 80040e4:	4b6b      	ldr	r3, [pc, #428]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a6a      	ldr	r2, [pc, #424]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	4b68      	ldr	r3, [pc, #416]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a67      	ldr	r2, [pc, #412]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80040f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d013      	beq.n	800412c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004104:	f7fe faf8 	bl	80026f8 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800410c:	f7fe faf4 	bl	80026f8 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b64      	cmp	r3, #100	@ 0x64
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e200      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411e:	4b5d      	ldr	r3, [pc, #372]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0xe4>
 800412a:	e014      	b.n	8004156 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412c:	f7fe fae4 	bl	80026f8 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004134:	f7fe fae0 	bl	80026f8 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b64      	cmp	r3, #100	@ 0x64
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e1ec      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004146:	4b53      	ldr	r3, [pc, #332]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0x10c>
 8004152:	e000      	b.n	8004156 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d063      	beq.n	800422a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004162:	4b4c      	ldr	r3, [pc, #304]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00b      	beq.n	8004186 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800416e:	4b49      	ldr	r3, [pc, #292]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f003 030c 	and.w	r3, r3, #12
 8004176:	2b08      	cmp	r3, #8
 8004178:	d11c      	bne.n	80041b4 <HAL_RCC_OscConfig+0x18c>
 800417a:	4b46      	ldr	r3, [pc, #280]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d116      	bne.n	80041b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004186:	4b43      	ldr	r3, [pc, #268]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <HAL_RCC_OscConfig+0x176>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d001      	beq.n	800419e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e1c0      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419e:	4b3d      	ldr	r3, [pc, #244]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4939      	ldr	r1, [pc, #228]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b2:	e03a      	b.n	800422a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d020      	beq.n	80041fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041bc:	4b36      	ldr	r3, [pc, #216]	@ (8004298 <HAL_RCC_OscConfig+0x270>)
 80041be:	2201      	movs	r2, #1
 80041c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c2:	f7fe fa99 	bl	80026f8 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ca:	f7fe fa95 	bl	80026f8 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e1a1      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041dc:	4b2d      	ldr	r3, [pc, #180]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0f0      	beq.n	80041ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	4927      	ldr	r1, [pc, #156]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	600b      	str	r3, [r1, #0]
 80041fc:	e015      	b.n	800422a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041fe:	4b26      	ldr	r3, [pc, #152]	@ (8004298 <HAL_RCC_OscConfig+0x270>)
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004204:	f7fe fa78 	bl	80026f8 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800420c:	f7fe fa74 	bl	80026f8 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e180      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421e:	4b1d      	ldr	r3, [pc, #116]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d03a      	beq.n	80042ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d019      	beq.n	8004272 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800423e:	4b17      	ldr	r3, [pc, #92]	@ (800429c <HAL_RCC_OscConfig+0x274>)
 8004240:	2201      	movs	r2, #1
 8004242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004244:	f7fe fa58 	bl	80026f8 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800424c:	f7fe fa54 	bl	80026f8 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e160      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425e:	4b0d      	ldr	r3, [pc, #52]	@ (8004294 <HAL_RCC_OscConfig+0x26c>)
 8004260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0f0      	beq.n	800424c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800426a:	2001      	movs	r0, #1
 800426c:	f000 face 	bl	800480c <RCC_Delay>
 8004270:	e01c      	b.n	80042ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004272:	4b0a      	ldr	r3, [pc, #40]	@ (800429c <HAL_RCC_OscConfig+0x274>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004278:	f7fe fa3e 	bl	80026f8 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800427e:	e00f      	b.n	80042a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004280:	f7fe fa3a 	bl	80026f8 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d908      	bls.n	80042a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e146      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
 8004292:	bf00      	nop
 8004294:	40021000 	.word	0x40021000
 8004298:	42420000 	.word	0x42420000
 800429c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a0:	4b92      	ldr	r3, [pc, #584]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e9      	bne.n	8004280 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 80a6 	beq.w	8004406 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ba:	2300      	movs	r3, #0
 80042bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042be:	4b8b      	ldr	r3, [pc, #556]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10d      	bne.n	80042e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ca:	4b88      	ldr	r3, [pc, #544]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	4a87      	ldr	r2, [pc, #540]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 80042d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042d4:	61d3      	str	r3, [r2, #28]
 80042d6:	4b85      	ldr	r3, [pc, #532]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042de:	60bb      	str	r3, [r7, #8]
 80042e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042e2:	2301      	movs	r3, #1
 80042e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e6:	4b82      	ldr	r3, [pc, #520]	@ (80044f0 <HAL_RCC_OscConfig+0x4c8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d118      	bne.n	8004324 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042f2:	4b7f      	ldr	r3, [pc, #508]	@ (80044f0 <HAL_RCC_OscConfig+0x4c8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a7e      	ldr	r2, [pc, #504]	@ (80044f0 <HAL_RCC_OscConfig+0x4c8>)
 80042f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042fe:	f7fe f9fb 	bl	80026f8 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004306:	f7fe f9f7 	bl	80026f8 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b64      	cmp	r3, #100	@ 0x64
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e103      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004318:	4b75      	ldr	r3, [pc, #468]	@ (80044f0 <HAL_RCC_OscConfig+0x4c8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f0      	beq.n	8004306 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d106      	bne.n	800433a <HAL_RCC_OscConfig+0x312>
 800432c:	4b6f      	ldr	r3, [pc, #444]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	4a6e      	ldr	r2, [pc, #440]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	6213      	str	r3, [r2, #32]
 8004338:	e02d      	b.n	8004396 <HAL_RCC_OscConfig+0x36e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10c      	bne.n	800435c <HAL_RCC_OscConfig+0x334>
 8004342:	4b6a      	ldr	r3, [pc, #424]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	4a69      	ldr	r2, [pc, #420]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004348:	f023 0301 	bic.w	r3, r3, #1
 800434c:	6213      	str	r3, [r2, #32]
 800434e:	4b67      	ldr	r3, [pc, #412]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	4a66      	ldr	r2, [pc, #408]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004354:	f023 0304 	bic.w	r3, r3, #4
 8004358:	6213      	str	r3, [r2, #32]
 800435a:	e01c      	b.n	8004396 <HAL_RCC_OscConfig+0x36e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	2b05      	cmp	r3, #5
 8004362:	d10c      	bne.n	800437e <HAL_RCC_OscConfig+0x356>
 8004364:	4b61      	ldr	r3, [pc, #388]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	4a60      	ldr	r2, [pc, #384]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 800436a:	f043 0304 	orr.w	r3, r3, #4
 800436e:	6213      	str	r3, [r2, #32]
 8004370:	4b5e      	ldr	r3, [pc, #376]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	4a5d      	ldr	r2, [pc, #372]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	6213      	str	r3, [r2, #32]
 800437c:	e00b      	b.n	8004396 <HAL_RCC_OscConfig+0x36e>
 800437e:	4b5b      	ldr	r3, [pc, #364]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	4a5a      	ldr	r2, [pc, #360]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	6213      	str	r3, [r2, #32]
 800438a:	4b58      	ldr	r3, [pc, #352]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	4a57      	ldr	r2, [pc, #348]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004390:	f023 0304 	bic.w	r3, r3, #4
 8004394:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d015      	beq.n	80043ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800439e:	f7fe f9ab 	bl	80026f8 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a4:	e00a      	b.n	80043bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a6:	f7fe f9a7 	bl	80026f8 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e0b1      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043bc:	4b4b      	ldr	r3, [pc, #300]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0ee      	beq.n	80043a6 <HAL_RCC_OscConfig+0x37e>
 80043c8:	e014      	b.n	80043f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ca:	f7fe f995 	bl	80026f8 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043d0:	e00a      	b.n	80043e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d2:	f7fe f991 	bl	80026f8 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e09b      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e8:	4b40      	ldr	r3, [pc, #256]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1ee      	bne.n	80043d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043f4:	7dfb      	ldrb	r3, [r7, #23]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d105      	bne.n	8004406 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043fa:	4b3c      	ldr	r3, [pc, #240]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	4a3b      	ldr	r2, [pc, #236]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004400:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004404:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 8087 	beq.w	800451e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004410:	4b36      	ldr	r3, [pc, #216]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 030c 	and.w	r3, r3, #12
 8004418:	2b08      	cmp	r3, #8
 800441a:	d061      	beq.n	80044e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d146      	bne.n	80044b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004424:	4b33      	ldr	r3, [pc, #204]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442a:	f7fe f965 	bl	80026f8 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004432:	f7fe f961 	bl	80026f8 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e06d      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004444:	4b29      	ldr	r3, [pc, #164]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f0      	bne.n	8004432 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004458:	d108      	bne.n	800446c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800445a:	4b24      	ldr	r3, [pc, #144]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	4921      	ldr	r1, [pc, #132]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004468:	4313      	orrs	r3, r2
 800446a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800446c:	4b1f      	ldr	r3, [pc, #124]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a19      	ldr	r1, [r3, #32]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447c:	430b      	orrs	r3, r1
 800447e:	491b      	ldr	r1, [pc, #108]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 8004480:	4313      	orrs	r3, r2
 8004482:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004484:	4b1b      	ldr	r3, [pc, #108]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 8004486:	2201      	movs	r2, #1
 8004488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448a:	f7fe f935 	bl	80026f8 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004492:	f7fe f931 	bl	80026f8 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e03d      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044a4:	4b11      	ldr	r3, [pc, #68]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0f0      	beq.n	8004492 <HAL_RCC_OscConfig+0x46a>
 80044b0:	e035      	b.n	800451e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b2:	4b10      	ldr	r3, [pc, #64]	@ (80044f4 <HAL_RCC_OscConfig+0x4cc>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b8:	f7fe f91e 	bl	80026f8 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c0:	f7fe f91a 	bl	80026f8 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e026      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044d2:	4b06      	ldr	r3, [pc, #24]	@ (80044ec <HAL_RCC_OscConfig+0x4c4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f0      	bne.n	80044c0 <HAL_RCC_OscConfig+0x498>
 80044de:	e01e      	b.n	800451e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d107      	bne.n	80044f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e019      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40007000 	.word	0x40007000
 80044f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004528 <HAL_RCC_OscConfig+0x500>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	429a      	cmp	r2, r3
 800450a:	d106      	bne.n	800451a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004516:	429a      	cmp	r2, r3
 8004518:	d001      	beq.n	800451e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40021000 	.word	0x40021000

0800452c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0d0      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004540:	4b6a      	ldr	r3, [pc, #424]	@ (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d910      	bls.n	8004570 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b67      	ldr	r3, [pc, #412]	@ (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 0207 	bic.w	r2, r3, #7
 8004556:	4965      	ldr	r1, [pc, #404]	@ (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800455e:	4b63      	ldr	r3, [pc, #396]	@ (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d001      	beq.n	8004570 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0b8      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d020      	beq.n	80045be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004588:	4b59      	ldr	r3, [pc, #356]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	4a58      	ldr	r2, [pc, #352]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 800458e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004592:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045a0:	4b53      	ldr	r3, [pc, #332]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	4a52      	ldr	r2, [pc, #328]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045a6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80045aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ac:	4b50      	ldr	r3, [pc, #320]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	494d      	ldr	r1, [pc, #308]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d040      	beq.n	800464c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d107      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	4b47      	ldr	r3, [pc, #284]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d115      	bne.n	800460a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e07f      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d107      	bne.n	80045fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ea:	4b41      	ldr	r3, [pc, #260]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d109      	bne.n	800460a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e073      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fa:	4b3d      	ldr	r3, [pc, #244]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e06b      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800460a:	4b39      	ldr	r3, [pc, #228]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f023 0203 	bic.w	r2, r3, #3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	4936      	ldr	r1, [pc, #216]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004618:	4313      	orrs	r3, r2
 800461a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800461c:	f7fe f86c 	bl	80026f8 <HAL_GetTick>
 8004620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004622:	e00a      	b.n	800463a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004624:	f7fe f868 	bl	80026f8 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e053      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463a:	4b2d      	ldr	r3, [pc, #180]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f003 020c 	and.w	r2, r3, #12
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	429a      	cmp	r2, r3
 800464a:	d1eb      	bne.n	8004624 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800464c:	4b27      	ldr	r3, [pc, #156]	@ (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d210      	bcs.n	800467c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465a:	4b24      	ldr	r3, [pc, #144]	@ (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f023 0207 	bic.w	r2, r3, #7
 8004662:	4922      	ldr	r1, [pc, #136]	@ (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	4313      	orrs	r3, r2
 8004668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800466a:	4b20      	ldr	r3, [pc, #128]	@ (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d001      	beq.n	800467c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e032      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004688:	4b19      	ldr	r3, [pc, #100]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	4916      	ldr	r1, [pc, #88]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004696:	4313      	orrs	r3, r2
 8004698:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d009      	beq.n	80046ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046a6:	4b12      	ldr	r3, [pc, #72]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	490e      	ldr	r1, [pc, #56]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ba:	f000 f821 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 80046be:	4602      	mov	r2, r0
 80046c0:	4b0b      	ldr	r3, [pc, #44]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	091b      	lsrs	r3, r3, #4
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	490a      	ldr	r1, [pc, #40]	@ (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 80046cc:	5ccb      	ldrb	r3, [r1, r3]
 80046ce:	fa22 f303 	lsr.w	r3, r2, r3
 80046d2:	4a09      	ldr	r2, [pc, #36]	@ (80046f8 <HAL_RCC_ClockConfig+0x1cc>)
 80046d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046d6:	4b09      	ldr	r3, [pc, #36]	@ (80046fc <HAL_RCC_ClockConfig+0x1d0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fd ffca 	bl	8002674 <HAL_InitTick>

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40022000 	.word	0x40022000
 80046f0:	40021000 	.word	0x40021000
 80046f4:	08005ff0 	.word	0x08005ff0
 80046f8:	20000208 	.word	0x20000208
 80046fc:	2000020c 	.word	0x2000020c

08004700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	2300      	movs	r3, #0
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	2300      	movs	r3, #0
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	2300      	movs	r3, #0
 8004714:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800471a:	4b1e      	ldr	r3, [pc, #120]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x94>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 030c 	and.w	r3, r3, #12
 8004726:	2b04      	cmp	r3, #4
 8004728:	d002      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0x30>
 800472a:	2b08      	cmp	r3, #8
 800472c:	d003      	beq.n	8004736 <HAL_RCC_GetSysClockFreq+0x36>
 800472e:	e027      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004730:	4b19      	ldr	r3, [pc, #100]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x98>)
 8004732:	613b      	str	r3, [r7, #16]
      break;
 8004734:	e027      	b.n	8004786 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	0c9b      	lsrs	r3, r3, #18
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	4a17      	ldr	r2, [pc, #92]	@ (800479c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004740:	5cd3      	ldrb	r3, [r2, r3]
 8004742:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d010      	beq.n	8004770 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800474e:	4b11      	ldr	r3, [pc, #68]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x94>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	0c5b      	lsrs	r3, r3, #17
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	4a11      	ldr	r2, [pc, #68]	@ (80047a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800475a:	5cd3      	ldrb	r3, [r2, r3]
 800475c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a0d      	ldr	r2, [pc, #52]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x98>)
 8004762:	fb03 f202 	mul.w	r2, r3, r2
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	e004      	b.n	800477a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a0c      	ldr	r2, [pc, #48]	@ (80047a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004774:	fb02 f303 	mul.w	r3, r2, r3
 8004778:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	613b      	str	r3, [r7, #16]
      break;
 800477e:	e002      	b.n	8004786 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004780:	4b05      	ldr	r3, [pc, #20]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x98>)
 8004782:	613b      	str	r3, [r7, #16]
      break;
 8004784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004786:	693b      	ldr	r3, [r7, #16]
}
 8004788:	4618      	mov	r0, r3
 800478a:	371c      	adds	r7, #28
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40021000 	.word	0x40021000
 8004798:	007a1200 	.word	0x007a1200
 800479c:	08006008 	.word	0x08006008
 80047a0:	08006018 	.word	0x08006018
 80047a4:	003d0900 	.word	0x003d0900

080047a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047ac:	4b02      	ldr	r3, [pc, #8]	@ (80047b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80047ae:	681b      	ldr	r3, [r3, #0]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr
 80047b8:	20000208 	.word	0x20000208

080047bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047c0:	f7ff fff2 	bl	80047a8 <HAL_RCC_GetHCLKFreq>
 80047c4:	4602      	mov	r2, r0
 80047c6:	4b05      	ldr	r3, [pc, #20]	@ (80047dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	0a1b      	lsrs	r3, r3, #8
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	4903      	ldr	r1, [pc, #12]	@ (80047e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047d2:	5ccb      	ldrb	r3, [r1, r3]
 80047d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d8:	4618      	mov	r0, r3
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40021000 	.word	0x40021000
 80047e0:	08006000 	.word	0x08006000

080047e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047e8:	f7ff ffde 	bl	80047a8 <HAL_RCC_GetHCLKFreq>
 80047ec:	4602      	mov	r2, r0
 80047ee:	4b05      	ldr	r3, [pc, #20]	@ (8004804 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	0adb      	lsrs	r3, r3, #11
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	4903      	ldr	r1, [pc, #12]	@ (8004808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047fa:	5ccb      	ldrb	r3, [r1, r3]
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004800:	4618      	mov	r0, r3
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40021000 	.word	0x40021000
 8004808:	08006000 	.word	0x08006000

0800480c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004814:	4b0a      	ldr	r3, [pc, #40]	@ (8004840 <RCC_Delay+0x34>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a0a      	ldr	r2, [pc, #40]	@ (8004844 <RCC_Delay+0x38>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	0a5b      	lsrs	r3, r3, #9
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004828:	bf00      	nop
  }
  while (Delay --);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1e5a      	subs	r2, r3, #1
 800482e:	60fa      	str	r2, [r7, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f9      	bne.n	8004828 <RCC_Delay+0x1c>
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr
 8004840:	20000208 	.word	0x20000208
 8004844:	10624dd3 	.word	0x10624dd3

08004848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e042      	b.n	80048e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fd fd1c 	bl	80022ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2224      	movs	r2, #36	@ 0x24
 8004878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800488a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 fdb7 	bl	8005400 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	691a      	ldr	r2, [r3, #16]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695a      	ldr	r2, [r3, #20]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08a      	sub	sp, #40	@ 0x28
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	4613      	mov	r3, r2
 80048f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b20      	cmp	r3, #32
 8004906:	d175      	bne.n	80049f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_UART_Transmit+0x2c>
 800490e:	88fb      	ldrh	r3, [r7, #6]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e06e      	b.n	80049f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2221      	movs	r2, #33	@ 0x21
 8004922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004926:	f7fd fee7 	bl	80026f8 <HAL_GetTick>
 800492a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	88fa      	ldrh	r2, [r7, #6]
 8004930:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	88fa      	ldrh	r2, [r7, #6]
 8004936:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004940:	d108      	bne.n	8004954 <HAL_UART_Transmit+0x6c>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d104      	bne.n	8004954 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800494a:	2300      	movs	r3, #0
 800494c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	61bb      	str	r3, [r7, #24]
 8004952:	e003      	b.n	800495c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004958:	2300      	movs	r3, #0
 800495a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800495c:	e02e      	b.n	80049bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2200      	movs	r2, #0
 8004966:	2180      	movs	r1, #128	@ 0x80
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 fb1c 	bl	8004fa6 <UART_WaitOnFlagUntilTimeout>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e03a      	b.n	80049f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10b      	bne.n	800499e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004994:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	3302      	adds	r3, #2
 800499a:	61bb      	str	r3, [r7, #24]
 800499c:	e007      	b.n	80049ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	781a      	ldrb	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	3301      	adds	r3, #1
 80049ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1cb      	bne.n	800495e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2200      	movs	r2, #0
 80049ce:	2140      	movs	r1, #64	@ 0x40
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 fae8 	bl	8004fa6 <UART_WaitOnFlagUntilTimeout>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e006      	b.n	80049f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	e000      	b.n	80049f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80049f4:	2302      	movs	r3, #2
  }
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3720      	adds	r7, #32
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b084      	sub	sp, #16
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	d112      	bne.n	8004a3e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <HAL_UART_Receive_IT+0x26>
 8004a1e:	88fb      	ldrh	r3, [r7, #6]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e00b      	b.n	8004a40 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a2e:	88fb      	ldrh	r3, [r7, #6]
 8004a30:	461a      	mov	r2, r3
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 fb0f 	bl	8005058 <UART_Start_Receive_IT>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	e000      	b.n	8004a40 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004a3e:	2302      	movs	r3, #2
  }
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b0ba      	sub	sp, #232	@ 0xe8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10f      	bne.n	8004aae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d009      	beq.n	8004aae <HAL_UART_IRQHandler+0x66>
 8004a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fbec 	bl	8005284 <UART_Receive_IT>
      return;
 8004aac:	e25b      	b.n	8004f66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004aae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 80de 	beq.w	8004c74 <HAL_UART_IRQHandler+0x22c>
 8004ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 80d1 	beq.w	8004c74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00b      	beq.n	8004af6 <HAL_UART_IRQHandler+0xae>
 8004ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d005      	beq.n	8004af6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aee:	f043 0201 	orr.w	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <HAL_UART_IRQHandler+0xd2>
 8004b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b12:	f043 0202 	orr.w	r2, r3, #2
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00b      	beq.n	8004b3e <HAL_UART_IRQHandler+0xf6>
 8004b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b36:	f043 0204 	orr.w	r2, r3, #4
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d011      	beq.n	8004b6e <HAL_UART_IRQHandler+0x126>
 8004b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b4e:	f003 0320 	and.w	r3, r3, #32
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d105      	bne.n	8004b62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d005      	beq.n	8004b6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b66:	f043 0208 	orr.w	r2, r3, #8
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 81f2 	beq.w	8004f5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <HAL_UART_IRQHandler+0x14e>
 8004b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fb77 	bl	8005284 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bf14      	ite	ne
 8004ba4:	2301      	movne	r3, #1
 8004ba6:	2300      	moveq	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d103      	bne.n	8004bc2 <HAL_UART_IRQHandler+0x17a>
 8004bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d04f      	beq.n	8004c62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa81 	bl	80050ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d041      	beq.n	8004c5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3314      	adds	r3, #20
 8004bdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3314      	adds	r3, #20
 8004bfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1d9      	bne.n	8004bd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d013      	beq.n	8004c52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e28 <HAL_UART_IRQHandler+0x3e0>)
 8004c30:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fd fed4 	bl	80029e4 <HAL_DMA_Abort_IT>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d016      	beq.n	8004c70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c50:	e00e      	b.n	8004c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f993 	bl	8004f7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c58:	e00a      	b.n	8004c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f98f 	bl	8004f7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c60:	e006      	b.n	8004c70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f98b 	bl	8004f7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004c6e:	e175      	b.n	8004f5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c70:	bf00      	nop
    return;
 8004c72:	e173      	b.n	8004f5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	f040 814f 	bne.w	8004f1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c82:	f003 0310 	and.w	r3, r3, #16
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 8148 	beq.w	8004f1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8141 	beq.w	8004f1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 80b6 	beq.w	8004e2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ccc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8145 	beq.w	8004f60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	f080 813e 	bcs.w	8004f60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	f000 8088 	beq.w	8004e08 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	330c      	adds	r3, #12
 8004d20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004d24:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d30:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1d9      	bne.n	8004cf8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3314      	adds	r3, #20
 8004d4a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d4e:	e853 3f00 	ldrex	r3, [r3]
 8004d52:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d56:	f023 0301 	bic.w	r3, r3, #1
 8004d5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3314      	adds	r3, #20
 8004d64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d68:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d70:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d74:	e841 2300 	strex	r3, r2, [r1]
 8004d78:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1e1      	bne.n	8004d44 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3314      	adds	r3, #20
 8004d86:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d8a:	e853 3f00 	ldrex	r3, [r3]
 8004d8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3314      	adds	r3, #20
 8004da0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004da4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004da6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004daa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004dac:	e841 2300 	strex	r3, r2, [r1]
 8004db0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004db2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e3      	bne.n	8004d80 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	330c      	adds	r3, #12
 8004dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004dd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dd8:	f023 0310 	bic.w	r3, r3, #16
 8004ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	330c      	adds	r3, #12
 8004de6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004dea:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004dec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004df0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004df2:	e841 2300 	strex	r3, r2, [r1]
 8004df6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004df8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1e3      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fd fdb3 	bl	800296e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f8b6 	bl	8004f90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e24:	e09c      	b.n	8004f60 <HAL_UART_IRQHandler+0x518>
 8004e26:	bf00      	nop
 8004e28:	0800518f 	.word	0x0800518f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 808e 	beq.w	8004f64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 8089 	beq.w	8004f64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	330c      	adds	r3, #12
 8004e58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	330c      	adds	r3, #12
 8004e72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e76:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e3      	bne.n	8004e52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3314      	adds	r3, #20
 8004e90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	623b      	str	r3, [r7, #32]
   return(result);
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3314      	adds	r3, #20
 8004eaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004eae:	633a      	str	r2, [r7, #48]	@ 0x30
 8004eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004eb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e3      	bne.n	8004e8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	330c      	adds	r3, #12
 8004ed6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	e853 3f00 	ldrex	r3, [r3]
 8004ede:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 0310 	bic.w	r3, r3, #16
 8004ee6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	330c      	adds	r3, #12
 8004ef0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ef4:	61fa      	str	r2, [r7, #28]
 8004ef6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef8:	69b9      	ldr	r1, [r7, #24]
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	e841 2300 	strex	r3, r2, [r1]
 8004f00:	617b      	str	r3, [r7, #20]
   return(result);
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1e3      	bne.n	8004ed0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f12:	4619      	mov	r1, r3
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f83b 	bl	8004f90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f1a:	e023      	b.n	8004f64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d009      	beq.n	8004f3c <HAL_UART_IRQHandler+0x4f4>
 8004f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f93e 	bl	80051b6 <UART_Transmit_IT>
    return;
 8004f3a:	e014      	b.n	8004f66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00e      	beq.n	8004f66 <HAL_UART_IRQHandler+0x51e>
 8004f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d008      	beq.n	8004f66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f97d 	bl	8005254 <UART_EndTransmit_IT>
    return;
 8004f5a:	e004      	b.n	8004f66 <HAL_UART_IRQHandler+0x51e>
    return;
 8004f5c:	bf00      	nop
 8004f5e:	e002      	b.n	8004f66 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f60:	bf00      	nop
 8004f62:	e000      	b.n	8004f66 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f64:	bf00      	nop
  }
}
 8004f66:	37e8      	adds	r7, #232	@ 0xe8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc80      	pop	{r7}
 8004f7c:	4770      	bx	lr

08004f7e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr

08004f90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bc80      	pop	{r7}
 8004fa4:	4770      	bx	lr

08004fa6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b086      	sub	sp, #24
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	603b      	str	r3, [r7, #0]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb6:	e03b      	b.n	8005030 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbe:	d037      	beq.n	8005030 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc0:	f7fd fb9a 	bl	80026f8 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	6a3a      	ldr	r2, [r7, #32]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d302      	bcc.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e03a      	b.n	8005050 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d023      	beq.n	8005030 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b80      	cmp	r3, #128	@ 0x80
 8004fec:	d020      	beq.n	8005030 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b40      	cmp	r3, #64	@ 0x40
 8004ff2:	d01d      	beq.n	8005030 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d116      	bne.n	8005030 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005002:	2300      	movs	r3, #0
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 f856 	bl	80050ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2208      	movs	r2, #8
 8005022:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e00f      	b.n	8005050 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4013      	ands	r3, r2
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	429a      	cmp	r2, r3
 800503e:	bf0c      	ite	eq
 8005040:	2301      	moveq	r3, #1
 8005042:	2300      	movne	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	461a      	mov	r2, r3
 8005048:	79fb      	ldrb	r3, [r7, #7]
 800504a:	429a      	cmp	r2, r3
 800504c:	d0b4      	beq.n	8004fb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	4613      	mov	r3, r2
 8005064:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	88fa      	ldrh	r2, [r7, #6]
 8005070:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	88fa      	ldrh	r2, [r7, #6]
 8005076:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2222      	movs	r2, #34	@ 0x22
 8005082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d007      	beq.n	800509e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800509c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695a      	ldr	r2, [r3, #20]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f042 0201 	orr.w	r2, r2, #1
 80050ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f042 0220 	orr.w	r2, r2, #32
 80050bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr

080050ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b095      	sub	sp, #84	@ 0x54
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	330c      	adds	r3, #12
 80050d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	330c      	adds	r3, #12
 80050f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80050f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e5      	bne.n	80050d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3314      	adds	r3, #20
 800510c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	e853 3f00 	ldrex	r3, [r3]
 8005114:	61fb      	str	r3, [r7, #28]
   return(result);
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	f023 0301 	bic.w	r3, r3, #1
 800511c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3314      	adds	r3, #20
 8005124:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005126:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005128:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800512c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e5      	bne.n	8005106 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513e:	2b01      	cmp	r3, #1
 8005140:	d119      	bne.n	8005176 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	330c      	adds	r3, #12
 8005148:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	60bb      	str	r3, [r7, #8]
   return(result);
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f023 0310 	bic.w	r3, r3, #16
 8005158:	647b      	str	r3, [r7, #68]	@ 0x44
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	330c      	adds	r3, #12
 8005160:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005162:	61ba      	str	r2, [r7, #24]
 8005164:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	6979      	ldr	r1, [r7, #20]
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	613b      	str	r3, [r7, #16]
   return(result);
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e5      	bne.n	8005142 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2220      	movs	r2, #32
 800517a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005184:	bf00      	nop
 8005186:	3754      	adds	r7, #84	@ 0x54
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr

0800518e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f7ff fee8 	bl	8004f7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051ae:	bf00      	nop
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b085      	sub	sp, #20
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b21      	cmp	r3, #33	@ 0x21
 80051c8:	d13e      	bne.n	8005248 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051d2:	d114      	bne.n	80051fe <UART_Transmit_IT+0x48>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d110      	bne.n	80051fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	1c9a      	adds	r2, r3, #2
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	621a      	str	r2, [r3, #32]
 80051fc:	e008      	b.n	8005210 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	1c59      	adds	r1, r3, #1
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6211      	str	r1, [r2, #32]
 8005208:	781a      	ldrb	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005214:	b29b      	uxth	r3, r3
 8005216:	3b01      	subs	r3, #1
 8005218:	b29b      	uxth	r3, r3
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	4619      	mov	r1, r3
 800521e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10f      	bne.n	8005244 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005232:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005242:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	e000      	b.n	800524a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005248:	2302      	movs	r3, #2
  }
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr

08005254 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800526a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff fe79 	bl	8004f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08c      	sub	sp, #48	@ 0x30
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b22      	cmp	r3, #34	@ 0x22
 8005296:	f040 80ae 	bne.w	80053f6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052a2:	d117      	bne.n	80052d4 <UART_Receive_IT+0x50>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d113      	bne.n	80052d4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052ac:	2300      	movs	r3, #0
 80052ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052cc:	1c9a      	adds	r2, r3, #2
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80052d2:	e026      	b.n	8005322 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052e6:	d007      	beq.n	80052f8 <UART_Receive_IT+0x74>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10a      	bne.n	8005306 <UART_Receive_IT+0x82>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d106      	bne.n	8005306 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005302:	701a      	strb	r2, [r3, #0]
 8005304:	e008      	b.n	8005318 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005312:	b2da      	uxtb	r2, r3
 8005314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005316:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29b      	uxth	r3, r3
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	4619      	mov	r1, r3
 8005330:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005332:	2b00      	cmp	r3, #0
 8005334:	d15d      	bne.n	80053f2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0220 	bic.w	r2, r2, #32
 8005344:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005354:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695a      	ldr	r2, [r3, #20]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0201 	bic.w	r2, r2, #1
 8005364:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2220      	movs	r2, #32
 800536a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005378:	2b01      	cmp	r3, #1
 800537a:	d135      	bne.n	80053e8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	330c      	adds	r3, #12
 8005388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	e853 3f00 	ldrex	r3, [r3]
 8005390:	613b      	str	r3, [r7, #16]
   return(result);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f023 0310 	bic.w	r3, r3, #16
 8005398:	627b      	str	r3, [r7, #36]	@ 0x24
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	330c      	adds	r3, #12
 80053a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053a2:	623a      	str	r2, [r7, #32]
 80053a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	69f9      	ldr	r1, [r7, #28]
 80053a8:	6a3a      	ldr	r2, [r7, #32]
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e5      	bne.n	8005382 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d10a      	bne.n	80053da <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053de:	4619      	mov	r1, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff fdd5 	bl	8004f90 <HAL_UARTEx_RxEventCallback>
 80053e6:	e002      	b.n	80053ee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7fb fa21 	bl	8000830 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	e002      	b.n	80053f8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	e000      	b.n	80053f8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80053f6:	2302      	movs	r3, #2
  }
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3730      	adds	r7, #48	@ 0x30
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800543a:	f023 030c 	bic.w	r3, r3, #12
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6812      	ldr	r2, [r2, #0]
 8005442:	68b9      	ldr	r1, [r7, #8]
 8005444:	430b      	orrs	r3, r1
 8005446:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a2c      	ldr	r2, [pc, #176]	@ (8005514 <UART_SetConfig+0x114>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d103      	bne.n	8005470 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005468:	f7ff f9bc 	bl	80047e4 <HAL_RCC_GetPCLK2Freq>
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	e002      	b.n	8005476 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005470:	f7ff f9a4 	bl	80047bc <HAL_RCC_GetPCLK1Freq>
 8005474:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4613      	mov	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	009a      	lsls	r2, r3, #2
 8005480:	441a      	add	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	fbb2 f3f3 	udiv	r3, r2, r3
 800548c:	4a22      	ldr	r2, [pc, #136]	@ (8005518 <UART_SetConfig+0x118>)
 800548e:	fba2 2303 	umull	r2, r3, r2, r3
 8005492:	095b      	lsrs	r3, r3, #5
 8005494:	0119      	lsls	r1, r3, #4
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	009a      	lsls	r2, r3, #2
 80054a0:	441a      	add	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80054ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005518 <UART_SetConfig+0x118>)
 80054ae:	fba3 0302 	umull	r0, r3, r3, r2
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	2064      	movs	r0, #100	@ 0x64
 80054b6:	fb00 f303 	mul.w	r3, r0, r3
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	3332      	adds	r3, #50	@ 0x32
 80054c0:	4a15      	ldr	r2, [pc, #84]	@ (8005518 <UART_SetConfig+0x118>)
 80054c2:	fba2 2303 	umull	r2, r3, r2, r3
 80054c6:	095b      	lsrs	r3, r3, #5
 80054c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054cc:	4419      	add	r1, r3
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	009a      	lsls	r2, r3, #2
 80054d8:	441a      	add	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80054e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005518 <UART_SetConfig+0x118>)
 80054e6:	fba3 0302 	umull	r0, r3, r3, r2
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	2064      	movs	r0, #100	@ 0x64
 80054ee:	fb00 f303 	mul.w	r3, r0, r3
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	3332      	adds	r3, #50	@ 0x32
 80054f8:	4a07      	ldr	r2, [pc, #28]	@ (8005518 <UART_SetConfig+0x118>)
 80054fa:	fba2 2303 	umull	r2, r3, r2, r3
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	f003 020f 	and.w	r2, r3, #15
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	440a      	add	r2, r1
 800550a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800550c:	bf00      	nop
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40013800 	.word	0x40013800
 8005518:	51eb851f 	.word	0x51eb851f

0800551c <_vsniprintf_r>:
 800551c:	b530      	push	{r4, r5, lr}
 800551e:	4614      	mov	r4, r2
 8005520:	2c00      	cmp	r4, #0
 8005522:	4605      	mov	r5, r0
 8005524:	461a      	mov	r2, r3
 8005526:	b09b      	sub	sp, #108	@ 0x6c
 8005528:	da05      	bge.n	8005536 <_vsniprintf_r+0x1a>
 800552a:	238b      	movs	r3, #139	@ 0x8b
 800552c:	6003      	str	r3, [r0, #0]
 800552e:	f04f 30ff 	mov.w	r0, #4294967295
 8005532:	b01b      	add	sp, #108	@ 0x6c
 8005534:	bd30      	pop	{r4, r5, pc}
 8005536:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800553a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800553e:	bf0c      	ite	eq
 8005540:	4623      	moveq	r3, r4
 8005542:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005546:	9302      	str	r3, [sp, #8]
 8005548:	9305      	str	r3, [sp, #20]
 800554a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800554e:	9100      	str	r1, [sp, #0]
 8005550:	9104      	str	r1, [sp, #16]
 8005552:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005556:	4669      	mov	r1, sp
 8005558:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800555a:	f000 f99f 	bl	800589c <_svfiprintf_r>
 800555e:	1c43      	adds	r3, r0, #1
 8005560:	bfbc      	itt	lt
 8005562:	238b      	movlt	r3, #139	@ 0x8b
 8005564:	602b      	strlt	r3, [r5, #0]
 8005566:	2c00      	cmp	r4, #0
 8005568:	d0e3      	beq.n	8005532 <_vsniprintf_r+0x16>
 800556a:	2200      	movs	r2, #0
 800556c:	9b00      	ldr	r3, [sp, #0]
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	e7df      	b.n	8005532 <_vsniprintf_r+0x16>
	...

08005574 <vsniprintf>:
 8005574:	b507      	push	{r0, r1, r2, lr}
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	4613      	mov	r3, r2
 800557a:	460a      	mov	r2, r1
 800557c:	4601      	mov	r1, r0
 800557e:	4803      	ldr	r0, [pc, #12]	@ (800558c <vsniprintf+0x18>)
 8005580:	6800      	ldr	r0, [r0, #0]
 8005582:	f7ff ffcb 	bl	800551c <_vsniprintf_r>
 8005586:	b003      	add	sp, #12
 8005588:	f85d fb04 	ldr.w	pc, [sp], #4
 800558c:	20000214 	.word	0x20000214

08005590 <memset>:
 8005590:	4603      	mov	r3, r0
 8005592:	4402      	add	r2, r0
 8005594:	4293      	cmp	r3, r2
 8005596:	d100      	bne.n	800559a <memset+0xa>
 8005598:	4770      	bx	lr
 800559a:	f803 1b01 	strb.w	r1, [r3], #1
 800559e:	e7f9      	b.n	8005594 <memset+0x4>

080055a0 <__errno>:
 80055a0:	4b01      	ldr	r3, [pc, #4]	@ (80055a8 <__errno+0x8>)
 80055a2:	6818      	ldr	r0, [r3, #0]
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	20000214 	.word	0x20000214

080055ac <__libc_init_array>:
 80055ac:	b570      	push	{r4, r5, r6, lr}
 80055ae:	2600      	movs	r6, #0
 80055b0:	4d0c      	ldr	r5, [pc, #48]	@ (80055e4 <__libc_init_array+0x38>)
 80055b2:	4c0d      	ldr	r4, [pc, #52]	@ (80055e8 <__libc_init_array+0x3c>)
 80055b4:	1b64      	subs	r4, r4, r5
 80055b6:	10a4      	asrs	r4, r4, #2
 80055b8:	42a6      	cmp	r6, r4
 80055ba:	d109      	bne.n	80055d0 <__libc_init_array+0x24>
 80055bc:	f000 fc78 	bl	8005eb0 <_init>
 80055c0:	2600      	movs	r6, #0
 80055c2:	4d0a      	ldr	r5, [pc, #40]	@ (80055ec <__libc_init_array+0x40>)
 80055c4:	4c0a      	ldr	r4, [pc, #40]	@ (80055f0 <__libc_init_array+0x44>)
 80055c6:	1b64      	subs	r4, r4, r5
 80055c8:	10a4      	asrs	r4, r4, #2
 80055ca:	42a6      	cmp	r6, r4
 80055cc:	d105      	bne.n	80055da <__libc_init_array+0x2e>
 80055ce:	bd70      	pop	{r4, r5, r6, pc}
 80055d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055d4:	4798      	blx	r3
 80055d6:	3601      	adds	r6, #1
 80055d8:	e7ee      	b.n	80055b8 <__libc_init_array+0xc>
 80055da:	f855 3b04 	ldr.w	r3, [r5], #4
 80055de:	4798      	blx	r3
 80055e0:	3601      	adds	r6, #1
 80055e2:	e7f2      	b.n	80055ca <__libc_init_array+0x1e>
 80055e4:	08006050 	.word	0x08006050
 80055e8:	08006050 	.word	0x08006050
 80055ec:	08006050 	.word	0x08006050
 80055f0:	08006054 	.word	0x08006054

080055f4 <__retarget_lock_acquire_recursive>:
 80055f4:	4770      	bx	lr

080055f6 <__retarget_lock_release_recursive>:
 80055f6:	4770      	bx	lr

080055f8 <_free_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4605      	mov	r5, r0
 80055fc:	2900      	cmp	r1, #0
 80055fe:	d040      	beq.n	8005682 <_free_r+0x8a>
 8005600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005604:	1f0c      	subs	r4, r1, #4
 8005606:	2b00      	cmp	r3, #0
 8005608:	bfb8      	it	lt
 800560a:	18e4      	addlt	r4, r4, r3
 800560c:	f000 f8de 	bl	80057cc <__malloc_lock>
 8005610:	4a1c      	ldr	r2, [pc, #112]	@ (8005684 <_free_r+0x8c>)
 8005612:	6813      	ldr	r3, [r2, #0]
 8005614:	b933      	cbnz	r3, 8005624 <_free_r+0x2c>
 8005616:	6063      	str	r3, [r4, #4]
 8005618:	6014      	str	r4, [r2, #0]
 800561a:	4628      	mov	r0, r5
 800561c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005620:	f000 b8da 	b.w	80057d8 <__malloc_unlock>
 8005624:	42a3      	cmp	r3, r4
 8005626:	d908      	bls.n	800563a <_free_r+0x42>
 8005628:	6820      	ldr	r0, [r4, #0]
 800562a:	1821      	adds	r1, r4, r0
 800562c:	428b      	cmp	r3, r1
 800562e:	bf01      	itttt	eq
 8005630:	6819      	ldreq	r1, [r3, #0]
 8005632:	685b      	ldreq	r3, [r3, #4]
 8005634:	1809      	addeq	r1, r1, r0
 8005636:	6021      	streq	r1, [r4, #0]
 8005638:	e7ed      	b.n	8005616 <_free_r+0x1e>
 800563a:	461a      	mov	r2, r3
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	b10b      	cbz	r3, 8005644 <_free_r+0x4c>
 8005640:	42a3      	cmp	r3, r4
 8005642:	d9fa      	bls.n	800563a <_free_r+0x42>
 8005644:	6811      	ldr	r1, [r2, #0]
 8005646:	1850      	adds	r0, r2, r1
 8005648:	42a0      	cmp	r0, r4
 800564a:	d10b      	bne.n	8005664 <_free_r+0x6c>
 800564c:	6820      	ldr	r0, [r4, #0]
 800564e:	4401      	add	r1, r0
 8005650:	1850      	adds	r0, r2, r1
 8005652:	4283      	cmp	r3, r0
 8005654:	6011      	str	r1, [r2, #0]
 8005656:	d1e0      	bne.n	800561a <_free_r+0x22>
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	4408      	add	r0, r1
 800565e:	6010      	str	r0, [r2, #0]
 8005660:	6053      	str	r3, [r2, #4]
 8005662:	e7da      	b.n	800561a <_free_r+0x22>
 8005664:	d902      	bls.n	800566c <_free_r+0x74>
 8005666:	230c      	movs	r3, #12
 8005668:	602b      	str	r3, [r5, #0]
 800566a:	e7d6      	b.n	800561a <_free_r+0x22>
 800566c:	6820      	ldr	r0, [r4, #0]
 800566e:	1821      	adds	r1, r4, r0
 8005670:	428b      	cmp	r3, r1
 8005672:	bf01      	itttt	eq
 8005674:	6819      	ldreq	r1, [r3, #0]
 8005676:	685b      	ldreq	r3, [r3, #4]
 8005678:	1809      	addeq	r1, r1, r0
 800567a:	6021      	streq	r1, [r4, #0]
 800567c:	6063      	str	r3, [r4, #4]
 800567e:	6054      	str	r4, [r2, #4]
 8005680:	e7cb      	b.n	800561a <_free_r+0x22>
 8005682:	bd38      	pop	{r3, r4, r5, pc}
 8005684:	20000fc8 	.word	0x20000fc8

08005688 <sbrk_aligned>:
 8005688:	b570      	push	{r4, r5, r6, lr}
 800568a:	4e0f      	ldr	r6, [pc, #60]	@ (80056c8 <sbrk_aligned+0x40>)
 800568c:	460c      	mov	r4, r1
 800568e:	6831      	ldr	r1, [r6, #0]
 8005690:	4605      	mov	r5, r0
 8005692:	b911      	cbnz	r1, 800569a <sbrk_aligned+0x12>
 8005694:	f000 fbaa 	bl	8005dec <_sbrk_r>
 8005698:	6030      	str	r0, [r6, #0]
 800569a:	4621      	mov	r1, r4
 800569c:	4628      	mov	r0, r5
 800569e:	f000 fba5 	bl	8005dec <_sbrk_r>
 80056a2:	1c43      	adds	r3, r0, #1
 80056a4:	d103      	bne.n	80056ae <sbrk_aligned+0x26>
 80056a6:	f04f 34ff 	mov.w	r4, #4294967295
 80056aa:	4620      	mov	r0, r4
 80056ac:	bd70      	pop	{r4, r5, r6, pc}
 80056ae:	1cc4      	adds	r4, r0, #3
 80056b0:	f024 0403 	bic.w	r4, r4, #3
 80056b4:	42a0      	cmp	r0, r4
 80056b6:	d0f8      	beq.n	80056aa <sbrk_aligned+0x22>
 80056b8:	1a21      	subs	r1, r4, r0
 80056ba:	4628      	mov	r0, r5
 80056bc:	f000 fb96 	bl	8005dec <_sbrk_r>
 80056c0:	3001      	adds	r0, #1
 80056c2:	d1f2      	bne.n	80056aa <sbrk_aligned+0x22>
 80056c4:	e7ef      	b.n	80056a6 <sbrk_aligned+0x1e>
 80056c6:	bf00      	nop
 80056c8:	20000fc4 	.word	0x20000fc4

080056cc <_malloc_r>:
 80056cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056d0:	1ccd      	adds	r5, r1, #3
 80056d2:	f025 0503 	bic.w	r5, r5, #3
 80056d6:	3508      	adds	r5, #8
 80056d8:	2d0c      	cmp	r5, #12
 80056da:	bf38      	it	cc
 80056dc:	250c      	movcc	r5, #12
 80056de:	2d00      	cmp	r5, #0
 80056e0:	4606      	mov	r6, r0
 80056e2:	db01      	blt.n	80056e8 <_malloc_r+0x1c>
 80056e4:	42a9      	cmp	r1, r5
 80056e6:	d904      	bls.n	80056f2 <_malloc_r+0x26>
 80056e8:	230c      	movs	r3, #12
 80056ea:	6033      	str	r3, [r6, #0]
 80056ec:	2000      	movs	r0, #0
 80056ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057c8 <_malloc_r+0xfc>
 80056f6:	f000 f869 	bl	80057cc <__malloc_lock>
 80056fa:	f8d8 3000 	ldr.w	r3, [r8]
 80056fe:	461c      	mov	r4, r3
 8005700:	bb44      	cbnz	r4, 8005754 <_malloc_r+0x88>
 8005702:	4629      	mov	r1, r5
 8005704:	4630      	mov	r0, r6
 8005706:	f7ff ffbf 	bl	8005688 <sbrk_aligned>
 800570a:	1c43      	adds	r3, r0, #1
 800570c:	4604      	mov	r4, r0
 800570e:	d158      	bne.n	80057c2 <_malloc_r+0xf6>
 8005710:	f8d8 4000 	ldr.w	r4, [r8]
 8005714:	4627      	mov	r7, r4
 8005716:	2f00      	cmp	r7, #0
 8005718:	d143      	bne.n	80057a2 <_malloc_r+0xd6>
 800571a:	2c00      	cmp	r4, #0
 800571c:	d04b      	beq.n	80057b6 <_malloc_r+0xea>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	4639      	mov	r1, r7
 8005722:	4630      	mov	r0, r6
 8005724:	eb04 0903 	add.w	r9, r4, r3
 8005728:	f000 fb60 	bl	8005dec <_sbrk_r>
 800572c:	4581      	cmp	r9, r0
 800572e:	d142      	bne.n	80057b6 <_malloc_r+0xea>
 8005730:	6821      	ldr	r1, [r4, #0]
 8005732:	4630      	mov	r0, r6
 8005734:	1a6d      	subs	r5, r5, r1
 8005736:	4629      	mov	r1, r5
 8005738:	f7ff ffa6 	bl	8005688 <sbrk_aligned>
 800573c:	3001      	adds	r0, #1
 800573e:	d03a      	beq.n	80057b6 <_malloc_r+0xea>
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	442b      	add	r3, r5
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	f8d8 3000 	ldr.w	r3, [r8]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	bb62      	cbnz	r2, 80057a8 <_malloc_r+0xdc>
 800574e:	f8c8 7000 	str.w	r7, [r8]
 8005752:	e00f      	b.n	8005774 <_malloc_r+0xa8>
 8005754:	6822      	ldr	r2, [r4, #0]
 8005756:	1b52      	subs	r2, r2, r5
 8005758:	d420      	bmi.n	800579c <_malloc_r+0xd0>
 800575a:	2a0b      	cmp	r2, #11
 800575c:	d917      	bls.n	800578e <_malloc_r+0xc2>
 800575e:	1961      	adds	r1, r4, r5
 8005760:	42a3      	cmp	r3, r4
 8005762:	6025      	str	r5, [r4, #0]
 8005764:	bf18      	it	ne
 8005766:	6059      	strne	r1, [r3, #4]
 8005768:	6863      	ldr	r3, [r4, #4]
 800576a:	bf08      	it	eq
 800576c:	f8c8 1000 	streq.w	r1, [r8]
 8005770:	5162      	str	r2, [r4, r5]
 8005772:	604b      	str	r3, [r1, #4]
 8005774:	4630      	mov	r0, r6
 8005776:	f000 f82f 	bl	80057d8 <__malloc_unlock>
 800577a:	f104 000b 	add.w	r0, r4, #11
 800577e:	1d23      	adds	r3, r4, #4
 8005780:	f020 0007 	bic.w	r0, r0, #7
 8005784:	1ac2      	subs	r2, r0, r3
 8005786:	bf1c      	itt	ne
 8005788:	1a1b      	subne	r3, r3, r0
 800578a:	50a3      	strne	r3, [r4, r2]
 800578c:	e7af      	b.n	80056ee <_malloc_r+0x22>
 800578e:	6862      	ldr	r2, [r4, #4]
 8005790:	42a3      	cmp	r3, r4
 8005792:	bf0c      	ite	eq
 8005794:	f8c8 2000 	streq.w	r2, [r8]
 8005798:	605a      	strne	r2, [r3, #4]
 800579a:	e7eb      	b.n	8005774 <_malloc_r+0xa8>
 800579c:	4623      	mov	r3, r4
 800579e:	6864      	ldr	r4, [r4, #4]
 80057a0:	e7ae      	b.n	8005700 <_malloc_r+0x34>
 80057a2:	463c      	mov	r4, r7
 80057a4:	687f      	ldr	r7, [r7, #4]
 80057a6:	e7b6      	b.n	8005716 <_malloc_r+0x4a>
 80057a8:	461a      	mov	r2, r3
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	42a3      	cmp	r3, r4
 80057ae:	d1fb      	bne.n	80057a8 <_malloc_r+0xdc>
 80057b0:	2300      	movs	r3, #0
 80057b2:	6053      	str	r3, [r2, #4]
 80057b4:	e7de      	b.n	8005774 <_malloc_r+0xa8>
 80057b6:	230c      	movs	r3, #12
 80057b8:	4630      	mov	r0, r6
 80057ba:	6033      	str	r3, [r6, #0]
 80057bc:	f000 f80c 	bl	80057d8 <__malloc_unlock>
 80057c0:	e794      	b.n	80056ec <_malloc_r+0x20>
 80057c2:	6005      	str	r5, [r0, #0]
 80057c4:	e7d6      	b.n	8005774 <_malloc_r+0xa8>
 80057c6:	bf00      	nop
 80057c8:	20000fc8 	.word	0x20000fc8

080057cc <__malloc_lock>:
 80057cc:	4801      	ldr	r0, [pc, #4]	@ (80057d4 <__malloc_lock+0x8>)
 80057ce:	f7ff bf11 	b.w	80055f4 <__retarget_lock_acquire_recursive>
 80057d2:	bf00      	nop
 80057d4:	20000fc0 	.word	0x20000fc0

080057d8 <__malloc_unlock>:
 80057d8:	4801      	ldr	r0, [pc, #4]	@ (80057e0 <__malloc_unlock+0x8>)
 80057da:	f7ff bf0c 	b.w	80055f6 <__retarget_lock_release_recursive>
 80057de:	bf00      	nop
 80057e0:	20000fc0 	.word	0x20000fc0

080057e4 <__ssputs_r>:
 80057e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e8:	461f      	mov	r7, r3
 80057ea:	688e      	ldr	r6, [r1, #8]
 80057ec:	4682      	mov	sl, r0
 80057ee:	42be      	cmp	r6, r7
 80057f0:	460c      	mov	r4, r1
 80057f2:	4690      	mov	r8, r2
 80057f4:	680b      	ldr	r3, [r1, #0]
 80057f6:	d82d      	bhi.n	8005854 <__ssputs_r+0x70>
 80057f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005800:	d026      	beq.n	8005850 <__ssputs_r+0x6c>
 8005802:	6965      	ldr	r5, [r4, #20]
 8005804:	6909      	ldr	r1, [r1, #16]
 8005806:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800580a:	eba3 0901 	sub.w	r9, r3, r1
 800580e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005812:	1c7b      	adds	r3, r7, #1
 8005814:	444b      	add	r3, r9
 8005816:	106d      	asrs	r5, r5, #1
 8005818:	429d      	cmp	r5, r3
 800581a:	bf38      	it	cc
 800581c:	461d      	movcc	r5, r3
 800581e:	0553      	lsls	r3, r2, #21
 8005820:	d527      	bpl.n	8005872 <__ssputs_r+0x8e>
 8005822:	4629      	mov	r1, r5
 8005824:	f7ff ff52 	bl	80056cc <_malloc_r>
 8005828:	4606      	mov	r6, r0
 800582a:	b360      	cbz	r0, 8005886 <__ssputs_r+0xa2>
 800582c:	464a      	mov	r2, r9
 800582e:	6921      	ldr	r1, [r4, #16]
 8005830:	f000 fafa 	bl	8005e28 <memcpy>
 8005834:	89a3      	ldrh	r3, [r4, #12]
 8005836:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800583a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800583e:	81a3      	strh	r3, [r4, #12]
 8005840:	6126      	str	r6, [r4, #16]
 8005842:	444e      	add	r6, r9
 8005844:	6026      	str	r6, [r4, #0]
 8005846:	463e      	mov	r6, r7
 8005848:	6165      	str	r5, [r4, #20]
 800584a:	eba5 0509 	sub.w	r5, r5, r9
 800584e:	60a5      	str	r5, [r4, #8]
 8005850:	42be      	cmp	r6, r7
 8005852:	d900      	bls.n	8005856 <__ssputs_r+0x72>
 8005854:	463e      	mov	r6, r7
 8005856:	4632      	mov	r2, r6
 8005858:	4641      	mov	r1, r8
 800585a:	6820      	ldr	r0, [r4, #0]
 800585c:	f000 faac 	bl	8005db8 <memmove>
 8005860:	2000      	movs	r0, #0
 8005862:	68a3      	ldr	r3, [r4, #8]
 8005864:	1b9b      	subs	r3, r3, r6
 8005866:	60a3      	str	r3, [r4, #8]
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	4433      	add	r3, r6
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005872:	462a      	mov	r2, r5
 8005874:	f000 fae6 	bl	8005e44 <_realloc_r>
 8005878:	4606      	mov	r6, r0
 800587a:	2800      	cmp	r0, #0
 800587c:	d1e0      	bne.n	8005840 <__ssputs_r+0x5c>
 800587e:	4650      	mov	r0, sl
 8005880:	6921      	ldr	r1, [r4, #16]
 8005882:	f7ff feb9 	bl	80055f8 <_free_r>
 8005886:	230c      	movs	r3, #12
 8005888:	f8ca 3000 	str.w	r3, [sl]
 800588c:	89a3      	ldrh	r3, [r4, #12]
 800588e:	f04f 30ff 	mov.w	r0, #4294967295
 8005892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005896:	81a3      	strh	r3, [r4, #12]
 8005898:	e7e9      	b.n	800586e <__ssputs_r+0x8a>
	...

0800589c <_svfiprintf_r>:
 800589c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a0:	4698      	mov	r8, r3
 80058a2:	898b      	ldrh	r3, [r1, #12]
 80058a4:	4607      	mov	r7, r0
 80058a6:	061b      	lsls	r3, r3, #24
 80058a8:	460d      	mov	r5, r1
 80058aa:	4614      	mov	r4, r2
 80058ac:	b09d      	sub	sp, #116	@ 0x74
 80058ae:	d510      	bpl.n	80058d2 <_svfiprintf_r+0x36>
 80058b0:	690b      	ldr	r3, [r1, #16]
 80058b2:	b973      	cbnz	r3, 80058d2 <_svfiprintf_r+0x36>
 80058b4:	2140      	movs	r1, #64	@ 0x40
 80058b6:	f7ff ff09 	bl	80056cc <_malloc_r>
 80058ba:	6028      	str	r0, [r5, #0]
 80058bc:	6128      	str	r0, [r5, #16]
 80058be:	b930      	cbnz	r0, 80058ce <_svfiprintf_r+0x32>
 80058c0:	230c      	movs	r3, #12
 80058c2:	603b      	str	r3, [r7, #0]
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295
 80058c8:	b01d      	add	sp, #116	@ 0x74
 80058ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ce:	2340      	movs	r3, #64	@ 0x40
 80058d0:	616b      	str	r3, [r5, #20]
 80058d2:	2300      	movs	r3, #0
 80058d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058d6:	2320      	movs	r3, #32
 80058d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058dc:	2330      	movs	r3, #48	@ 0x30
 80058de:	f04f 0901 	mov.w	r9, #1
 80058e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80058e6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005a80 <_svfiprintf_r+0x1e4>
 80058ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058ee:	4623      	mov	r3, r4
 80058f0:	469a      	mov	sl, r3
 80058f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058f6:	b10a      	cbz	r2, 80058fc <_svfiprintf_r+0x60>
 80058f8:	2a25      	cmp	r2, #37	@ 0x25
 80058fa:	d1f9      	bne.n	80058f0 <_svfiprintf_r+0x54>
 80058fc:	ebba 0b04 	subs.w	fp, sl, r4
 8005900:	d00b      	beq.n	800591a <_svfiprintf_r+0x7e>
 8005902:	465b      	mov	r3, fp
 8005904:	4622      	mov	r2, r4
 8005906:	4629      	mov	r1, r5
 8005908:	4638      	mov	r0, r7
 800590a:	f7ff ff6b 	bl	80057e4 <__ssputs_r>
 800590e:	3001      	adds	r0, #1
 8005910:	f000 80a7 	beq.w	8005a62 <_svfiprintf_r+0x1c6>
 8005914:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005916:	445a      	add	r2, fp
 8005918:	9209      	str	r2, [sp, #36]	@ 0x24
 800591a:	f89a 3000 	ldrb.w	r3, [sl]
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 809f 	beq.w	8005a62 <_svfiprintf_r+0x1c6>
 8005924:	2300      	movs	r3, #0
 8005926:	f04f 32ff 	mov.w	r2, #4294967295
 800592a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800592e:	f10a 0a01 	add.w	sl, sl, #1
 8005932:	9304      	str	r3, [sp, #16]
 8005934:	9307      	str	r3, [sp, #28]
 8005936:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800593a:	931a      	str	r3, [sp, #104]	@ 0x68
 800593c:	4654      	mov	r4, sl
 800593e:	2205      	movs	r2, #5
 8005940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005944:	484e      	ldr	r0, [pc, #312]	@ (8005a80 <_svfiprintf_r+0x1e4>)
 8005946:	f000 fa61 	bl	8005e0c <memchr>
 800594a:	9a04      	ldr	r2, [sp, #16]
 800594c:	b9d8      	cbnz	r0, 8005986 <_svfiprintf_r+0xea>
 800594e:	06d0      	lsls	r0, r2, #27
 8005950:	bf44      	itt	mi
 8005952:	2320      	movmi	r3, #32
 8005954:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005958:	0711      	lsls	r1, r2, #28
 800595a:	bf44      	itt	mi
 800595c:	232b      	movmi	r3, #43	@ 0x2b
 800595e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005962:	f89a 3000 	ldrb.w	r3, [sl]
 8005966:	2b2a      	cmp	r3, #42	@ 0x2a
 8005968:	d015      	beq.n	8005996 <_svfiprintf_r+0xfa>
 800596a:	4654      	mov	r4, sl
 800596c:	2000      	movs	r0, #0
 800596e:	f04f 0c0a 	mov.w	ip, #10
 8005972:	9a07      	ldr	r2, [sp, #28]
 8005974:	4621      	mov	r1, r4
 8005976:	f811 3b01 	ldrb.w	r3, [r1], #1
 800597a:	3b30      	subs	r3, #48	@ 0x30
 800597c:	2b09      	cmp	r3, #9
 800597e:	d94b      	bls.n	8005a18 <_svfiprintf_r+0x17c>
 8005980:	b1b0      	cbz	r0, 80059b0 <_svfiprintf_r+0x114>
 8005982:	9207      	str	r2, [sp, #28]
 8005984:	e014      	b.n	80059b0 <_svfiprintf_r+0x114>
 8005986:	eba0 0308 	sub.w	r3, r0, r8
 800598a:	fa09 f303 	lsl.w	r3, r9, r3
 800598e:	4313      	orrs	r3, r2
 8005990:	46a2      	mov	sl, r4
 8005992:	9304      	str	r3, [sp, #16]
 8005994:	e7d2      	b.n	800593c <_svfiprintf_r+0xa0>
 8005996:	9b03      	ldr	r3, [sp, #12]
 8005998:	1d19      	adds	r1, r3, #4
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	9103      	str	r1, [sp, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bfbb      	ittet	lt
 80059a2:	425b      	neglt	r3, r3
 80059a4:	f042 0202 	orrlt.w	r2, r2, #2
 80059a8:	9307      	strge	r3, [sp, #28]
 80059aa:	9307      	strlt	r3, [sp, #28]
 80059ac:	bfb8      	it	lt
 80059ae:	9204      	strlt	r2, [sp, #16]
 80059b0:	7823      	ldrb	r3, [r4, #0]
 80059b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80059b4:	d10a      	bne.n	80059cc <_svfiprintf_r+0x130>
 80059b6:	7863      	ldrb	r3, [r4, #1]
 80059b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80059ba:	d132      	bne.n	8005a22 <_svfiprintf_r+0x186>
 80059bc:	9b03      	ldr	r3, [sp, #12]
 80059be:	3402      	adds	r4, #2
 80059c0:	1d1a      	adds	r2, r3, #4
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	9203      	str	r2, [sp, #12]
 80059c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80059ca:	9305      	str	r3, [sp, #20]
 80059cc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005a84 <_svfiprintf_r+0x1e8>
 80059d0:	2203      	movs	r2, #3
 80059d2:	4650      	mov	r0, sl
 80059d4:	7821      	ldrb	r1, [r4, #0]
 80059d6:	f000 fa19 	bl	8005e0c <memchr>
 80059da:	b138      	cbz	r0, 80059ec <_svfiprintf_r+0x150>
 80059dc:	2240      	movs	r2, #64	@ 0x40
 80059de:	9b04      	ldr	r3, [sp, #16]
 80059e0:	eba0 000a 	sub.w	r0, r0, sl
 80059e4:	4082      	lsls	r2, r0
 80059e6:	4313      	orrs	r3, r2
 80059e8:	3401      	adds	r4, #1
 80059ea:	9304      	str	r3, [sp, #16]
 80059ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f0:	2206      	movs	r2, #6
 80059f2:	4825      	ldr	r0, [pc, #148]	@ (8005a88 <_svfiprintf_r+0x1ec>)
 80059f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059f8:	f000 fa08 	bl	8005e0c <memchr>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d036      	beq.n	8005a6e <_svfiprintf_r+0x1d2>
 8005a00:	4b22      	ldr	r3, [pc, #136]	@ (8005a8c <_svfiprintf_r+0x1f0>)
 8005a02:	bb1b      	cbnz	r3, 8005a4c <_svfiprintf_r+0x1b0>
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	3307      	adds	r3, #7
 8005a08:	f023 0307 	bic.w	r3, r3, #7
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	9303      	str	r3, [sp, #12]
 8005a10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a12:	4433      	add	r3, r6
 8005a14:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a16:	e76a      	b.n	80058ee <_svfiprintf_r+0x52>
 8005a18:	460c      	mov	r4, r1
 8005a1a:	2001      	movs	r0, #1
 8005a1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a20:	e7a8      	b.n	8005974 <_svfiprintf_r+0xd8>
 8005a22:	2300      	movs	r3, #0
 8005a24:	f04f 0c0a 	mov.w	ip, #10
 8005a28:	4619      	mov	r1, r3
 8005a2a:	3401      	adds	r4, #1
 8005a2c:	9305      	str	r3, [sp, #20]
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a34:	3a30      	subs	r2, #48	@ 0x30
 8005a36:	2a09      	cmp	r2, #9
 8005a38:	d903      	bls.n	8005a42 <_svfiprintf_r+0x1a6>
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0c6      	beq.n	80059cc <_svfiprintf_r+0x130>
 8005a3e:	9105      	str	r1, [sp, #20]
 8005a40:	e7c4      	b.n	80059cc <_svfiprintf_r+0x130>
 8005a42:	4604      	mov	r4, r0
 8005a44:	2301      	movs	r3, #1
 8005a46:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a4a:	e7f0      	b.n	8005a2e <_svfiprintf_r+0x192>
 8005a4c:	ab03      	add	r3, sp, #12
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	462a      	mov	r2, r5
 8005a52:	4638      	mov	r0, r7
 8005a54:	4b0e      	ldr	r3, [pc, #56]	@ (8005a90 <_svfiprintf_r+0x1f4>)
 8005a56:	a904      	add	r1, sp, #16
 8005a58:	f3af 8000 	nop.w
 8005a5c:	1c42      	adds	r2, r0, #1
 8005a5e:	4606      	mov	r6, r0
 8005a60:	d1d6      	bne.n	8005a10 <_svfiprintf_r+0x174>
 8005a62:	89ab      	ldrh	r3, [r5, #12]
 8005a64:	065b      	lsls	r3, r3, #25
 8005a66:	f53f af2d 	bmi.w	80058c4 <_svfiprintf_r+0x28>
 8005a6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a6c:	e72c      	b.n	80058c8 <_svfiprintf_r+0x2c>
 8005a6e:	ab03      	add	r3, sp, #12
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	462a      	mov	r2, r5
 8005a74:	4638      	mov	r0, r7
 8005a76:	4b06      	ldr	r3, [pc, #24]	@ (8005a90 <_svfiprintf_r+0x1f4>)
 8005a78:	a904      	add	r1, sp, #16
 8005a7a:	f000 f87d 	bl	8005b78 <_printf_i>
 8005a7e:	e7ed      	b.n	8005a5c <_svfiprintf_r+0x1c0>
 8005a80:	0800601a 	.word	0x0800601a
 8005a84:	08006020 	.word	0x08006020
 8005a88:	08006024 	.word	0x08006024
 8005a8c:	00000000 	.word	0x00000000
 8005a90:	080057e5 	.word	0x080057e5

08005a94 <_printf_common>:
 8005a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a98:	4616      	mov	r6, r2
 8005a9a:	4698      	mov	r8, r3
 8005a9c:	688a      	ldr	r2, [r1, #8]
 8005a9e:	690b      	ldr	r3, [r1, #16]
 8005aa0:	4607      	mov	r7, r0
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	bfb8      	it	lt
 8005aa6:	4613      	movlt	r3, r2
 8005aa8:	6033      	str	r3, [r6, #0]
 8005aaa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005aae:	460c      	mov	r4, r1
 8005ab0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ab4:	b10a      	cbz	r2, 8005aba <_printf_common+0x26>
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	6033      	str	r3, [r6, #0]
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	0699      	lsls	r1, r3, #26
 8005abe:	bf42      	ittt	mi
 8005ac0:	6833      	ldrmi	r3, [r6, #0]
 8005ac2:	3302      	addmi	r3, #2
 8005ac4:	6033      	strmi	r3, [r6, #0]
 8005ac6:	6825      	ldr	r5, [r4, #0]
 8005ac8:	f015 0506 	ands.w	r5, r5, #6
 8005acc:	d106      	bne.n	8005adc <_printf_common+0x48>
 8005ace:	f104 0a19 	add.w	sl, r4, #25
 8005ad2:	68e3      	ldr	r3, [r4, #12]
 8005ad4:	6832      	ldr	r2, [r6, #0]
 8005ad6:	1a9b      	subs	r3, r3, r2
 8005ad8:	42ab      	cmp	r3, r5
 8005ada:	dc2b      	bgt.n	8005b34 <_printf_common+0xa0>
 8005adc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ae0:	6822      	ldr	r2, [r4, #0]
 8005ae2:	3b00      	subs	r3, #0
 8005ae4:	bf18      	it	ne
 8005ae6:	2301      	movne	r3, #1
 8005ae8:	0692      	lsls	r2, r2, #26
 8005aea:	d430      	bmi.n	8005b4e <_printf_common+0xba>
 8005aec:	4641      	mov	r1, r8
 8005aee:	4638      	mov	r0, r7
 8005af0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005af4:	47c8      	blx	r9
 8005af6:	3001      	adds	r0, #1
 8005af8:	d023      	beq.n	8005b42 <_printf_common+0xae>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	6922      	ldr	r2, [r4, #16]
 8005afe:	f003 0306 	and.w	r3, r3, #6
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	bf14      	ite	ne
 8005b06:	2500      	movne	r5, #0
 8005b08:	6833      	ldreq	r3, [r6, #0]
 8005b0a:	f04f 0600 	mov.w	r6, #0
 8005b0e:	bf08      	it	eq
 8005b10:	68e5      	ldreq	r5, [r4, #12]
 8005b12:	f104 041a 	add.w	r4, r4, #26
 8005b16:	bf08      	it	eq
 8005b18:	1aed      	subeq	r5, r5, r3
 8005b1a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005b1e:	bf08      	it	eq
 8005b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b24:	4293      	cmp	r3, r2
 8005b26:	bfc4      	itt	gt
 8005b28:	1a9b      	subgt	r3, r3, r2
 8005b2a:	18ed      	addgt	r5, r5, r3
 8005b2c:	42b5      	cmp	r5, r6
 8005b2e:	d11a      	bne.n	8005b66 <_printf_common+0xd2>
 8005b30:	2000      	movs	r0, #0
 8005b32:	e008      	b.n	8005b46 <_printf_common+0xb2>
 8005b34:	2301      	movs	r3, #1
 8005b36:	4652      	mov	r2, sl
 8005b38:	4641      	mov	r1, r8
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	47c8      	blx	r9
 8005b3e:	3001      	adds	r0, #1
 8005b40:	d103      	bne.n	8005b4a <_printf_common+0xb6>
 8005b42:	f04f 30ff 	mov.w	r0, #4294967295
 8005b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b4a:	3501      	adds	r5, #1
 8005b4c:	e7c1      	b.n	8005ad2 <_printf_common+0x3e>
 8005b4e:	2030      	movs	r0, #48	@ 0x30
 8005b50:	18e1      	adds	r1, r4, r3
 8005b52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b5c:	4422      	add	r2, r4
 8005b5e:	3302      	adds	r3, #2
 8005b60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b64:	e7c2      	b.n	8005aec <_printf_common+0x58>
 8005b66:	2301      	movs	r3, #1
 8005b68:	4622      	mov	r2, r4
 8005b6a:	4641      	mov	r1, r8
 8005b6c:	4638      	mov	r0, r7
 8005b6e:	47c8      	blx	r9
 8005b70:	3001      	adds	r0, #1
 8005b72:	d0e6      	beq.n	8005b42 <_printf_common+0xae>
 8005b74:	3601      	adds	r6, #1
 8005b76:	e7d9      	b.n	8005b2c <_printf_common+0x98>

08005b78 <_printf_i>:
 8005b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b7c:	7e0f      	ldrb	r7, [r1, #24]
 8005b7e:	4691      	mov	r9, r2
 8005b80:	2f78      	cmp	r7, #120	@ 0x78
 8005b82:	4680      	mov	r8, r0
 8005b84:	460c      	mov	r4, r1
 8005b86:	469a      	mov	sl, r3
 8005b88:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b8e:	d807      	bhi.n	8005ba0 <_printf_i+0x28>
 8005b90:	2f62      	cmp	r7, #98	@ 0x62
 8005b92:	d80a      	bhi.n	8005baa <_printf_i+0x32>
 8005b94:	2f00      	cmp	r7, #0
 8005b96:	f000 80d3 	beq.w	8005d40 <_printf_i+0x1c8>
 8005b9a:	2f58      	cmp	r7, #88	@ 0x58
 8005b9c:	f000 80ba 	beq.w	8005d14 <_printf_i+0x19c>
 8005ba0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ba4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ba8:	e03a      	b.n	8005c20 <_printf_i+0xa8>
 8005baa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005bae:	2b15      	cmp	r3, #21
 8005bb0:	d8f6      	bhi.n	8005ba0 <_printf_i+0x28>
 8005bb2:	a101      	add	r1, pc, #4	@ (adr r1, 8005bb8 <_printf_i+0x40>)
 8005bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bb8:	08005c11 	.word	0x08005c11
 8005bbc:	08005c25 	.word	0x08005c25
 8005bc0:	08005ba1 	.word	0x08005ba1
 8005bc4:	08005ba1 	.word	0x08005ba1
 8005bc8:	08005ba1 	.word	0x08005ba1
 8005bcc:	08005ba1 	.word	0x08005ba1
 8005bd0:	08005c25 	.word	0x08005c25
 8005bd4:	08005ba1 	.word	0x08005ba1
 8005bd8:	08005ba1 	.word	0x08005ba1
 8005bdc:	08005ba1 	.word	0x08005ba1
 8005be0:	08005ba1 	.word	0x08005ba1
 8005be4:	08005d27 	.word	0x08005d27
 8005be8:	08005c4f 	.word	0x08005c4f
 8005bec:	08005ce1 	.word	0x08005ce1
 8005bf0:	08005ba1 	.word	0x08005ba1
 8005bf4:	08005ba1 	.word	0x08005ba1
 8005bf8:	08005d49 	.word	0x08005d49
 8005bfc:	08005ba1 	.word	0x08005ba1
 8005c00:	08005c4f 	.word	0x08005c4f
 8005c04:	08005ba1 	.word	0x08005ba1
 8005c08:	08005ba1 	.word	0x08005ba1
 8005c0c:	08005ce9 	.word	0x08005ce9
 8005c10:	6833      	ldr	r3, [r6, #0]
 8005c12:	1d1a      	adds	r2, r3, #4
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6032      	str	r2, [r6, #0]
 8005c18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c20:	2301      	movs	r3, #1
 8005c22:	e09e      	b.n	8005d62 <_printf_i+0x1ea>
 8005c24:	6833      	ldr	r3, [r6, #0]
 8005c26:	6820      	ldr	r0, [r4, #0]
 8005c28:	1d19      	adds	r1, r3, #4
 8005c2a:	6031      	str	r1, [r6, #0]
 8005c2c:	0606      	lsls	r6, r0, #24
 8005c2e:	d501      	bpl.n	8005c34 <_printf_i+0xbc>
 8005c30:	681d      	ldr	r5, [r3, #0]
 8005c32:	e003      	b.n	8005c3c <_printf_i+0xc4>
 8005c34:	0645      	lsls	r5, r0, #25
 8005c36:	d5fb      	bpl.n	8005c30 <_printf_i+0xb8>
 8005c38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c3c:	2d00      	cmp	r5, #0
 8005c3e:	da03      	bge.n	8005c48 <_printf_i+0xd0>
 8005c40:	232d      	movs	r3, #45	@ 0x2d
 8005c42:	426d      	negs	r5, r5
 8005c44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c48:	230a      	movs	r3, #10
 8005c4a:	4859      	ldr	r0, [pc, #356]	@ (8005db0 <_printf_i+0x238>)
 8005c4c:	e011      	b.n	8005c72 <_printf_i+0xfa>
 8005c4e:	6821      	ldr	r1, [r4, #0]
 8005c50:	6833      	ldr	r3, [r6, #0]
 8005c52:	0608      	lsls	r0, r1, #24
 8005c54:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c58:	d402      	bmi.n	8005c60 <_printf_i+0xe8>
 8005c5a:	0649      	lsls	r1, r1, #25
 8005c5c:	bf48      	it	mi
 8005c5e:	b2ad      	uxthmi	r5, r5
 8005c60:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c62:	6033      	str	r3, [r6, #0]
 8005c64:	bf14      	ite	ne
 8005c66:	230a      	movne	r3, #10
 8005c68:	2308      	moveq	r3, #8
 8005c6a:	4851      	ldr	r0, [pc, #324]	@ (8005db0 <_printf_i+0x238>)
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c72:	6866      	ldr	r6, [r4, #4]
 8005c74:	2e00      	cmp	r6, #0
 8005c76:	bfa8      	it	ge
 8005c78:	6821      	ldrge	r1, [r4, #0]
 8005c7a:	60a6      	str	r6, [r4, #8]
 8005c7c:	bfa4      	itt	ge
 8005c7e:	f021 0104 	bicge.w	r1, r1, #4
 8005c82:	6021      	strge	r1, [r4, #0]
 8005c84:	b90d      	cbnz	r5, 8005c8a <_printf_i+0x112>
 8005c86:	2e00      	cmp	r6, #0
 8005c88:	d04b      	beq.n	8005d22 <_printf_i+0x1aa>
 8005c8a:	4616      	mov	r6, r2
 8005c8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c90:	fb03 5711 	mls	r7, r3, r1, r5
 8005c94:	5dc7      	ldrb	r7, [r0, r7]
 8005c96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c9a:	462f      	mov	r7, r5
 8005c9c:	42bb      	cmp	r3, r7
 8005c9e:	460d      	mov	r5, r1
 8005ca0:	d9f4      	bls.n	8005c8c <_printf_i+0x114>
 8005ca2:	2b08      	cmp	r3, #8
 8005ca4:	d10b      	bne.n	8005cbe <_printf_i+0x146>
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	07df      	lsls	r7, r3, #31
 8005caa:	d508      	bpl.n	8005cbe <_printf_i+0x146>
 8005cac:	6923      	ldr	r3, [r4, #16]
 8005cae:	6861      	ldr	r1, [r4, #4]
 8005cb0:	4299      	cmp	r1, r3
 8005cb2:	bfde      	ittt	le
 8005cb4:	2330      	movle	r3, #48	@ 0x30
 8005cb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005cbe:	1b92      	subs	r2, r2, r6
 8005cc0:	6122      	str	r2, [r4, #16]
 8005cc2:	464b      	mov	r3, r9
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	4640      	mov	r0, r8
 8005cc8:	f8cd a000 	str.w	sl, [sp]
 8005ccc:	aa03      	add	r2, sp, #12
 8005cce:	f7ff fee1 	bl	8005a94 <_printf_common>
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	d14a      	bne.n	8005d6c <_printf_i+0x1f4>
 8005cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cda:	b004      	add	sp, #16
 8005cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	f043 0320 	orr.w	r3, r3, #32
 8005ce6:	6023      	str	r3, [r4, #0]
 8005ce8:	2778      	movs	r7, #120	@ 0x78
 8005cea:	4832      	ldr	r0, [pc, #200]	@ (8005db4 <_printf_i+0x23c>)
 8005cec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	6831      	ldr	r1, [r6, #0]
 8005cf4:	061f      	lsls	r7, r3, #24
 8005cf6:	f851 5b04 	ldr.w	r5, [r1], #4
 8005cfa:	d402      	bmi.n	8005d02 <_printf_i+0x18a>
 8005cfc:	065f      	lsls	r7, r3, #25
 8005cfe:	bf48      	it	mi
 8005d00:	b2ad      	uxthmi	r5, r5
 8005d02:	6031      	str	r1, [r6, #0]
 8005d04:	07d9      	lsls	r1, r3, #31
 8005d06:	bf44      	itt	mi
 8005d08:	f043 0320 	orrmi.w	r3, r3, #32
 8005d0c:	6023      	strmi	r3, [r4, #0]
 8005d0e:	b11d      	cbz	r5, 8005d18 <_printf_i+0x1a0>
 8005d10:	2310      	movs	r3, #16
 8005d12:	e7ab      	b.n	8005c6c <_printf_i+0xf4>
 8005d14:	4826      	ldr	r0, [pc, #152]	@ (8005db0 <_printf_i+0x238>)
 8005d16:	e7e9      	b.n	8005cec <_printf_i+0x174>
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	f023 0320 	bic.w	r3, r3, #32
 8005d1e:	6023      	str	r3, [r4, #0]
 8005d20:	e7f6      	b.n	8005d10 <_printf_i+0x198>
 8005d22:	4616      	mov	r6, r2
 8005d24:	e7bd      	b.n	8005ca2 <_printf_i+0x12a>
 8005d26:	6833      	ldr	r3, [r6, #0]
 8005d28:	6825      	ldr	r5, [r4, #0]
 8005d2a:	1d18      	adds	r0, r3, #4
 8005d2c:	6961      	ldr	r1, [r4, #20]
 8005d2e:	6030      	str	r0, [r6, #0]
 8005d30:	062e      	lsls	r6, r5, #24
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	d501      	bpl.n	8005d3a <_printf_i+0x1c2>
 8005d36:	6019      	str	r1, [r3, #0]
 8005d38:	e002      	b.n	8005d40 <_printf_i+0x1c8>
 8005d3a:	0668      	lsls	r0, r5, #25
 8005d3c:	d5fb      	bpl.n	8005d36 <_printf_i+0x1be>
 8005d3e:	8019      	strh	r1, [r3, #0]
 8005d40:	2300      	movs	r3, #0
 8005d42:	4616      	mov	r6, r2
 8005d44:	6123      	str	r3, [r4, #16]
 8005d46:	e7bc      	b.n	8005cc2 <_printf_i+0x14a>
 8005d48:	6833      	ldr	r3, [r6, #0]
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	1d1a      	adds	r2, r3, #4
 8005d4e:	6032      	str	r2, [r6, #0]
 8005d50:	681e      	ldr	r6, [r3, #0]
 8005d52:	6862      	ldr	r2, [r4, #4]
 8005d54:	4630      	mov	r0, r6
 8005d56:	f000 f859 	bl	8005e0c <memchr>
 8005d5a:	b108      	cbz	r0, 8005d60 <_printf_i+0x1e8>
 8005d5c:	1b80      	subs	r0, r0, r6
 8005d5e:	6060      	str	r0, [r4, #4]
 8005d60:	6863      	ldr	r3, [r4, #4]
 8005d62:	6123      	str	r3, [r4, #16]
 8005d64:	2300      	movs	r3, #0
 8005d66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d6a:	e7aa      	b.n	8005cc2 <_printf_i+0x14a>
 8005d6c:	4632      	mov	r2, r6
 8005d6e:	4649      	mov	r1, r9
 8005d70:	4640      	mov	r0, r8
 8005d72:	6923      	ldr	r3, [r4, #16]
 8005d74:	47d0      	blx	sl
 8005d76:	3001      	adds	r0, #1
 8005d78:	d0ad      	beq.n	8005cd6 <_printf_i+0x15e>
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	079b      	lsls	r3, r3, #30
 8005d7e:	d413      	bmi.n	8005da8 <_printf_i+0x230>
 8005d80:	68e0      	ldr	r0, [r4, #12]
 8005d82:	9b03      	ldr	r3, [sp, #12]
 8005d84:	4298      	cmp	r0, r3
 8005d86:	bfb8      	it	lt
 8005d88:	4618      	movlt	r0, r3
 8005d8a:	e7a6      	b.n	8005cda <_printf_i+0x162>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	4632      	mov	r2, r6
 8005d90:	4649      	mov	r1, r9
 8005d92:	4640      	mov	r0, r8
 8005d94:	47d0      	blx	sl
 8005d96:	3001      	adds	r0, #1
 8005d98:	d09d      	beq.n	8005cd6 <_printf_i+0x15e>
 8005d9a:	3501      	adds	r5, #1
 8005d9c:	68e3      	ldr	r3, [r4, #12]
 8005d9e:	9903      	ldr	r1, [sp, #12]
 8005da0:	1a5b      	subs	r3, r3, r1
 8005da2:	42ab      	cmp	r3, r5
 8005da4:	dcf2      	bgt.n	8005d8c <_printf_i+0x214>
 8005da6:	e7eb      	b.n	8005d80 <_printf_i+0x208>
 8005da8:	2500      	movs	r5, #0
 8005daa:	f104 0619 	add.w	r6, r4, #25
 8005dae:	e7f5      	b.n	8005d9c <_printf_i+0x224>
 8005db0:	0800602b 	.word	0x0800602b
 8005db4:	0800603c 	.word	0x0800603c

08005db8 <memmove>:
 8005db8:	4288      	cmp	r0, r1
 8005dba:	b510      	push	{r4, lr}
 8005dbc:	eb01 0402 	add.w	r4, r1, r2
 8005dc0:	d902      	bls.n	8005dc8 <memmove+0x10>
 8005dc2:	4284      	cmp	r4, r0
 8005dc4:	4623      	mov	r3, r4
 8005dc6:	d807      	bhi.n	8005dd8 <memmove+0x20>
 8005dc8:	1e43      	subs	r3, r0, #1
 8005dca:	42a1      	cmp	r1, r4
 8005dcc:	d008      	beq.n	8005de0 <memmove+0x28>
 8005dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dd6:	e7f8      	b.n	8005dca <memmove+0x12>
 8005dd8:	4601      	mov	r1, r0
 8005dda:	4402      	add	r2, r0
 8005ddc:	428a      	cmp	r2, r1
 8005dde:	d100      	bne.n	8005de2 <memmove+0x2a>
 8005de0:	bd10      	pop	{r4, pc}
 8005de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005de6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dea:	e7f7      	b.n	8005ddc <memmove+0x24>

08005dec <_sbrk_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	2300      	movs	r3, #0
 8005df0:	4d05      	ldr	r5, [pc, #20]	@ (8005e08 <_sbrk_r+0x1c>)
 8005df2:	4604      	mov	r4, r0
 8005df4:	4608      	mov	r0, r1
 8005df6:	602b      	str	r3, [r5, #0]
 8005df8:	f7fc fb34 	bl	8002464 <_sbrk>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d102      	bne.n	8005e06 <_sbrk_r+0x1a>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	b103      	cbz	r3, 8005e06 <_sbrk_r+0x1a>
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	bd38      	pop	{r3, r4, r5, pc}
 8005e08:	20000fbc 	.word	0x20000fbc

08005e0c <memchr>:
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	b510      	push	{r4, lr}
 8005e10:	b2c9      	uxtb	r1, r1
 8005e12:	4402      	add	r2, r0
 8005e14:	4293      	cmp	r3, r2
 8005e16:	4618      	mov	r0, r3
 8005e18:	d101      	bne.n	8005e1e <memchr+0x12>
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	e003      	b.n	8005e26 <memchr+0x1a>
 8005e1e:	7804      	ldrb	r4, [r0, #0]
 8005e20:	3301      	adds	r3, #1
 8005e22:	428c      	cmp	r4, r1
 8005e24:	d1f6      	bne.n	8005e14 <memchr+0x8>
 8005e26:	bd10      	pop	{r4, pc}

08005e28 <memcpy>:
 8005e28:	440a      	add	r2, r1
 8005e2a:	4291      	cmp	r1, r2
 8005e2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e30:	d100      	bne.n	8005e34 <memcpy+0xc>
 8005e32:	4770      	bx	lr
 8005e34:	b510      	push	{r4, lr}
 8005e36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e3a:	4291      	cmp	r1, r2
 8005e3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e40:	d1f9      	bne.n	8005e36 <memcpy+0xe>
 8005e42:	bd10      	pop	{r4, pc}

08005e44 <_realloc_r>:
 8005e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e48:	4680      	mov	r8, r0
 8005e4a:	4615      	mov	r5, r2
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	b921      	cbnz	r1, 8005e5a <_realloc_r+0x16>
 8005e50:	4611      	mov	r1, r2
 8005e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e56:	f7ff bc39 	b.w	80056cc <_malloc_r>
 8005e5a:	b92a      	cbnz	r2, 8005e68 <_realloc_r+0x24>
 8005e5c:	f7ff fbcc 	bl	80055f8 <_free_r>
 8005e60:	2400      	movs	r4, #0
 8005e62:	4620      	mov	r0, r4
 8005e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e68:	f000 f81a 	bl	8005ea0 <_malloc_usable_size_r>
 8005e6c:	4285      	cmp	r5, r0
 8005e6e:	4606      	mov	r6, r0
 8005e70:	d802      	bhi.n	8005e78 <_realloc_r+0x34>
 8005e72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e76:	d8f4      	bhi.n	8005e62 <_realloc_r+0x1e>
 8005e78:	4629      	mov	r1, r5
 8005e7a:	4640      	mov	r0, r8
 8005e7c:	f7ff fc26 	bl	80056cc <_malloc_r>
 8005e80:	4607      	mov	r7, r0
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d0ec      	beq.n	8005e60 <_realloc_r+0x1c>
 8005e86:	42b5      	cmp	r5, r6
 8005e88:	462a      	mov	r2, r5
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	bf28      	it	cs
 8005e8e:	4632      	movcs	r2, r6
 8005e90:	f7ff ffca 	bl	8005e28 <memcpy>
 8005e94:	4621      	mov	r1, r4
 8005e96:	4640      	mov	r0, r8
 8005e98:	f7ff fbae 	bl	80055f8 <_free_r>
 8005e9c:	463c      	mov	r4, r7
 8005e9e:	e7e0      	b.n	8005e62 <_realloc_r+0x1e>

08005ea0 <_malloc_usable_size_r>:
 8005ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ea4:	1f18      	subs	r0, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	bfbc      	itt	lt
 8005eaa:	580b      	ldrlt	r3, [r1, r0]
 8005eac:	18c0      	addlt	r0, r0, r3
 8005eae:	4770      	bx	lr

08005eb0 <_init>:
 8005eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb2:	bf00      	nop
 8005eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb6:	bc08      	pop	{r3}
 8005eb8:	469e      	mov	lr, r3
 8005eba:	4770      	bx	lr

08005ebc <_fini>:
 8005ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ebe:	bf00      	nop
 8005ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec2:	bc08      	pop	{r3}
 8005ec4:	469e      	mov	lr, r3
 8005ec6:	4770      	bx	lr
