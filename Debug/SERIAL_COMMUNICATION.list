
SERIAL_COMMUNICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000593c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08005b20  08005b20  00015b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ca4  08005ca4  00020274  2**0
                  CONTENTS
  4 .ARM          00000000  08005ca4  08005ca4  00020274  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ca4  08005ca4  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ca4  08005ca4  00015ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ca8  08005ca8  00015ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  08005cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c28  20000274  08005f20  00020274  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e9c  08005f20  00020e9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3ec  00000000  00000000  0002029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c6  00000000  00000000  0002c689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  0002ea50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  0002f600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a115  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5ea  00000000  00000000  0004a215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009406f  00000000  00000000  000587ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec86e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003274  00000000  00000000  000ec8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000274 	.word	0x20000274
 8000200:	00000000 	.word	0x00000000
 8000204:	08005b08 	.word	0x08005b08

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000278 	.word	0x20000278
 8000220:	08005b08 	.word	0x08005b08

08000224 <Compute_CRC16>:
		crctable16[divident] = curByte;
	}
}

unsigned short Compute_CRC16(unsigned char* bytes, const int BYTES_LEN)
{
 8000224:	b480      	push	{r7}
 8000226:	b087      	sub	sp, #28
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	6039      	str	r1, [r7, #0]
	unsigned short crc = 0;
 800022e:	2300      	movs	r3, #0
 8000230:	82fb      	strh	r3, [r7, #22]

	for (int i = 0; i < BYTES_LEN; i++)
 8000232:	2300      	movs	r3, #0
 8000234:	613b      	str	r3, [r7, #16]
 8000236:	e019      	b.n	800026c <Compute_CRC16+0x48>
	{
		unsigned char b = bytes[i];
 8000238:	693b      	ldr	r3, [r7, #16]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	4413      	add	r3, r2
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	73fb      	strb	r3, [r7, #15]

		/* XOR-in next input byte into MSB of crc, that's our new intermediate divident */
		unsigned char pos = (unsigned char)((crc >> 8) ^ b);
 8000242:	8afb      	ldrh	r3, [r7, #22]
 8000244:	0a1b      	lsrs	r3, r3, #8
 8000246:	b29b      	uxth	r3, r3
 8000248:	b2da      	uxtb	r2, r3
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	4053      	eors	r3, r2
 800024e:	73bb      	strb	r3, [r7, #14]
		/* Shift out the MSB used for division per lookuptable and XOR with the remainder */
		crc = (unsigned short)((crc << 8) ^ (unsigned short)(crctable16[pos]));
 8000250:	8afb      	ldrh	r3, [r7, #22]
 8000252:	021b      	lsls	r3, r3, #8
 8000254:	b21a      	sxth	r2, r3
 8000256:	7bbb      	ldrb	r3, [r7, #14]
 8000258:	4909      	ldr	r1, [pc, #36]	; (8000280 <Compute_CRC16+0x5c>)
 800025a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800025e:	b21b      	sxth	r3, r3
 8000260:	4053      	eors	r3, r2
 8000262:	b21b      	sxth	r3, r3
 8000264:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < BYTES_LEN; i++)
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	3301      	adds	r3, #1
 800026a:	613b      	str	r3, [r7, #16]
 800026c:	693a      	ldr	r2, [r7, #16]
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	429a      	cmp	r2, r3
 8000272:	dbe1      	blt.n	8000238 <Compute_CRC16+0x14>

	}
//	printf("\nHERE 3");

	return crc;
 8000274:	8afb      	ldrh	r3, [r7, #22]
}
 8000276:	4618      	mov	r0, r3
 8000278:	371c      	adds	r7, #28
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	20000000 	.word	0x20000000

08000284 <DectModHandler>:

extern FrameParse_t FrameParse;

uint8_t FP_HEADER[] = {FP_H1, FP_H2, FP_T1, FP_T2};
uint8_t DectModHandler(FrameParse_t *FP_handler, uint8_t __char)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	460b      	mov	r3, r1
 800028e:	70fb      	strb	r3, [r7, #3]
	if (__char == FP_HEADER[FP_handler->H_Index])
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	789b      	ldrb	r3, [r3, #2]
 8000294:	461a      	mov	r2, r3
 8000296:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <DectModHandler+0x48>)
 8000298:	5c9b      	ldrb	r3, [r3, r2]
 800029a:	78fa      	ldrb	r2, [r7, #3]
 800029c:	429a      	cmp	r2, r3
 800029e:	d10e      	bne.n	80002be <DectModHandler+0x3a>
	{
		// go to next header
		if((++FP_handler->H_Index) == sizeof(FP_HEADER))
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	789b      	ldrb	r3, [r3, #2]
 80002a4:	3301      	adds	r3, #1
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	709a      	strb	r2, [r3, #2]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	789b      	ldrb	r3, [r3, #2]
 80002b0:	2b04      	cmp	r3, #4
 80002b2:	d102      	bne.n	80002ba <DectModHandler+0x36>
			FP_handler->H_Index = 0;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2200      	movs	r2, #0
 80002b8:	709a      	strb	r2, [r3, #2]

		return FP_OK;
 80002ba:	2301      	movs	r3, #1
 80002bc:	e000      	b.n	80002c0 <DectModHandler+0x3c>
	}
	return FP_FAIL;
 80002be:	2300      	movs	r3, #0
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	20000200 	.word	0x20000200

080002d0 <FP_Init>:

void FP_Init(FrameParse_t *FP_handler)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	// initialize fields
	FP_handler->FP_MOD = DECT_H_MOD;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2200      	movs	r2, #0
 80002dc:	701a      	strb	r2, [r3, #0]
	FP_handler->FP_Status = FP_OK;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2201      	movs	r2, #1
 80002e2:	705a      	strb	r2, [r3, #1]

	//
	FP_handler->H_Index = 0;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2200      	movs	r2, #0
 80002e8:	709a      	strb	r2, [r3, #2]
	FP_handler->_CRC.index = 0;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2200      	movs	r2, #0
 80002ee:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	FP_handler->buffer.index = 0;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2200      	movs	r2, #0
 80002f6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr

08000304 <HandleFPStatusFail>:
  * @note   .
  * @param  __char character.
  * @retval
  */
void HandleFPStatusFail(FrameParse_t *FP_handler)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	FP_Init(FP_handler);
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	f7ff ffdf 	bl	80002d0 <FP_Init>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <FP_CheckCRC>:

uint8_t FP_CheckCRC(FrameParse_t *FP_handler)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	b084      	sub	sp, #16
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
	uint16_t FRAME_CRC = (FP_handler->_CRC.buffer[1] << 8)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8000328:	021b      	lsls	r3, r3, #8
						| FP_handler->_CRC.buffer[0];
 800032a:	b21a      	sxth	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8000332:	b21b      	sxth	r3, r3
 8000334:	4313      	orrs	r3, r2
 8000336:	b21b      	sxth	r3, r3
	uint16_t FRAME_CRC = (FP_handler->_CRC.buffer[1] << 8)
 8000338:	81fb      	strh	r3, [r7, #14]
	return Compute_CRC16(FP_handler->buffer.data, FP_handler->buffer.len)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	1d5a      	adds	r2, r3, #5
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	791b      	ldrb	r3, [r3, #4]
 8000342:	4619      	mov	r1, r3
 8000344:	4610      	mov	r0, r2
 8000346:	f7ff ff6d 	bl	8000224 <Compute_CRC16>
 800034a:	4603      	mov	r3, r0
 800034c:	461a      	mov	r2, r3
			== FRAME_CRC;
 800034e:	89fb      	ldrh	r3, [r7, #14]
 8000350:	4293      	cmp	r3, r2
 8000352:	bf0c      	ite	eq
 8000354:	2301      	moveq	r3, #1
 8000356:	2300      	movne	r3, #0
 8000358:	b2db      	uxtb	r3, r3
}
 800035a:	4618      	mov	r0, r3
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <ParseFrameHandler>:

void ParseFrameHandler(FrameParse_t *FP_handler, uint8_t __char)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	70fb      	strb	r3, [r7, #3]
	// pre handlers

	// Status fail
	if(FP_handler->FP_Status == FP_FAIL)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	785b      	ldrb	r3, [r3, #1]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d102      	bne.n	800037e <ParseFrameHandler+0x1a>
	{
		// handlers
		HandleFPStatusFail(FP_handler);
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f7ff ffc3 	bl	8000304 <HandleFPStatusFail>
	}

	//
	FP_handler->cur_char = __char;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	78fa      	ldrb	r2, [r7, #3]
 8000382:	70da      	strb	r2, [r3, #3]
	switch (FP_handler->FP_MOD) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b04      	cmp	r3, #4
 800038a:	f200 8091 	bhi.w	80004b0 <ParseFrameHandler+0x14c>
 800038e:	a201      	add	r2, pc, #4	; (adr r2, 8000394 <ParseFrameHandler+0x30>)
 8000390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000394:	080003a9 	.word	0x080003a9
 8000398:	080003f5 	.word	0x080003f5
 800039c:	08000405 	.word	0x08000405
 80003a0:	0800042b 	.word	0x0800042b
 80003a4:	08000469 	.word	0x08000469
		case DECT_H_MOD:
			FP_handler->FP_Status = DectModHandler(FP_handler, __char);
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	4619      	mov	r1, r3
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f7ff ff69 	bl	8000284 <DectModHandler>
 80003b2:	4603      	mov	r3, r0
 80003b4:	461a      	mov	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	705a      	strb	r2, [r3, #1]

			// go to next mode
			if(FP_HEADER[FP_handler->H_Index] == FP_T1)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	789b      	ldrb	r3, [r3, #2]
 80003be:	461a      	mov	r2, r3
 80003c0:	4b41      	ldr	r3, [pc, #260]	; (80004c8 <ParseFrameHandler+0x164>)
 80003c2:	5c9b      	ldrb	r3, [r3, r2]
 80003c4:	2be1      	cmp	r3, #225	; 0xe1
 80003c6:	d102      	bne.n	80003ce <ParseFrameHandler+0x6a>
				FP_handler->FP_MOD = DECT_CMD;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	701a      	strb	r2, [r3, #0]
			if(FP_HEADER[FP_handler->H_Index] == FP_H1)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	789b      	ldrb	r3, [r3, #2]
 80003d2:	461a      	mov	r2, r3
 80003d4:	4b3c      	ldr	r3, [pc, #240]	; (80004c8 <ParseFrameHandler+0x164>)
 80003d6:	5c9b      	ldrb	r3, [r3, r2]
 80003d8:	2bab      	cmp	r3, #171	; 0xab
 80003da:	d16b      	bne.n	80004b4 <ParseFrameHandler+0x150>
			{
				// case that the buffer has buffer length
				if(FP_handler->buffer.len)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	791b      	ldrb	r3, [r3, #4]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d003      	beq.n	80003ec <ParseFrameHandler+0x88>
					FP_handler->FP_MOD = COL_CRC;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2204      	movs	r2, #4
 80003e8:	701a      	strb	r2, [r3, #0]
				else
					FP_handler->FP_MOD = DECT_COML;
			}

			break;
 80003ea:	e063      	b.n	80004b4 <ParseFrameHandler+0x150>
					FP_handler->FP_MOD = DECT_COML;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2205      	movs	r2, #5
 80003f0:	701a      	strb	r2, [r3, #0]
			break;
 80003f2:	e05f      	b.n	80004b4 <ParseFrameHandler+0x150>
		case DECT_CMD:
//			FP_handler->dev.id = __char & 0x7Fu;
//			FP_handler->dev.mode = __char >> 7;
			FP_handler->_CMD = __char;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	78fa      	ldrb	r2, [r7, #3]
 80003f8:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

			// go to next mode
			FP_handler->FP_MOD = DECT_BUF_LEN;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2202      	movs	r2, #2
 8000400:	701a      	strb	r2, [r3, #0]
			break;
 8000402:	e05c      	b.n	80004be <ParseFrameHandler+0x15a>
		case DECT_BUF_LEN:
			FP_handler->buffer.len = __char;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	78fa      	ldrb	r2, [r7, #3]
 8000408:	711a      	strb	r2, [r3, #4]


			//
			FP_handler->buffer.index = 0;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	2200      	movs	r2, #0
 800040e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104

			// go to next mode
			if(FP_handler->buffer.len)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	791b      	ldrb	r3, [r3, #4]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d003      	beq.n	8000422 <ParseFrameHandler+0xbe>
				FP_handler->FP_MOD = COL_BUF_DATA;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	2203      	movs	r2, #3
 800041e:	701a      	strb	r2, [r3, #0]
			else
				FP_handler->FP_MOD = DECT_H_MOD;
			break;
 8000420:	e04d      	b.n	80004be <ParseFrameHandler+0x15a>
				FP_handler->FP_MOD = DECT_H_MOD;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
			break;
 8000428:	e049      	b.n	80004be <ParseFrameHandler+0x15a>
		case COL_BUF_DATA:
			if(FP_handler->buffer.len)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	791b      	ldrb	r3, [r3, #4]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d007      	beq.n	8000442 <ParseFrameHandler+0xde>
				FP_handler->buffer.data[FP_handler->buffer.index] = __char;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8000438:	461a      	mov	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4413      	add	r3, r2
 800043e:	78fa      	ldrb	r2, [r7, #3]
 8000440:	715a      	strb	r2, [r3, #5]

			// increase buffer index, and go to next mode
			if((++FP_handler->buffer.index) == FP_handler->buffer.len)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8000448:	3301      	adds	r3, #1
 800044a:	b2da      	uxtb	r2, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	791b      	ldrb	r3, [r3, #4]
 800045c:	429a      	cmp	r2, r3
 800045e:	d12b      	bne.n	80004b8 <ParseFrameHandler+0x154>
			{
				FP_handler->FP_MOD = DECT_H_MOD;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2200      	movs	r2, #0
 8000464:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000466:	e027      	b.n	80004b8 <ParseFrameHandler+0x154>
		case COL_CRC:
			FP_handler->_CRC.buffer[FP_handler->_CRC.index] = __char;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800046e:	461a      	mov	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4413      	add	r3, r2
 8000474:	78fa      	ldrb	r2, [r7, #3]
 8000476:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

			// increase buffer index, and go to next mode
			if((++FP_handler->_CRC.index) == sizeof(FP_handler->_CRC.buffer))
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8000480:	3301      	adds	r3, #1
 8000482:	b2da      	uxtb	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8000490:	2b02      	cmp	r3, #2
 8000492:	d113      	bne.n	80004bc <ParseFrameHandler+0x158>
			{
				if(FP_CheckCRC(FP_handler))
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f7ff ff40 	bl	800031a <FP_CheckCRC>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d003      	beq.n	80004a8 <ParseFrameHandler+0x144>
				{
					FP_handler->FP_MOD = DECT_COML;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2205      	movs	r2, #5
 80004a4:	701a      	strb	r2, [r3, #0]
				else
				{
					HandleFPStatusFail(FP_handler);
				}
			}
			break;
 80004a6:	e009      	b.n	80004bc <ParseFrameHandler+0x158>
					HandleFPStatusFail(FP_handler);
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f7ff ff2b 	bl	8000304 <HandleFPStatusFail>
			break;
 80004ae:	e005      	b.n	80004bc <ParseFrameHandler+0x158>
		default:
			break;
 80004b0:	bf00      	nop
 80004b2:	e004      	b.n	80004be <ParseFrameHandler+0x15a>
			break;
 80004b4:	bf00      	nop
 80004b6:	e002      	b.n	80004be <ParseFrameHandler+0x15a>
			break;
 80004b8:	bf00      	nop
 80004ba:	e000      	b.n	80004be <ParseFrameHandler+0x15a>
			break;
 80004bc:	bf00      	nop
	}

}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000200 	.word	0x20000200

080004cc <HandlerDeviceAction>:
extern int8_t validHeartRate; // indicator to show if the heart rate calculation is valid

//
extern uint8_t startToCalculate;
void HandlerDeviceAction(uint8_t CMD, uint8_t buffer_len, uint8_t *buffer)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b0c6      	sub	sp, #280	; 0x118
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004d6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004e0:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80004e4:	4602      	mov	r2, r0
 80004e6:	701a      	strb	r2, [r3, #0]
 80004e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004ec:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80004f0:	460a      	mov	r2, r1
 80004f2:	701a      	strb	r2, [r3, #0]
	uint8_t devID = CMD & 0x7Fu;
 80004f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004f8:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000502:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint8_t mode = CMD >> 7;
 8000506:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800050a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	09db      	lsrs	r3, r3, #7
 8000512:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
	if(mode == DEV_W_MOD)
 8000516:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800051a:	2b00      	cmp	r3, #0
 800051c:	d127      	bne.n	800056e <HandlerDeviceAction+0xa2>
	{
		switch (devID) {
 800051e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000522:	2b00      	cmp	r3, #0
 8000524:	d002      	beq.n	800052c <HandlerDeviceAction+0x60>
 8000526:	2b01      	cmp	r3, #1
 8000528:	d014      	beq.n	8000554 <HandlerDeviceAction+0x88>
		case DEV_1_ID:
			HAL_GPIO_WritePin(DEV_1_PORT, DEV_1_PIN, buffer[0]);

			break;
		default:
			break;
 800052a:	e055      	b.n	80005d8 <HandlerDeviceAction+0x10c>
			startToCalculate = *buffer;
 800052c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000530:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	781a      	ldrb	r2, [r3, #0]
 8000538:	4b2a      	ldr	r3, [pc, #168]	; (80005e4 <HandlerDeviceAction+0x118>)
 800053a:	701a      	strb	r2, [r3, #0]
			USART_Transmit(&USART_handler, "\r\nReceive start: %d", *buffer);
 800053c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000540:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	4927      	ldr	r1, [pc, #156]	; (80005e8 <HandlerDeviceAction+0x11c>)
 800054c:	4827      	ldr	r0, [pc, #156]	; (80005ec <HandlerDeviceAction+0x120>)
 800054e:	f001 fff5 	bl	800253c <USART_Transmit>
			break;
 8000552:	e041      	b.n	80005d8 <HandlerDeviceAction+0x10c>
			HAL_GPIO_WritePin(DEV_1_PORT, DEV_1_PIN, buffer[0]);
 8000554:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000558:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	461a      	mov	r2, r3
 8000562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000566:	4822      	ldr	r0, [pc, #136]	; (80005f0 <HandlerDeviceAction+0x124>)
 8000568:	f002 fc96 	bl	8002e98 <HAL_GPIO_WritePin>
			break;
 800056c:	e034      	b.n	80005d8 <HandlerDeviceAction+0x10c>

	}
	else
	{
		//
		uint8_t pData[FP_F_MAX_LEN], pLen = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		uint8_t pIndex = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
		// | H1 | H2 |
		pData[pIndex++] = FP_H1; pData[pIndex++] = FP_H2;
 800057a:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800057e:	1c5a      	adds	r2, r3, #1
 8000580:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
 8000584:	461a      	mov	r2, r3
 8000586:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800058a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800058e:	21ab      	movs	r1, #171	; 0xab
 8000590:	5499      	strb	r1, [r3, r2]
 8000592:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
 800059c:	461a      	mov	r2, r3
 800059e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80005a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005a6:	21cd      	movs	r1, #205	; 0xcd
 80005a8:	5499      	strb	r1, [r3, r2]
		pData[pIndex++] = devID; // | CMD |
 80005aa:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 80005ae:	1c5a      	adds	r2, r3, #1
 80005b0:	f887 2114 	strb.w	r2, [r7, #276]	; 0x114
 80005b4:	4619      	mov	r1, r3
 80005b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80005ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005be:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 80005c2:	545a      	strb	r2, [r3, r1]
		//
		switch (devID) {
 80005c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d002      	beq.n	80005d2 <HandlerDeviceAction+0x106>
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d002      	beq.n	80005d6 <HandlerDeviceAction+0x10a>
		{

			break;
		}
		default:
			break;
 80005d0:	e002      	b.n	80005d8 <HandlerDeviceAction+0x10c>
			break;
 80005d2:	bf00      	nop
 80005d4:	e000      	b.n	80005d8 <HandlerDeviceAction+0x10c>
			break;
 80005d6:	bf00      	nop
//		if(pLen)
//		{
//			HAL_UART_Transmit(&huart4, pData, pLen, 100);
//		}
	}
}
 80005d8:	bf00      	nop
 80005da:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000659 	.word	0x20000659
 80005e8:	08005b20 	.word	0x08005b20
 80005ec:	200004b8 	.word	0x200004b8
 80005f0:	40010c00 	.word	0x40010c00

080005f4 <HandleDeviceSendFrame>:

void HandleDeviceSendFrame(uint8_t devID, uint8_t buffer_len, uint8_t *buffer)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b0ca      	sub	sp, #296	; 0x128
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80005fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000608:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800060c:	4602      	mov	r2, r0
 800060e:	701a      	strb	r2, [r3, #0]
 8000610:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000614:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8000618:	460a      	mov	r2, r1
 800061a:	701a      	strb	r2, [r3, #0]
	uint8_t pData[FP_F_MAX_LEN], pLen = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	uint8_t pIndex = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
	// | H1 | H2 |
	pData[pIndex++] = FP_H1; pData[pIndex++] = FP_H2;
 8000628:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800062c:	1c5a      	adds	r2, r3, #1
 800062e:	f887 2126 	strb.w	r2, [r7, #294]	; 0x126
 8000632:	461a      	mov	r2, r3
 8000634:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000638:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800063c:	21ab      	movs	r1, #171	; 0xab
 800063e:	5499      	strb	r1, [r3, r2]
 8000640:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8000644:	1c5a      	adds	r2, r3, #1
 8000646:	f887 2126 	strb.w	r2, [r7, #294]	; 0x126
 800064a:	461a      	mov	r2, r3
 800064c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000650:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000654:	21cd      	movs	r1, #205	; 0xcd
 8000656:	5499      	strb	r1, [r3, r2]
	pData[pIndex++] = devID; // | CMD |
 8000658:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800065c:	1c5a      	adds	r2, r3, #1
 800065e:	f887 2126 	strb.w	r2, [r7, #294]	; 0x126
 8000662:	4619      	mov	r1, r3
 8000664:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000668:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800066c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000670:	f2a2 1221 	subw	r2, r2, #289	; 0x121
 8000674:	7812      	ldrb	r2, [r2, #0]
 8000676:	545a      	strb	r2, [r3, r1]

	switch (devID) {
 8000678:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800067c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d175      	bne.n	8000772 <HandleDeviceSendFrame+0x17e>
		case DEV_0_ID:
			//
			pLen = FP_F_LEN(DEV_0_DT_LEN);
 8000686:	2315      	movs	r3, #21
 8000688:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			pData[pIndex++] = DEV_0_DT_LEN; // | DATA LEN |
 800068c:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8000690:	1c5a      	adds	r2, r3, #1
 8000692:	f887 2126 	strb.w	r2, [r7, #294]	; 0x126
 8000696:	461a      	mov	r2, r3
 8000698:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800069c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80006a0:	210d      	movs	r1, #13
 80006a2:	5499      	strb	r1, [r3, r2]

			//
			uint8_t DATA[DEV_0_DT_LEN];
			for(uint8_t i = 0;i < DEV_0_DT_LEN;i++)
 80006a4:	2300      	movs	r3, #0
 80006a6:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
 80006aa:	e014      	b.n	80006d6 <HandleDeviceSendFrame+0xe2>
				DATA[i] = buffer[i];
 80006ac:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 80006b0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80006b4:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 80006b8:	6812      	ldr	r2, [r2, #0]
 80006ba:	441a      	add	r2, r3
 80006bc:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 80006c0:	7811      	ldrb	r1, [r2, #0]
 80006c2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80006c6:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80006ca:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0;i < DEV_0_DT_LEN;i++)
 80006cc:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 80006d0:	3301      	adds	r3, #1
 80006d2:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
 80006d6:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 80006da:	2b0c      	cmp	r3, #12
 80006dc:	d9e6      	bls.n	80006ac <HandleDeviceSendFrame+0xb8>

			//
			for(uint8_t i = 0;i < DEV_0_DT_LEN;i++)
 80006de:	2300      	movs	r3, #0
 80006e0:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124
 80006e4:	e016      	b.n	8000714 <HandleDeviceSendFrame+0x120>
			{
				//				(DATA & (0xFF << i)) >> i; // | DATA |
				pData[pIndex++] = DATA[i];
 80006e6:	f897 2124 	ldrb.w	r2, [r7, #292]	; 0x124
 80006ea:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80006ee:	1c59      	adds	r1, r3, #1
 80006f0:	f887 1126 	strb.w	r1, [r7, #294]	; 0x126
 80006f4:	4619      	mov	r1, r3
 80006f6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80006fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80006fe:	5c9a      	ldrb	r2, [r3, r2]
 8000700:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000704:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000708:	545a      	strb	r2, [r3, r1]
			for(uint8_t i = 0;i < DEV_0_DT_LEN;i++)
 800070a:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 800070e:	3301      	adds	r3, #1
 8000710:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124
 8000714:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8000718:	2b0c      	cmp	r3, #12
 800071a:	d9e4      	bls.n	80006e6 <HandleDeviceSendFrame+0xf2>
			}

			//
			pData[pIndex++] = FP_T1; pData[pIndex++] = FP_T2; // | T1 | T2 |
 800071c:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8000720:	1c5a      	adds	r2, r3, #1
 8000722:	f887 2126 	strb.w	r2, [r7, #294]	; 0x126
 8000726:	461a      	mov	r2, r3
 8000728:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800072c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000730:	21e1      	movs	r1, #225	; 0xe1
 8000732:	5499      	strb	r1, [r3, r2]
 8000734:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8000738:	1c5a      	adds	r2, r3, #1
 800073a:	f887 2126 	strb.w	r2, [r7, #294]	; 0x126
 800073e:	461a      	mov	r2, r3
 8000740:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000744:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000748:	21e2      	movs	r1, #226	; 0xe2
 800074a:	5499      	strb	r1, [r3, r2]

			// | CRC |
			uint16_t *pCRC = (uint16_t*)(pData + pIndex);
 800074c:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8000750:	f107 0218 	add.w	r2, r7, #24
 8000754:	4413      	add	r3, r2
 8000756:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			*pCRC = Compute_CRC16(DATA, DEV_0_DT_LEN);
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	210d      	movs	r1, #13
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fd5f 	bl	8000224 <Compute_CRC16>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800076e:	801a      	strh	r2, [r3, #0]

			break;
 8000770:	e000      	b.n	8000774 <HandleDeviceSendFrame+0x180>
		default:
			break;
 8000772:	bf00      	nop
	}

	//
	if(pLen)
 8000774:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000778:	2b00      	cmp	r3, #0
 800077a:	d009      	beq.n	8000790 <HandleDeviceSendFrame+0x19c>
	{
		HAL_UART_Transmit(&huart4, pData, pLen, 2000);
 800077c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000780:	b29a      	uxth	r2, r3
 8000782:	f107 0118 	add.w	r1, r7, #24
 8000786:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800078a:	4804      	ldr	r0, [pc, #16]	; (800079c <HandleDeviceSendFrame+0x1a8>)
 800078c:	f004 f80b 	bl	80047a6 <HAL_UART_Transmit>
	}
}
 8000790:	bf00      	nop
 8000792:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200002e4 	.word	0x200002e4

080007a0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	// huart 4
	//	if(*huart == &huart4)
	//	{
	uint8_t rx = huart->Instance->DR;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	73fb      	strb	r3, [r7, #15]

	// put new char into buffer from UART
	RxBuf[RxHead] = rx;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <HAL_UART_RxCpltCallback+0x48>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	490d      	ldr	r1, [pc, #52]	; (80007ec <HAL_UART_RxCpltCallback+0x4c>)
 80007b6:	7bfa      	ldrb	r2, [r7, #15]
 80007b8:	54ca      	strb	r2, [r1, r3]

	if ((++RxHead) > (RXBUFSIZE-1))
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <HAL_UART_RxCpltCallback+0x48>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	3301      	adds	r3, #1
 80007c0:	4a09      	ldr	r2, [pc, #36]	; (80007e8 <HAL_UART_RxCpltCallback+0x48>)
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <HAL_UART_RxCpltCallback+0x48>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007cc:	db02      	blt.n	80007d4 <HAL_UART_RxCpltCallback+0x34>
	{
		RxHead = 0;
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_UART_RxCpltCallback+0x48>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
	}

	//
	HAL_UART_Receive_IT(&huart4, &receive_data, 1);
 80007d4:	2201      	movs	r2, #1
 80007d6:	4906      	ldr	r1, [pc, #24]	; (80007f0 <HAL_UART_RxCpltCallback+0x50>)
 80007d8:	4806      	ldr	r0, [pc, #24]	; (80007f4 <HAL_UART_RxCpltCallback+0x54>)
 80007da:	f004 f876 	bl	80048ca <HAL_UART_Receive_IT>
	//	    if(rx == 0xE2u)
	//	    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);

	//	}

}
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000d80 	.word	0x20000d80
 80007ec:	20000980 	.word	0x20000980
 80007f0:	2000036c 	.word	0x2000036c
 80007f4:	200002e4 	.word	0x200002e4

080007f8 <Handle_UART_FP>:

void Handle_UART_FP()
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
	if(FrameParse.FP_MOD != DECT_COML)
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <Handle_UART_FP+0x44>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b05      	cmp	r3, #5
 8000804:	d009      	beq.n	800081a <Handle_UART_FP+0x22>
	{
		uint8_t __char = _getchar();
 8000806:	f001 fe27 	bl	8002458 <_getchar>
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
		ParseFrameHandler(&FrameParse, __char);
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	4619      	mov	r1, r3
 8000812:	480a      	ldr	r0, [pc, #40]	; (800083c <Handle_UART_FP+0x44>)
 8000814:	f7ff fda6 	bl	8000364 <ParseFrameHandler>
		HandlerDeviceAction(FrameParse._CMD,
				FrameParse.buffer.len,
				FrameParse.buffer.data);
		FP_Init(&FrameParse);
	}
}
 8000818:	e00b      	b.n	8000832 <Handle_UART_FP+0x3a>
		HandlerDeviceAction(FrameParse._CMD,
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <Handle_UART_FP+0x44>)
 800081c:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8000820:	4a06      	ldr	r2, [pc, #24]	; (800083c <Handle_UART_FP+0x44>)
 8000822:	7911      	ldrb	r1, [r2, #4]
 8000824:	4a06      	ldr	r2, [pc, #24]	; (8000840 <Handle_UART_FP+0x48>)
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fe50 	bl	80004cc <HandlerDeviceAction>
		FP_Init(&FrameParse);
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <Handle_UART_FP+0x44>)
 800082e:	f7ff fd4f 	bl	80002d0 <FP_Init>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000370 	.word	0x20000370
 8000840:	20000375 	.word	0x20000375

08000844 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b08d      	sub	sp, #52	; 0x34
 8000848:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800084a:	f001 febb 	bl	80025c4 <HAL_Init>

	/* USER CODE BEGIN Init */
	FP_Init(&FrameParse);
 800084e:	4898      	ldr	r0, [pc, #608]	; (8000ab0 <main+0x26c>)
 8000850:	f7ff fd3e 	bl	80002d0 <FP_Init>
	MAX30105_Init(&particleSensor, &hi2c2);
 8000854:	4997      	ldr	r1, [pc, #604]	; (8000ab4 <main+0x270>)
 8000856:	4898      	ldr	r0, [pc, #608]	; (8000ab8 <main+0x274>)
 8000858:	f000 fad7 	bl	8000e0a <MAX30105_Init>
	USART_Init(&USART_handler, &huart1);
 800085c:	4997      	ldr	r1, [pc, #604]	; (8000abc <main+0x278>)
 800085e:	4898      	ldr	r0, [pc, #608]	; (8000ac0 <main+0x27c>)
 8000860:	f001 fe26 	bl	80024b0 <USART_Init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000864:	f000 f950 	bl	8000b08 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000868:	f000 fa16 	bl	8000c98 <MX_GPIO_Init>
	MX_UART4_Init();
 800086c:	f000 f9c0 	bl	8000bf0 <MX_UART4_Init>
	MX_USART1_UART_Init();
 8000870:	f000 f9e8 	bl	8000c44 <MX_USART1_UART_Init>
	MX_I2C2_Init();
 8000874:	f000 f98e 	bl	8000b94 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	// Initialize sensor
	if(!MAX30105_begin(&particleSensor, MAX30105_ADDRESS))
 8000878:	21ae      	movs	r1, #174	; 0xae
 800087a:	488f      	ldr	r0, [pc, #572]	; (8000ab8 <main+0x274>)
 800087c:	f000 fae2 	bl	8000e44 <MAX30105_begin>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d100      	bne.n	8000888 <main+0x44>
	{
		//MAX30105 was not found. Please check wiring/power.
		while(1);
 8000886:	e7fe      	b.n	8000886 <main+0x42>
	}

	uint8_t ledBrightness = 60; // Options: 0=Off to 255=50mA
 8000888:	233c      	movs	r3, #60	; 0x3c
 800088a:	77bb      	strb	r3, [r7, #30]
	uint8_t sampleAverage = 4;  // Options: 1, 2, 4, 8, 16, 32
 800088c:	2304      	movs	r3, #4
 800088e:	777b      	strb	r3, [r7, #29]
	uint8_t ledMode = 2;        // Options: 1 = Red only, 2 = Red + IR, 3 = Red + IR + Green
 8000890:	2302      	movs	r3, #2
 8000892:	773b      	strb	r3, [r7, #28]
	uint8_t sampleRate = 100;   // Options: 50, 100, 200, 400, 800, 1000, 1600, 3200
 8000894:	2364      	movs	r3, #100	; 0x64
 8000896:	76fb      	strb	r3, [r7, #27]
	int pulseWidth = 411;    // Options: 69, 118, 215, 411
 8000898:	f240 139b 	movw	r3, #411	; 0x19b
 800089c:	617b      	str	r3, [r7, #20]
	int adcRange = 4096;     // Options: 2048, 4096, 8192, 16384
 800089e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a2:	613b      	str	r3, [r7, #16]

	MAX30105_setup(&particleSensor, ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); // Configure sensor with these settings
 80008a4:	7efb      	ldrb	r3, [r7, #27]
 80008a6:	7f3c      	ldrb	r4, [r7, #28]
 80008a8:	7f78      	ldrb	r0, [r7, #29]
 80008aa:	7fb9      	ldrb	r1, [r7, #30]
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	9202      	str	r2, [sp, #8]
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	9201      	str	r2, [sp, #4]
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	4623      	mov	r3, r4
 80008b8:	4602      	mov	r2, r0
 80008ba:	487f      	ldr	r0, [pc, #508]	; (8000ab8 <main+0x274>)
 80008bc:	f000 fe71 	bl	80015a2 <MAX30105_setup>

	//
	HAL_UART_Receive_IT(&huart4, &receive_data, 1);
 80008c0:	2201      	movs	r2, #1
 80008c2:	4980      	ldr	r1, [pc, #512]	; (8000ac4 <main+0x280>)
 80008c4:	4880      	ldr	r0, [pc, #512]	; (8000ac8 <main+0x284>)
 80008c6:	f004 f800 	bl	80048ca <HAL_UART_Receive_IT>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if(RxTail != RxHead || FrameParse.FP_MOD == DECT_COML)
 80008ca:	4b80      	ldr	r3, [pc, #512]	; (8000acc <main+0x288>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	4b80      	ldr	r3, [pc, #512]	; (8000ad0 <main+0x28c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d103      	bne.n	80008de <main+0x9a>
 80008d6:	4b76      	ldr	r3, [pc, #472]	; (8000ab0 <main+0x26c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b05      	cmp	r3, #5
 80008dc:	d102      	bne.n	80008e4 <main+0xa0>
			Handle_UART_FP();
 80008de:	f7ff ff8b 	bl	80007f8 <Handle_UART_FP>
 80008e2:	e0e3      	b.n	8000aac <main+0x268>
		else

			if(startToCalculate)
 80008e4:	4b7b      	ldr	r3, [pc, #492]	; (8000ad4 <main+0x290>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d0ee      	beq.n	80008ca <main+0x86>
			{
				uint8_t pData[DEV_0_DT_LEN];
				//		bufferLength = 100; // buffer length of 100 stores 4 seconds of samples running at 25sps
				// read the first 100 samples, and determine the signal range
				for (uint8_t i = 0 ; i < (ledsBufferLength - 1); i++)
 80008ec:	2300      	movs	r3, #0
 80008ee:	77fb      	strb	r3, [r7, #31]
 80008f0:	e052      	b.n	8000998 <main+0x154>
				{
					while (!MAX30105_available(&particleSensor)) // do we have new data?
						MAX30105_check(&particleSensor);		// Check the sensor for new data
 80008f2:	4871      	ldr	r0, [pc, #452]	; (8000ab8 <main+0x274>)
 80008f4:	f000 fc22 	bl	800113c <MAX30105_check>
					while (!MAX30105_available(&particleSensor)) // do we have new data?
 80008f8:	486f      	ldr	r0, [pc, #444]	; (8000ab8 <main+0x274>)
 80008fa:	f000 fd53 	bl	80013a4 <MAX30105_available>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d0f6      	beq.n	80008f2 <main+0xae>

					redBuffer[i] = MAX30105_getRed(&particleSensor);
 8000904:	486c      	ldr	r0, [pc, #432]	; (8000ab8 <main+0x274>)
 8000906:	f000 fab8 	bl	8000e7a <MAX30105_getRed>
 800090a:	4602      	mov	r2, r0
 800090c:	7ffb      	ldrb	r3, [r7, #31]
 800090e:	b291      	uxth	r1, r2
 8000910:	4a71      	ldr	r2, [pc, #452]	; (8000ad8 <main+0x294>)
 8000912:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					irBuffer[i] = MAX30105_getIR(&particleSensor);
 8000916:	4868      	ldr	r0, [pc, #416]	; (8000ab8 <main+0x274>)
 8000918:	f000 fac8 	bl	8000eac <MAX30105_getIR>
 800091c:	4602      	mov	r2, r0
 800091e:	7ffb      	ldrb	r3, [r7, #31]
 8000920:	b291      	uxth	r1, r2
 8000922:	4a6e      	ldr	r2, [pc, #440]	; (8000adc <main+0x298>)
 8000924:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					MAX30105_nextSample(&particleSensor); // We're finished with this sample so move to next sample
 8000928:	4863      	ldr	r0, [pc, #396]	; (8000ab8 <main+0x274>)
 800092a:	f000 fd56 	bl	80013da <MAX30105_nextSample>
					USART_Transmit(&USART_handler, "\r\nred = %d, i = %d", redBuffer[i], i);
 800092e:	7ffb      	ldrb	r3, [r7, #31]
 8000930:	4a69      	ldr	r2, [pc, #420]	; (8000ad8 <main+0x294>)
 8000932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000936:	461a      	mov	r2, r3
 8000938:	7ffb      	ldrb	r3, [r7, #31]
 800093a:	4969      	ldr	r1, [pc, #420]	; (8000ae0 <main+0x29c>)
 800093c:	4860      	ldr	r0, [pc, #384]	; (8000ac0 <main+0x27c>)
 800093e:	f001 fdfd 	bl	800253c <USART_Transmit>
					USART_Transmit(&USART_handler, ", ir = %d", irBuffer[i]);
 8000942:	7ffb      	ldrb	r3, [r7, #31]
 8000944:	4a65      	ldr	r2, [pc, #404]	; (8000adc <main+0x298>)
 8000946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800094a:	461a      	mov	r2, r3
 800094c:	4965      	ldr	r1, [pc, #404]	; (8000ae4 <main+0x2a0>)
 800094e:	485c      	ldr	r0, [pc, #368]	; (8000ac0 <main+0x27c>)
 8000950:	f001 fdf4 	bl	800253c <USART_Transmit>

					//
					*((uint16_t*)pData + 0) = redBuffer[i];
 8000954:	7ffa      	ldrb	r2, [r7, #31]
 8000956:	463b      	mov	r3, r7
 8000958:	495f      	ldr	r1, [pc, #380]	; (8000ad8 <main+0x294>)
 800095a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800095e:	801a      	strh	r2, [r3, #0]
					*((uint16_t*)pData + 1) = irBuffer[i];
 8000960:	7ffa      	ldrb	r2, [r7, #31]
 8000962:	463b      	mov	r3, r7
 8000964:	3302      	adds	r3, #2
 8000966:	495d      	ldr	r1, [pc, #372]	; (8000adc <main+0x298>)
 8000968:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800096c:	801a      	strh	r2, [r3, #0]
					*((uint32_t*)pData + 1) = spo2;
 800096e:	4b5e      	ldr	r3, [pc, #376]	; (8000ae8 <main+0x2a4>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	463b      	mov	r3, r7
 8000974:	3304      	adds	r3, #4
 8000976:	601a      	str	r2, [r3, #0]
					*((uint32_t*)pData + 2) = heartRate;
 8000978:	4b5c      	ldr	r3, [pc, #368]	; (8000aec <main+0x2a8>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	463b      	mov	r3, r7
 800097e:	3308      	adds	r3, #8
 8000980:	601a      	str	r2, [r3, #0]
					pData[DEV_0_DT_LEN - 1] = i; // sychronize
 8000982:	7ffb      	ldrb	r3, [r7, #31]
 8000984:	733b      	strb	r3, [r7, #12]
					//				HandlerDeviceAction(0x00, DEV_0_DT_LEN, pData);
					HandleDeviceSendFrame(0x00, DEV_0_DT_LEN, pData);
 8000986:	463b      	mov	r3, r7
 8000988:	461a      	mov	r2, r3
 800098a:	210d      	movs	r1, #13
 800098c:	2000      	movs	r0, #0
 800098e:	f7ff fe31 	bl	80005f4 <HandleDeviceSendFrame>
				for (uint8_t i = 0 ; i < (ledsBufferLength - 1); i++)
 8000992:	7ffb      	ldrb	r3, [r7, #31]
 8000994:	3301      	adds	r3, #1
 8000996:	77fb      	strb	r3, [r7, #31]
 8000998:	7ffa      	ldrb	r2, [r7, #31]
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	3b01      	subs	r3, #1
 800099e:	429a      	cmp	r2, r3
 80009a0:	dbaa      	blt.n	80008f8 <main+0xb4>
				}

				// in 100th
				while (!MAX30105_available(&particleSensor)) // do we have new data?
 80009a2:	e002      	b.n	80009aa <main+0x166>
					MAX30105_check(&particleSensor);		// Check the sensor for new data
 80009a4:	4844      	ldr	r0, [pc, #272]	; (8000ab8 <main+0x274>)
 80009a6:	f000 fbc9 	bl	800113c <MAX30105_check>
				while (!MAX30105_available(&particleSensor)) // do we have new data?
 80009aa:	4843      	ldr	r0, [pc, #268]	; (8000ab8 <main+0x274>)
 80009ac:	f000 fcfa 	bl	80013a4 <MAX30105_available>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d0f6      	beq.n	80009a4 <main+0x160>

				redBuffer[ledsBufferLength - 1] = MAX30105_getRed(&particleSensor);
 80009b6:	4840      	ldr	r0, [pc, #256]	; (8000ab8 <main+0x274>)
 80009b8:	f000 fa5f 	bl	8000e7a <MAX30105_getRed>
 80009bc:	4602      	mov	r2, r0
 80009be:	2364      	movs	r3, #100	; 0x64
 80009c0:	3b01      	subs	r3, #1
 80009c2:	b291      	uxth	r1, r2
 80009c4:	4a44      	ldr	r2, [pc, #272]	; (8000ad8 <main+0x294>)
 80009c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				irBuffer[ledsBufferLength - 1] = MAX30105_getIR(&particleSensor);
 80009ca:	483b      	ldr	r0, [pc, #236]	; (8000ab8 <main+0x274>)
 80009cc:	f000 fa6e 	bl	8000eac <MAX30105_getIR>
 80009d0:	4602      	mov	r2, r0
 80009d2:	2364      	movs	r3, #100	; 0x64
 80009d4:	3b01      	subs	r3, #1
 80009d6:	b291      	uxth	r1, r2
 80009d8:	4a40      	ldr	r2, [pc, #256]	; (8000adc <main+0x298>)
 80009da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				MAX30105_nextSample(&particleSensor); // We're finished with this sample so move to next sample
 80009de:	4836      	ldr	r0, [pc, #216]	; (8000ab8 <main+0x274>)
 80009e0:	f000 fcfb 	bl	80013da <MAX30105_nextSample>
				//calculate heart rate and SpO2 after first 100 samples (first 4 seconds of samples)
				maxim_heart_rate_and_oxygen_saturation(irBuffer, ledsBufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
 80009e4:	2164      	movs	r1, #100	; 0x64
 80009e6:	4b42      	ldr	r3, [pc, #264]	; (8000af0 <main+0x2ac>)
 80009e8:	9302      	str	r3, [sp, #8]
 80009ea:	4b40      	ldr	r3, [pc, #256]	; (8000aec <main+0x2a8>)
 80009ec:	9301      	str	r3, [sp, #4]
 80009ee:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <main+0x2b0>)
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	4b3d      	ldr	r3, [pc, #244]	; (8000ae8 <main+0x2a4>)
 80009f4:	4a38      	ldr	r2, [pc, #224]	; (8000ad8 <main+0x294>)
 80009f6:	4839      	ldr	r0, [pc, #228]	; (8000adc <main+0x298>)
 80009f8:	f000 ff1a 	bl	8001830 <maxim_heart_rate_and_oxygen_saturation>

				USART_Transmit(&USART_handler, "\r\nred = %d, i = %d", redBuffer[ledsBufferLength - 1], ledsBufferLength - 1);
 80009fc:	2364      	movs	r3, #100	; 0x64
 80009fe:	3b01      	subs	r3, #1
 8000a00:	4a35      	ldr	r2, [pc, #212]	; (8000ad8 <main+0x294>)
 8000a02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a06:	461a      	mov	r2, r3
 8000a08:	2364      	movs	r3, #100	; 0x64
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	4934      	ldr	r1, [pc, #208]	; (8000ae0 <main+0x29c>)
 8000a0e:	482c      	ldr	r0, [pc, #176]	; (8000ac0 <main+0x27c>)
 8000a10:	f001 fd94 	bl	800253c <USART_Transmit>
				USART_Transmit(&USART_handler, ", ir = %d", irBuffer[ledsBufferLength - 1]);
 8000a14:	2364      	movs	r3, #100	; 0x64
 8000a16:	3b01      	subs	r3, #1
 8000a18:	4a30      	ldr	r2, [pc, #192]	; (8000adc <main+0x298>)
 8000a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4930      	ldr	r1, [pc, #192]	; (8000ae4 <main+0x2a0>)
 8000a22:	4827      	ldr	r0, [pc, #156]	; (8000ac0 <main+0x27c>)
 8000a24:	f001 fd8a 	bl	800253c <USART_Transmit>
				USART_Transmit(&USART_handler, ", HR = %d", heartRate);
 8000a28:	4b30      	ldr	r3, [pc, #192]	; (8000aec <main+0x2a8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4932      	ldr	r1, [pc, #200]	; (8000af8 <main+0x2b4>)
 8000a30:	4823      	ldr	r0, [pc, #140]	; (8000ac0 <main+0x27c>)
 8000a32:	f001 fd83 	bl	800253c <USART_Transmit>
				USART_Transmit(&USART_handler, ", HRvalid = %d", validHeartRate);
 8000a36:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <main+0x2ac>)
 8000a38:	f993 3000 	ldrsb.w	r3, [r3]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	492f      	ldr	r1, [pc, #188]	; (8000afc <main+0x2b8>)
 8000a40:	481f      	ldr	r0, [pc, #124]	; (8000ac0 <main+0x27c>)
 8000a42:	f001 fd7b 	bl	800253c <USART_Transmit>
				USART_Transmit(&USART_handler, ", SPO2 = %d", spo2);
 8000a46:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <main+0x2a4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	492c      	ldr	r1, [pc, #176]	; (8000b00 <main+0x2bc>)
 8000a4e:	481c      	ldr	r0, [pc, #112]	; (8000ac0 <main+0x27c>)
 8000a50:	f001 fd74 	bl	800253c <USART_Transmit>
				USART_Transmit(&USART_handler, ", SPO2Valid = %d", validSPO2);
 8000a54:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <main+0x2b0>)
 8000a56:	f993 3000 	ldrsb.w	r3, [r3]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4929      	ldr	r1, [pc, #164]	; (8000b04 <main+0x2c0>)
 8000a5e:	4818      	ldr	r0, [pc, #96]	; (8000ac0 <main+0x27c>)
 8000a60:	f001 fd6c 	bl	800253c <USART_Transmit>

				//
				*((uint16_t*)pData + 0) = redBuffer[ledsBufferLength - 1];
 8000a64:	2364      	movs	r3, #100	; 0x64
 8000a66:	1e5a      	subs	r2, r3, #1
 8000a68:	463b      	mov	r3, r7
 8000a6a:	491b      	ldr	r1, [pc, #108]	; (8000ad8 <main+0x294>)
 8000a6c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000a70:	801a      	strh	r2, [r3, #0]
				*((uint16_t*)pData + 1) = irBuffer[ledsBufferLength - 1];
 8000a72:	2364      	movs	r3, #100	; 0x64
 8000a74:	1e5a      	subs	r2, r3, #1
 8000a76:	463b      	mov	r3, r7
 8000a78:	3302      	adds	r3, #2
 8000a7a:	4918      	ldr	r1, [pc, #96]	; (8000adc <main+0x298>)
 8000a7c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000a80:	801a      	strh	r2, [r3, #0]
				*((uint32_t*)pData + 1) = spo2;
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <main+0x2a4>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	463b      	mov	r3, r7
 8000a88:	3304      	adds	r3, #4
 8000a8a:	601a      	str	r2, [r3, #0]
				*((uint32_t*)pData + 2) = heartRate;
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <main+0x2a8>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	463b      	mov	r3, r7
 8000a92:	3308      	adds	r3, #8
 8000a94:	601a      	str	r2, [r3, #0]
				pData[DEV_0_DT_LEN - 1] = ledsBufferLength - 1; // sychronize
 8000a96:	2364      	movs	r3, #100	; 0x64
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	733b      	strb	r3, [r7, #12]
				//			HandlerDeviceAction(0x00, DEV_0_DT_LEN, pData);
				HandleDeviceSendFrame(0x00, DEV_0_DT_LEN, pData);
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	210d      	movs	r1, #13
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f7ff fda4 	bl	80005f4 <HandleDeviceSendFrame>
		if(RxTail != RxHead || FrameParse.FP_MOD == DECT_COML)
 8000aac:	e70d      	b.n	80008ca <main+0x86>
 8000aae:	bf00      	nop
 8000ab0:	20000370 	.word	0x20000370
 8000ab4:	20000290 	.word	0x20000290
 8000ab8:	2000047c 	.word	0x2000047c
 8000abc:	20000328 	.word	0x20000328
 8000ac0:	200004b8 	.word	0x200004b8
 8000ac4:	2000036c 	.word	0x2000036c
 8000ac8:	200002e4 	.word	0x200002e4
 8000acc:	20000d84 	.word	0x20000d84
 8000ad0:	20000d80 	.word	0x20000d80
 8000ad4:	20000659 	.word	0x20000659
 8000ad8:	20000584 	.word	0x20000584
 8000adc:	200004bc 	.word	0x200004bc
 8000ae0:	08005b34 	.word	0x08005b34
 8000ae4:	08005b48 	.word	0x08005b48
 8000ae8:	2000064c 	.word	0x2000064c
 8000aec:	20000654 	.word	0x20000654
 8000af0:	20000658 	.word	0x20000658
 8000af4:	20000650 	.word	0x20000650
 8000af8:	08005b54 	.word	0x08005b54
 8000afc:	08005b60 	.word	0x08005b60
 8000b00:	08005b70 	.word	0x08005b70
 8000b04:	08005b7c 	.word	0x08005b7c

08000b08 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b090      	sub	sp, #64	; 0x40
 8000b0c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 0318 	add.w	r3, r7, #24
 8000b12:	2228      	movs	r2, #40	; 0x28
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f004 fb5a 	bl	80051d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b32:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b44:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b46:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4c:	f107 0318 	add.w	r3, r7, #24
 8000b50:	4618      	mov	r0, r3
 8000b52:	f003 f9c1 	bl	8003ed8 <HAL_RCC_OscConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0x58>
	{
		Error_Handler();
 8000b5c:	f000 f90a 	bl	8000d74 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b60:	230f      	movs	r3, #15
 8000b62:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b64:	2302      	movs	r3, #2
 8000b66:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b70:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2102      	movs	r1, #2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f003 fc2e 	bl	80043dc <HAL_RCC_ClockConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0x82>
	{
		Error_Handler();
 8000b86:	f000 f8f5 	bl	8000d74 <Error_Handler>
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	3740      	adds	r7, #64	; 0x40
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <MX_I2C2_Init+0x50>)
 8000b9a:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <MX_I2C2_Init+0x54>)
 8000b9c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_I2C2_Init+0x50>)
 8000ba0:	4a12      	ldr	r2, [pc, #72]	; (8000bec <MX_I2C2_Init+0x58>)
 8000ba2:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_I2C2_Init+0x50>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_I2C2_Init+0x50>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_I2C2_Init+0x50>)
 8000bb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bb6:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <MX_I2C2_Init+0x50>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_I2C2_Init+0x50>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <MX_I2C2_Init+0x50>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_I2C2_Init+0x50>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <MX_I2C2_Init+0x50>)
 8000bd2:	f002 f99b 	bl	8002f0c <HAL_I2C_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 8000bdc:	f000 f8ca 	bl	8000d74 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000290 	.word	0x20000290
 8000be8:	40005800 	.word	0x40005800
 8000bec:	00061a80 	.word	0x00061a80

08000bf0 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_UART4_Init+0x4c>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <MX_UART4_Init+0x50>)
 8000bf8:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <MX_UART4_Init+0x4c>)
 8000bfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c00:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_UART4_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_UART4_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <MX_UART4_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_UART4_Init+0x4c>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_UART4_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_UART4_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_UART4_Init+0x4c>)
 8000c28:	f003 fd70 	bl	800470c <HAL_UART_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_UART4_Init+0x46>
	{
		Error_Handler();
 8000c32:	f000 f89f 	bl	8000d74 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200002e4 	.word	0x200002e4
 8000c40:	40004c00 	.word	0x40004c00

08000c44 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <MX_USART1_UART_Init+0x50>)
 8000c4c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c54:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c7c:	f003 fd46 	bl	800470c <HAL_UART_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000c86:	f000 f875 	bl	8000d74 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000328 	.word	0x20000328
 8000c94:	40013800 	.word	0x40013800

08000c98 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	f107 0310 	add.w	r3, r7, #16
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000cac:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a2d      	ldr	r2, [pc, #180]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000cb2:	f043 0310 	orr.w	r3, r3, #16
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b2b      	ldr	r3, [pc, #172]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0310 	and.w	r3, r3, #16
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc4:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a27      	ldr	r2, [pc, #156]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000cca:	f043 0320 	orr.w	r3, r3, #32
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0320 	and.w	r3, r3, #32
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b22      	ldr	r3, [pc, #136]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a21      	ldr	r2, [pc, #132]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000ce2:	f043 0308 	orr.w	r3, r3, #8
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0308 	and.w	r3, r3, #8
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000cfa:	f043 0304 	orr.w	r3, r3, #4
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d12:	4816      	ldr	r0, [pc, #88]	; (8000d6c <MX_GPIO_Init+0xd4>)
 8000d14:	f002 f8c0 	bl	8002e98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_GPIO_Init+0xd8>)
 8000d20:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480f      	ldr	r0, [pc, #60]	; (8000d6c <MX_GPIO_Init+0xd4>)
 8000d2e:	f001 ff1f 	bl	8002b70 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d36:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2302      	movs	r3, #2
 8000d42:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4808      	ldr	r0, [pc, #32]	; (8000d6c <MX_GPIO_Init+0xd4>)
 8000d4c:	f001 ff10 	bl	8002b70 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2100      	movs	r1, #0
 8000d54:	2028      	movs	r0, #40	; 0x28
 8000d56:	f001 fd92 	bl	800287e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d5a:	2028      	movs	r0, #40	; 0x28
 8000d5c:	f001 fdab 	bl	80028b6 <HAL_NVIC_EnableIRQ>

}
 8000d60:	bf00      	nop
 8000d62:	3720      	adds	r7, #32
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40010c00 	.word	0x40010c00
 8000d70:	10110000 	.word	0x10110000

08000d74 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d7c:	e7fe      	b.n	8000d7c <Error_Handler+0x8>

08000d7e <I2C_WriteBuffer>:
static const uint8_t SLOT_GREEN_PILOT = 		0x07u;

//

void I2C_WriteBuffer(MAX30105_t *MAX30105_handler, uint8_t address, uint8_t *reg, uint8_t sizeBuf)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af02      	add	r7, sp, #8
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	607a      	str	r2, [r7, #4]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	72fb      	strb	r3, [r7, #11]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	72bb      	strb	r3, [r7, #10]
	while(HAL_I2C_Master_Transmit(MAX30105_handler->hi2c, address, reg, sizeBuf, 100))
 8000d92:	e004      	b.n	8000d9e <I2C_WriteBuffer+0x20>
	{
		if(HAL_I2C_GetError(MAX30105_handler->hi2c) != HAL_I2C_ERROR_AF)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f002 fd66 	bl	800386a <HAL_I2C_GetError>
	while(HAL_I2C_Master_Transmit(MAX30105_handler->hi2c, address, reg, sizeBuf, 100))
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	6818      	ldr	r0, [r3, #0]
 8000da2:	7afb      	ldrb	r3, [r7, #11]
 8000da4:	b299      	uxth	r1, r3
 8000da6:	7abb      	ldrb	r3, [r7, #10]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	2264      	movs	r2, #100	; 0x64
 8000dac:	9200      	str	r2, [sp, #0]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	f002 f9f0 	bl	8003194 <HAL_I2C_Master_Transmit>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1ec      	bne.n	8000d94 <I2C_WriteBuffer+0x16>
		{

		}
	}
}
 8000dba:	bf00      	nop
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <I2C_ReadBuffer>:

void I2C_ReadBuffer(MAX30105_t *MAX30105_handler, uint8_t address, uint8_t *pData, uint8_t sizeBuf)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af02      	add	r7, sp, #8
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	72fb      	strb	r3, [r7, #11]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	72bb      	strb	r3, [r7, #10]
	while(HAL_I2C_Master_Receive(MAX30105_handler->hi2c, address, pData, sizeBuf, 100))
 8000dd8:	e004      	b.n	8000de4 <I2C_ReadBuffer+0x20>
	{
		if(HAL_I2C_GetError(MAX30105_handler->hi2c) != HAL_I2C_ERROR_AF)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f002 fd43 	bl	800386a <HAL_I2C_GetError>
	while(HAL_I2C_Master_Receive(MAX30105_handler->hi2c, address, pData, sizeBuf, 100))
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	7afb      	ldrb	r3, [r7, #11]
 8000dea:	b299      	uxth	r1, r3
 8000dec:	7abb      	ldrb	r3, [r7, #10]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	2264      	movs	r2, #100	; 0x64
 8000df2:	9200      	str	r2, [sp, #0]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	f002 facb 	bl	8003390 <HAL_I2C_Master_Receive>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1ec      	bne.n	8000dda <I2C_ReadBuffer+0x16>
		{

		}
	}
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <MAX30105_Init>:
void MAX30105_Init(MAX30105_t *MAX30105_handler, I2C_HandleTypeDef *hi2c)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	6039      	str	r1, [r7, #0]
	MAX30105_handler->hi2c = hi2c;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	601a      	str	r2, [r3, #0]
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <MAX30105_readPartID>:

uint8_t MAX30105_readPartID(MAX30105_t *MAX30105_handler)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	return MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_PARTID);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	791b      	ldrb	r3, [r3, #4]
 8000e30:	22ff      	movs	r2, #255	; 0xff
 8000e32:	4619      	mov	r1, r3
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 fb2c 	bl	8001492 <MAX30105_readRegister8>
 8000e3a:	4603      	mov	r3, r0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <MAX30105_begin>:

uint8_t MAX30105_begin(MAX30105_t *MAX30105_handler, uint8_t i2caddr)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	70fb      	strb	r3, [r7, #3]
	MAX30105_handler->_i2caddr = i2caddr;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	78fa      	ldrb	r2, [r7, #3]
 8000e54:	711a      	strb	r2, [r3, #4]

	// Step 1: Initial Communication and Verification
	// Check that a MAX30105 is connected
	if(MAX30105_readPartID(MAX30105_handler) != MAX_30105_EXPECTEDPARTID)
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ffe4 	bl	8000e24 <MAX30105_readPartID>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	2315      	movs	r3, #21
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d001      	beq.n	8000e6a <MAX30105_begin+0x26>
		// Error -- Part ID read from MAX30105 does not match expected part ID.
		// This may mean there is a physical connectivity problem (broken wire, unpowered, etc).
		return MAX30105_FAIL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e003      	b.n	8000e72 <MAX30105_begin+0x2e>

	// Populate revision ID
	MAX30105_readRevisionID(MAX30105_handler);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 fb55 	bl	800151a <MAX30105_readRevisionID>

	return MAX30105_OK;
 8000e70:	2301      	movs	r3, #1
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <MAX30105_getRed>:

// Report the most recent red value
uint32_t MAX30105_getRed(MAX30105_t *MAX30105_handler)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
	// Check the sensor for new data for 250ms
	if (MAX30105_safeCheck(MAX30105_handler, 250))
 8000e82:	21fa      	movs	r1, #250	; 0xfa
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f000 f82a 	bl	8000ede <MAX30105_safeCheck>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d008      	beq.n	8000ea2 <MAX30105_getRed+0x28>
		return (MAX30105_handler->sense.red[MAX30105_handler->sense.head]);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000e96:	461a      	mov	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3202      	adds	r2, #2
 8000e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea0:	e000      	b.n	8000ea4 <MAX30105_getRed+0x2a>
	else
		return (0); // Sensor failed to find new data
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <MAX30105_getIR>:

// Report the most recent IR value
int32_t MAX30105_getIR(MAX30105_t *MAX30105_handler)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	// Check the sensor for new data for 250ms
	if (MAX30105_safeCheck(MAX30105_handler, 250))
 8000eb4:	21fa      	movs	r1, #250	; 0xfa
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f000 f811 	bl	8000ede <MAX30105_safeCheck>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d008      	beq.n	8000ed4 <MAX30105_getIR+0x28>
		return (MAX30105_handler->sense.IR[MAX30105_handler->sense.head]);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ec8:	461a      	mov	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3206      	adds	r2, #6
 8000ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed2:	e000      	b.n	8000ed6 <MAX30105_getIR+0x2a>
	else
		return (0); // Sensor failed to find new data
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <MAX30105_safeCheck>:

// Check for new data but give up after a certain amount of time
// Returns true if new data was found
// Returns false if new data was not found
uint8_t MAX30105_safeCheck(MAX30105_t *MAX30105_handler, uint8_t maxTimeToCheck)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	70fb      	strb	r3, [r7, #3]
	uint32_t markTime = HAL_GetTick();
 8000eea:	f001 fbc3 	bl	8002674 <HAL_GetTick>
 8000eee:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if(HAL_GetTick() - markTime > maxTimeToCheck)
 8000ef0:	f001 fbc0 	bl	8002674 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	1ad2      	subs	r2, r2, r3
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d901      	bls.n	8000f04 <MAX30105_safeCheck+0x26>
			return 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	e00b      	b.n	8000f1c <MAX30105_safeCheck+0x3e>
		if(MAX30105_check(MAX30105_handler) == 1) // We found new data!
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 f919 	bl	800113c <MAX30105_check>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d101      	bne.n	8000f14 <MAX30105_safeCheck+0x36>
			return 1;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e003      	b.n	8000f1c <MAX30105_safeCheck+0x3e>

		HAL_Delay(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f001 fbb7 	bl	8002688 <HAL_Delay>
		if(HAL_GetTick() - markTime > maxTimeToCheck)
 8000f1a:	e7e9      	b.n	8000ef0 <MAX30105_safeCheck+0x12>
	}
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <MAX30105_softReset>:

//End Interrupt configuration
void MAX30105_softReset(MAX30105_t *MAX30105_handler)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	MAX30105_bitMask(MAX30105_handler, MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
 8000f2c:	2109      	movs	r1, #9
 8000f2e:	22bf      	movs	r2, #191	; 0xbf
 8000f30:	2340      	movs	r3, #64	; 0x40
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 fb04 	bl	8001540 <MAX30105_bitMask>

	// Poll for bit to clear, reset is then complete
	// Timeout after 100ms
	for(uint8_t i = 0;i < 100;i++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	e014      	b.n	8000f68 <MAX30105_softReset+0x44>
	{
		uint8_t response = MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_MODECONFIG);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	791b      	ldrb	r3, [r3, #4]
 8000f42:	2209      	movs	r2, #9
 8000f44:	4619      	mov	r1, r3
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 faa3 	bl	8001492 <MAX30105_readRegister8>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	73bb      	strb	r3, [r7, #14]
		if ((response & MAX30105_RESET) == 0)
 8000f50:	2240      	movs	r2, #64	; 0x40
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	4013      	ands	r3, r2
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d009      	beq.n	8000f70 <MAX30105_softReset+0x4c>
			break; //We're done!
		HAL_Delay(1); //Let's not over burden the I2C bus
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f001 fb93 	bl	8002688 <HAL_Delay>
	for(uint8_t i = 0;i < 100;i++)
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	3301      	adds	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b63      	cmp	r3, #99	; 0x63
 8000f6c:	d9e7      	bls.n	8000f3e <MAX30105_softReset+0x1a>
	}
}
 8000f6e:	e000      	b.n	8000f72 <MAX30105_softReset+0x4e>
			break; //We're done!
 8000f70:	bf00      	nop
}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <MAX30105_setLEDMode>:

void MAX30105_setLEDMode(MAX30105_t *MAX30105_handler, uint8_t mode)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	460b      	mov	r3, r1
 8000f84:	70fb      	strb	r3, [r7, #3]
	// Set which LEDs are used for sampling -- Red only, RED+IR only, or custom.
	// See datasheet, page 19
	MAX30105_bitMask(MAX30105_handler, MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
 8000f86:	2109      	movs	r1, #9
 8000f88:	22f8      	movs	r2, #248	; 0xf8
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f000 fad7 	bl	8001540 <MAX30105_bitMask>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <MAX30105_setADCRange>:

void MAX30105_setADCRange(MAX30105_t *MAX30105_handler, uint8_t adcRange)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	70fb      	strb	r3, [r7, #3]
	// adcRange: one of MAX30105_ADCRANGE_2048, _4096, _8192, _16384
	MAX30105_bitMask(MAX30105_handler, MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
 8000fa6:	210a      	movs	r1, #10
 8000fa8:	229f      	movs	r2, #159	; 0x9f
 8000faa:	78fb      	ldrb	r3, [r7, #3]
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 fac7 	bl	8001540 <MAX30105_bitMask>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <MAX30105_setSampleRate>:

void MAX30105_setSampleRate(MAX30105_t *MAX30105_handler, uint8_t sampleRate)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	70fb      	strb	r3, [r7, #3]
	// sampleRate: one of MAX30105_SAMPLERATE_50, _100, _200, _400, _800, _1000, _1600, _3200
	MAX30105_bitMask(MAX30105_handler, MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
 8000fc6:	210a      	movs	r1, #10
 8000fc8:	22e3      	movs	r2, #227	; 0xe3
 8000fca:	78fb      	ldrb	r3, [r7, #3]
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 fab7 	bl	8001540 <MAX30105_bitMask>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <MAX30105_setPulseWidth>:

void MAX30105_setPulseWidth(MAX30105_t *MAX30105_handler, uint8_t pulseWidth)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	70fb      	strb	r3, [r7, #3]
	// pulseWidth: one of MAX30105_PULSEWIDTH_69, _188, _215, _411
	MAX30105_bitMask(MAX30105_handler, MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
 8000fe6:	210a      	movs	r1, #10
 8000fe8:	22fc      	movs	r2, #252	; 0xfc
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 faa7 	bl	8001540 <MAX30105_bitMask>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <MAX30105_setPulseAmplitudeRed>:

// NOTE: Amplitude values: 0x00 = 0mA, 0x7F = 25.4mA, 0xFF = 50mA (typical)
// See datasheet, page 21
void MAX30105_setPulseAmplitudeRed(MAX30105_t *MAX30105_handler, uint8_t value)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	460b      	mov	r3, r1
 8001004:	70fb      	strb	r3, [r7, #3]
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_LED1_PULSEAMP, value);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7919      	ldrb	r1, [r3, #4]
 800100a:	220c      	movs	r2, #12
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 fa67 	bl	80014e2 <MAX30105_writeRegister8>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <MAX30105_setPulseAmplitudeIR>:

void MAX30105_setPulseAmplitudeIR(MAX30105_t *MAX30105_handler, uint8_t value)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	70fb      	strb	r3, [r7, #3]
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_LED2_PULSEAMP, value);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7919      	ldrb	r1, [r3, #4]
 800102c:	220d      	movs	r2, #13
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 fa56 	bl	80014e2 <MAX30105_writeRegister8>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <MAX30105_setPulseAmplitudeGreen>:

void MAX30105_setPulseAmplitudeGreen(MAX30105_t *MAX30105_handler, uint8_t value)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	70fb      	strb	r3, [r7, #3]
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_LED3_PULSEAMP, value);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7919      	ldrb	r1, [r3, #4]
 800104e:	220e      	movs	r2, #14
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 fa45 	bl	80014e2 <MAX30105_writeRegister8>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <MAX30105_setPulseAmplitudeProximity>:

void MAX30105_setPulseAmplitudeProximity(MAX30105_t *MAX30105_handler, uint8_t value)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_LED_PROX_AMP, value);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7919      	ldrb	r1, [r3, #4]
 8001070:	2210      	movs	r2, #16
 8001072:	78fb      	ldrb	r3, [r7, #3]
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 fa34 	bl	80014e2 <MAX30105_writeRegister8>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <MAX30105_enableSlot>:

void MAX30105_enableSlot(MAX30105_t *MAX30105_handler, uint8_t slotNumber, uint8_t device)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	70fb      	strb	r3, [r7, #3]
 8001090:	4613      	mov	r3, r2
 8001092:	70bb      	strb	r3, [r7, #2]
//	uint8_t originalContents;

	switch (slotNumber) {
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	3b01      	subs	r3, #1
 8001098:	2b03      	cmp	r3, #3
 800109a:	d82b      	bhi.n	80010f4 <MAX30105_enableSlot+0x70>
 800109c:	a201      	add	r2, pc, #4	; (adr r2, 80010a4 <MAX30105_enableSlot+0x20>)
 800109e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a2:	bf00      	nop
 80010a4:	080010b5 	.word	0x080010b5
 80010a8:	080010c3 	.word	0x080010c3
 80010ac:	080010d5 	.word	0x080010d5
 80010b0:	080010e3 	.word	0x080010e3
	case 1:
		MAX30105_bitMask(MAX30105_handler, MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
 80010b4:	2111      	movs	r1, #17
 80010b6:	22f8      	movs	r2, #248	; 0xf8
 80010b8:	78bb      	ldrb	r3, [r7, #2]
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 fa40 	bl	8001540 <MAX30105_bitMask>
		break;
 80010c0:	e019      	b.n	80010f6 <MAX30105_enableSlot+0x72>
	case 2:
		MAX30105_bitMask(MAX30105_handler, MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 80010c2:	2111      	movs	r1, #17
 80010c4:	228f      	movs	r2, #143	; 0x8f
 80010c6:	78bb      	ldrb	r3, [r7, #2]
 80010c8:	011b      	lsls	r3, r3, #4
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 fa37 	bl	8001540 <MAX30105_bitMask>
		break;
 80010d2:	e010      	b.n	80010f6 <MAX30105_enableSlot+0x72>
	case 3:
		MAX30105_bitMask(MAX30105_handler, MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
 80010d4:	2112      	movs	r1, #18
 80010d6:	22f8      	movs	r2, #248	; 0xf8
 80010d8:	78bb      	ldrb	r3, [r7, #2]
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 fa30 	bl	8001540 <MAX30105_bitMask>
		break;
 80010e0:	e009      	b.n	80010f6 <MAX30105_enableSlot+0x72>
	case 4:
		MAX30105_bitMask(MAX30105_handler, MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
 80010e2:	2112      	movs	r1, #18
 80010e4:	228f      	movs	r2, #143	; 0x8f
 80010e6:	78bb      	ldrb	r3, [r7, #2]
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 fa27 	bl	8001540 <MAX30105_bitMask>
		break;
 80010f2:	e000      	b.n	80010f6 <MAX30105_enableSlot+0x72>
	default:
		//Shouldn't be here!
		break;
 80010f4:	bf00      	nop
	}
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop

08001100 <MAX30105_setFIFOAverage>:
// FIFO Configuration
//

//Set sample average (Table 3, Page 18)
void MAX30105_setFIFOAverage(MAX30105_t *MAX30105_handler, uint8_t samples)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	70fb      	strb	r3, [r7, #3]
	MAX30105_bitMask(MAX30105_handler, MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, samples);
 800110c:	2108      	movs	r1, #8
 800110e:	221f      	movs	r2, #31
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 fa14 	bl	8001540 <MAX30105_bitMask>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <MAX30105_enableFIFORollover>:

//Enable roll over if FIFO over flows
void MAX30105_enableFIFORollover(MAX30105_t *MAX30105_handler)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	MAX30105_bitMask(MAX30105_handler, MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
 8001128:	2108      	movs	r1, #8
 800112a:	22ef      	movs	r2, #239	; 0xef
 800112c:	2310      	movs	r3, #16
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 fa06 	bl	8001540 <MAX30105_bitMask>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <MAX30105_check>:
//Polls the sensor for new data
//Call regularly
//If new data is available, it updates the head and tail in the main struct
//Returns number of new samples obtained
uint16_t MAX30105_check(MAX30105_t *MAX30105_handler)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b090      	sub	sp, #64	; 0x40
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	//Read register FIDO_DATA in (3-byte * number of active LED) chunks
	//Until FIFO_RD_PTR = FIFO_WR_PTR
	uint8_t readPointer = MAX30105_getReadPointer(MAX30105_handler);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 f977 	bl	8001438 <MAX30105_getReadPointer>
 800114a:	4603      	mov	r3, r0
 800114c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t writePointer = MAX30105_getWritePointer(MAX30105_handler);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f961 	bl	8001418 <MAX30105_getWritePointer>
 8001156:	4603      	mov	r3, r0
 8001158:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	int numberOfSamples = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Do we have new data?
	if (readPointer != writePointer)
 8001160:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8001164:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001168:	429a      	cmp	r2, r3
 800116a:	f000 8115 	beq.w	8001398 <MAX30105_check+0x25c>
	{
		//Calculate the number of readings we need to get from sensor
		numberOfSamples = writePointer - readPointer;
 800116e:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8001172:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 800117a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800117c:	2b00      	cmp	r3, #0
 800117e:	da02      	bge.n	8001186 <MAX30105_check+0x4a>
 8001180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001182:	3320      	adds	r3, #32
 8001184:	63fb      	str	r3, [r7, #60]	; 0x3c

		//We now have the number of readings, now calc bytes to read
		//For this example we are just doing Red and IR (3 bytes each)
		int bytesLeftToRead = numberOfSamples * MAX30105_handler->activeLEDs * 3;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	795b      	ldrb	r3, [r3, #5]
 800118a:	461a      	mov	r2, r3
 800118c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800118e:	fb03 f202 	mul.w	r2, r3, r2
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	63bb      	str	r3, [r7, #56]	; 0x38

		//Get ready to read a burst of data from the FIFO register
		uint8_t reg = MAX30105_FIFODATA;
 800119a:	2307      	movs	r3, #7
 800119c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		I2C_WriteBuffer(MAX30105_handler, MAX30105_handler->_i2caddr, &reg, 1);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7919      	ldrb	r1, [r3, #4]
 80011a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80011a8:	2301      	movs	r3, #1
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff fde7 	bl	8000d7e <I2C_WriteBuffer>

		//We may need to read as many as 288 bytes so we read in blocks no larger than I2C_BUFFER_LENGTH
		//I2C_BUFFER_LENGTH changes based on the platform. 64 bytes for SAMD21, 32 bytes for Uno.
		//Wire.requestFrom() is limited to BUFFER_LENGTH which is 32 on the Uno
		while (bytesLeftToRead > 0)
 80011b0:	e0ee      	b.n	8001390 <MAX30105_check+0x254>
		{
			int toGet = bytesLeftToRead;
 80011b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
			if (toGet > I2C_BUFFER_LENGTH)
 80011b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b8:	2b20      	cmp	r3, #32
 80011ba:	dd0e      	ble.n	80011da <MAX30105_check+0x9e>
			{
				//If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
				//32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
				//32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

				toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (MAX30105_handler->activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	795b      	ldrb	r3, [r3, #5]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	2220      	movs	r2, #32
 80011ca:	fb92 f1f3 	sdiv	r1, r2, r3
 80011ce:	fb01 f303 	mul.w	r3, r1, r3
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	f1c3 0320 	rsb	r3, r3, #32
 80011d8:	637b      	str	r3, [r7, #52]	; 0x34
			}

			bytesLeftToRead -= toGet;
 80011da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	63bb      	str	r3, [r7, #56]	; 0x38

			uint8_t pData[I2C_BUFFER_LENGTH] = {0};
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
 80011f6:	615a      	str	r2, [r3, #20]
 80011f8:	619a      	str	r2, [r3, #24]
			I2C_ReadBuffer(MAX30105_handler, MAX30105_handler->_i2caddr, pData, (uint8_t)toGet);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7919      	ldrb	r1, [r3, #4]
 80011fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f107 0208 	add.w	r2, r7, #8
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff fddc 	bl	8000dc4 <I2C_ReadBuffer>

			while (toGet > 0)
 800120c:	e0bc      	b.n	8001388 <MAX30105_check+0x24c>
			{
				MAX30105_handler->sense.head++; //Advance the head of the storage struct
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001214:	3301      	adds	r3, #1
 8001216:	b2da      	uxtb	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				MAX30105_handler->sense.head %= STORAGE_SIZE; //Wrap condition
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	b2da      	uxtb	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

				uint8_t temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
				uint32_t tempLong;

				uint8_t pIndex = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				//Burst read three bytes - RED
				temp[3] = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				temp[2] = pData[pIndex++];
 800123c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
 8001246:	3340      	adds	r3, #64	; 0x40
 8001248:	443b      	add	r3, r7
 800124a:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800124e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				temp[1] = pData[pIndex++];
 8001252:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
 800125c:	3340      	adds	r3, #64	; 0x40
 800125e:	443b      	add	r3, r7
 8001260:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001264:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				temp[0] = pData[pIndex++];
 8001268:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
 8001272:	3340      	adds	r3, #64	; 0x40
 8001274:	443b      	add	r3, r7
 8001276:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800127a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800127e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

				// Convert array to long
				memcpy(&tempLong, temp, sizeof(tempLong));
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28

				tempLong &= 0x3FFFFu; // Zero out all but 18 bits
 8001282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001284:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28

				MAX30105_handler->sense.red[MAX30105_handler->sense.head] = tempLong; // Store this reading into the sense array
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001290:	461a      	mov	r2, r3
 8001292:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3202      	adds	r2, #2
 8001298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				if (MAX30105_handler->activeLEDs > 1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	795b      	ldrb	r3, [r3, #5]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d932      	bls.n	800130a <MAX30105_check+0x1ce>
				{
					// Burst read three more bytes - IR
					temp[3] = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					temp[2] = pData[pIndex++];
 80012aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
 80012b4:	3340      	adds	r3, #64	; 0x40
 80012b6:	443b      	add	r3, r7
 80012b8:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80012bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					temp[1] = pData[pIndex++];
 80012c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
 80012ca:	3340      	adds	r3, #64	; 0x40
 80012cc:	443b      	add	r3, r7
 80012ce:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80012d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					temp[0] = pData[pIndex++];
 80012d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
 80012e0:	3340      	adds	r3, #64	; 0x40
 80012e2:	443b      	add	r3, r7
 80012e4:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80012e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80012ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c

					// Convert array to long
					memcpy(&tempLong, temp, sizeof(tempLong));
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28

					tempLong &= 0x3FFFF; // Zero out all but 18 bits
 80012f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f2:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28

					MAX30105_handler->sense.IR[MAX30105_handler->sense.head] = tempLong;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012fe:	461a      	mov	r2, r3
 8001300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3206      	adds	r2, #6
 8001306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				}

				if (MAX30105_handler->activeLEDs > 2)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	795b      	ldrb	r3, [r3, #5]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d932      	bls.n	8001378 <MAX30105_check+0x23c>
				{
					// Burst read three more bytes - Green
					temp[3] = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					temp[2] = pData[pIndex++];
 8001318:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
 8001322:	3340      	adds	r3, #64	; 0x40
 8001324:	443b      	add	r3, r7
 8001326:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800132a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					temp[1] = pData[pIndex++];
 800132e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
 8001338:	3340      	adds	r3, #64	; 0x40
 800133a:	443b      	add	r3, r7
 800133c:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001340:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					temp[0] = pData[pIndex++];
 8001344:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
 800134e:	3340      	adds	r3, #64	; 0x40
 8001350:	443b      	add	r3, r7
 8001352:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001356:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800135a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

					// Convert array to long
					memcpy(&tempLong, temp, sizeof(tempLong));
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28

					tempLong &= 0x3FFFF; // Zero out all but 18 bits
 800135e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001360:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28

					MAX30105_handler->sense.green[MAX30105_handler->sense.head] = tempLong;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800136c:	461a      	mov	r2, r3
 800136e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	320a      	adds	r2, #10
 8001374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				}

				toGet -= MAX30105_handler->activeLEDs * 3;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	795b      	ldrb	r3, [r3, #5]
 800137c:	461a      	mov	r2, r3
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001384:	4413      	add	r3, r2
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
			while (toGet > 0)
 8001388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800138a:	2b00      	cmp	r3, #0
 800138c:	f73f af3f 	bgt.w	800120e <MAX30105_check+0xd2>
		while (bytesLeftToRead > 0)
 8001390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001392:	2b00      	cmp	r3, #0
 8001394:	f73f af0d 	bgt.w	80011b2 <MAX30105_check+0x76>
			}
		}// End while (bytesLeftToRead > 0)

	}// End readPtr != writePtr

	return (numberOfSamples); // Let the world know how much new data we found
 8001398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800139a:	b29b      	uxth	r3, r3
}
 800139c:	4618      	mov	r0, r3
 800139e:	3740      	adds	r7, #64	; 0x40
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <MAX30105_available>:

//Tell caller how many samples are available
uint8_t MAX30105_available(MAX30105_t *MAX30105_handler)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	int8_t numberOfSamples = MAX30105_handler->sense.head - MAX30105_handler->sense.tail;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	73fb      	strb	r3, [r7, #15]
	if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	da03      	bge.n	80013ce <MAX30105_available+0x2a>
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	3304      	adds	r3, #4
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	73fb      	strb	r3, [r7, #15]

	return (numberOfSamples);
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <MAX30105_nextSample>:

// Advance the tail
void MAX30105_nextSample(MAX30105_t *MAX30105_handler)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
	if (MAX30105_available(MAX30105_handler)) // Only advance the tail if new data is available
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffde 	bl	80013a4 <MAX30105_available>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d010      	beq.n	8001410 <MAX30105_nextSample+0x36>
	  {
	    MAX30105_handler->sense.tail++;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013f4:	3301      	adds	r3, #1
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    MAX30105_handler->sense.tail %= STORAGE_SIZE; // Wrap condition
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	b2da      	uxtb	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	  }
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <MAX30105_getWritePointer>:

//Read the FIFO Write Pointer
uint8_t MAX30105_getWritePointer(MAX30105_t *MAX30105_handler)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	return (MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_FIFOWRITEPTR));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	791b      	ldrb	r3, [r3, #4]
 8001424:	2204      	movs	r2, #4
 8001426:	4619      	mov	r1, r3
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 f832 	bl	8001492 <MAX30105_readRegister8>
 800142e:	4603      	mov	r3, r0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <MAX30105_getReadPointer>:

//Read the FIFO Read Pointer
uint8_t MAX30105_getReadPointer(MAX30105_t *MAX30105_handler)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	return (MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_FIFOREADPTR));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	791b      	ldrb	r3, [r3, #4]
 8001444:	2206      	movs	r2, #6
 8001446:	4619      	mov	r1, r3
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f822 	bl	8001492 <MAX30105_readRegister8>
 800144e:	4603      	mov	r3, r0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <MAX30105_clearFIFO>:

void MAX30105_clearFIFO(MAX30105_t *MAX30105_handler)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	//Resets all points to start in a known state
	//Page 15 recommends clearing FIFO before beginning a read
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_FIFOWRITEPTR, 0);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7919      	ldrb	r1, [r3, #4]
 8001464:	2204      	movs	r2, #4
 8001466:	2300      	movs	r3, #0
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 f83a 	bl	80014e2 <MAX30105_writeRegister8>
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_FIFOOVERFLOW, 0);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7919      	ldrb	r1, [r3, #4]
 8001472:	2205      	movs	r2, #5
 8001474:	2300      	movs	r3, #0
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f833 	bl	80014e2 <MAX30105_writeRegister8>
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_FIFOREADPTR, 0);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	7919      	ldrb	r1, [r3, #4]
 8001480:	2206      	movs	r2, #6
 8001482:	2300      	movs	r3, #0
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f82c 	bl	80014e2 <MAX30105_writeRegister8>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <MAX30105_readRegister8>:

//
// Low-level I2C Communication
//
uint8_t MAX30105_readRegister8(MAX30105_t *MAX30105_handler, uint8_t address, uint8_t reg)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	70fb      	strb	r3, [r7, #3]
 800149e:	4613      	mov	r3, r2
 80014a0:	70bb      	strb	r3, [r7, #2]
//	HAL_I2C_Master_Transmit(MAX30105_handler->hi2c, address, &reg, 1, 100);
	I2C_WriteBuffer(MAX30105_handler, address | 0x01, &reg, 1);
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	b2d9      	uxtb	r1, r3
 80014aa:	1cba      	adds	r2, r7, #2
 80014ac:	2301      	movs	r3, #1
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fc65 	bl	8000d7e <I2C_WriteBuffer>
	//
	while(HAL_I2C_GetState(MAX30105_handler->hi2c) != HAL_I2C_STATE_READY);
 80014b4:	bf00      	nop
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f002 f9c8 	bl	8003850 <HAL_I2C_GetState>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b20      	cmp	r3, #32
 80014c4:	d1f7      	bne.n	80014b6 <MAX30105_readRegister8+0x24>
	uint8_t pData = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	73fb      	strb	r3, [r7, #15]
//	HAL_I2C_Master_Receive(MAX30105_handler->hi2c, address, &pData, 1, 100);
	I2C_ReadBuffer(MAX30105_handler, address, &pData, 1);
 80014ca:	f107 020f 	add.w	r2, r7, #15
 80014ce:	78f9      	ldrb	r1, [r7, #3]
 80014d0:	2301      	movs	r3, #1
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff fc76 	bl	8000dc4 <I2C_ReadBuffer>

	return pData;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <MAX30105_writeRegister8>:

void MAX30105_writeRegister8(MAX30105_t *MAX30105_handler, uint8_t address, uint8_t reg, uint8_t value)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	4608      	mov	r0, r1
 80014ec:	4611      	mov	r1, r2
 80014ee:	461a      	mov	r2, r3
 80014f0:	4603      	mov	r3, r0
 80014f2:	70fb      	strb	r3, [r7, #3]
 80014f4:	460b      	mov	r3, r1
 80014f6:	70bb      	strb	r3, [r7, #2]
 80014f8:	4613      	mov	r3, r2
 80014fa:	707b      	strb	r3, [r7, #1]
	uint8_t pData[] = {reg, value};
 80014fc:	78bb      	ldrb	r3, [r7, #2]
 80014fe:	733b      	strb	r3, [r7, #12]
 8001500:	787b      	ldrb	r3, [r7, #1]
 8001502:	737b      	strb	r3, [r7, #13]
	I2C_WriteBuffer(MAX30105_handler, address, pData, 2);
 8001504:	f107 020c 	add.w	r2, r7, #12
 8001508:	78f9      	ldrb	r1, [r7, #3]
 800150a:	2302      	movs	r3, #2
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff fc36 	bl	8000d7e <I2C_WriteBuffer>
//	I2C_WriteBuffer(MAX30105_handler, address, value, 1);
//	HAL_I2C_Master_Transmit(MAX30105_handler->hi2c, address, &reg, 1, 100);
//	HAL_I2C_Master_Transmit(MAX30105_handler->hi2c, address, &value, 1, 100);
}
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <MAX30105_readRevisionID>:

void MAX30105_readRevisionID(MAX30105_t *MAX30105_handler)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
	MAX30105_handler->revisionID = MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_REVISIONID);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	791b      	ldrb	r3, [r3, #4]
 8001526:	22fe      	movs	r2, #254	; 0xfe
 8001528:	4619      	mov	r1, r3
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffb1 	bl	8001492 <MAX30105_readRegister8>
 8001530:	4603      	mov	r3, r0
 8001532:	461a      	mov	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	719a      	strb	r2, [r3, #6]
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <MAX30105_bitMask>:

//Given a register, read it, mask it, and then set the thing
void MAX30105_bitMask(MAX30105_t *MAX30105_handler, uint8_t reg, uint8_t mask, uint8_t thing)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	4608      	mov	r0, r1
 800154a:	4611      	mov	r1, r2
 800154c:	461a      	mov	r2, r3
 800154e:	4603      	mov	r3, r0
 8001550:	70fb      	strb	r3, [r7, #3]
 8001552:	460b      	mov	r3, r1
 8001554:	70bb      	strb	r3, [r7, #2]
 8001556:	4613      	mov	r3, r2
 8001558:	707b      	strb	r3, [r7, #1]
	// Grab current register context
	uint8_t originalContents = MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, reg);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	791b      	ldrb	r3, [r3, #4]
 800155e:	78fa      	ldrb	r2, [r7, #3]
 8001560:	4619      	mov	r1, r3
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ff95 	bl	8001492 <MAX30105_readRegister8>
 8001568:	4603      	mov	r3, r0
 800156a:	73fb      	strb	r3, [r7, #15]

	// Zero-out the portions of the register we're interested in
	originalContents = originalContents & mask;
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	78bb      	ldrb	r3, [r7, #2]
 8001570:	4013      	ands	r3, r2
 8001572:	73fb      	strb	r3, [r7, #15]

	// Change contents
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, reg, originalContents | thing);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7919      	ldrb	r1, [r3, #4]
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	787b      	ldrb	r3, [r7, #1]
 800157c:	4313      	orrs	r3, r2
 800157e:	b2db      	uxtb	r3, r3
 8001580:	78fa      	ldrb	r2, [r7, #3]
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ffad 	bl	80014e2 <MAX30105_writeRegister8>

	uint8_t response = MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, reg);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	791b      	ldrb	r3, [r3, #4]
 800158c:	78fa      	ldrb	r2, [r7, #3]
 800158e:	4619      	mov	r1, r3
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff7e 	bl	8001492 <MAX30105_readRegister8>
 8001596:	4603      	mov	r3, r0
 8001598:	73bb      	strb	r3, [r7, #14]
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <MAX30105_setup>:
// Mode = MultiLED
// ADC Range = 16384 (62.5pA per LSB)
// Sample rate = 50
//Use the default setup if you are just getting started with the MAX30105 sensor
void MAX30105_setup(MAX30105_t *MAX30105_handler, uint8_t powerLevel, uint8_t sampleAverage, uint8_t ledMode, int sampleRate, int pulseWidth, int adcRange)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	4608      	mov	r0, r1
 80015ac:	4611      	mov	r1, r2
 80015ae:	461a      	mov	r2, r3
 80015b0:	4603      	mov	r3, r0
 80015b2:	70fb      	strb	r3, [r7, #3]
 80015b4:	460b      	mov	r3, r1
 80015b6:	70bb      	strb	r3, [r7, #2]
 80015b8:	4613      	mov	r3, r2
 80015ba:	707b      	strb	r3, [r7, #1]
	MAX30105_softReset(MAX30105_handler); //Reset all configuration, threshold, and data registers to POR values
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff fcb1 	bl	8000f24 <MAX30105_softReset>

	//FIFO Configuration
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	//The chip will average multiple samples of same type together if you wish
	if (sampleAverage == 1) MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
 80015c2:	78bb      	ldrb	r3, [r7, #2]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d105      	bne.n	80015d4 <MAX30105_setup+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	4619      	mov	r1, r3
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff fd97 	bl	8001100 <MAX30105_setFIFOAverage>
 80015d2:	e031      	b.n	8001638 <MAX30105_setup+0x96>
	else if (sampleAverage == 2) MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_2);
 80015d4:	78bb      	ldrb	r3, [r7, #2]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d105      	bne.n	80015e6 <MAX30105_setup+0x44>
 80015da:	2320      	movs	r3, #32
 80015dc:	4619      	mov	r1, r3
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fd8e 	bl	8001100 <MAX30105_setFIFOAverage>
 80015e4:	e028      	b.n	8001638 <MAX30105_setup+0x96>
	else if (sampleAverage == 4) MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_4);
 80015e6:	78bb      	ldrb	r3, [r7, #2]
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d105      	bne.n	80015f8 <MAX30105_setup+0x56>
 80015ec:	2340      	movs	r3, #64	; 0x40
 80015ee:	4619      	mov	r1, r3
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff fd85 	bl	8001100 <MAX30105_setFIFOAverage>
 80015f6:	e01f      	b.n	8001638 <MAX30105_setup+0x96>
	else if (sampleAverage == 8) MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_8);
 80015f8:	78bb      	ldrb	r3, [r7, #2]
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d105      	bne.n	800160a <MAX30105_setup+0x68>
 80015fe:	2360      	movs	r3, #96	; 0x60
 8001600:	4619      	mov	r1, r3
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff fd7c 	bl	8001100 <MAX30105_setFIFOAverage>
 8001608:	e016      	b.n	8001638 <MAX30105_setup+0x96>
	else if (sampleAverage == 16) MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_16);
 800160a:	78bb      	ldrb	r3, [r7, #2]
 800160c:	2b10      	cmp	r3, #16
 800160e:	d105      	bne.n	800161c <MAX30105_setup+0x7a>
 8001610:	2380      	movs	r3, #128	; 0x80
 8001612:	4619      	mov	r1, r3
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff fd73 	bl	8001100 <MAX30105_setFIFOAverage>
 800161a:	e00d      	b.n	8001638 <MAX30105_setup+0x96>
	else if (sampleAverage == 32) MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_32);
 800161c:	78bb      	ldrb	r3, [r7, #2]
 800161e:	2b20      	cmp	r3, #32
 8001620:	d105      	bne.n	800162e <MAX30105_setup+0x8c>
 8001622:	23a0      	movs	r3, #160	; 0xa0
 8001624:	4619      	mov	r1, r3
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff fd6a 	bl	8001100 <MAX30105_setFIFOAverage>
 800162c:	e004      	b.n	8001638 <MAX30105_setup+0x96>
	else MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_4);
 800162e:	2340      	movs	r3, #64	; 0x40
 8001630:	4619      	mov	r1, r3
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff fd64 	bl	8001100 <MAX30105_setFIFOAverage>

	//setFIFOAlmostFull(2); //Set to 30 samples to trigger an 'Almost Full' interrupt
	MAX30105_enableFIFORollover(MAX30105_handler); //Allow FIFO to wrap/roll over
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fd71 	bl	8001120 <MAX30105_enableFIFORollover>
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	//Mode Configuration
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	if (ledMode == 3) MAX30105_setLEDMode(MAX30105_handler, MAX30105_MODE_MULTILED); //Watch all three LED channels
 800163e:	787b      	ldrb	r3, [r7, #1]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d105      	bne.n	8001650 <MAX30105_setup+0xae>
 8001644:	2307      	movs	r3, #7
 8001646:	4619      	mov	r1, r3
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff fc96 	bl	8000f7a <MAX30105_setLEDMode>
 800164e:	e00d      	b.n	800166c <MAX30105_setup+0xca>
	else if (ledMode == 2) MAX30105_setLEDMode(MAX30105_handler, MAX30105_MODE_REDIRONLY); //Red and IR
 8001650:	787b      	ldrb	r3, [r7, #1]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d105      	bne.n	8001662 <MAX30105_setup+0xc0>
 8001656:	2303      	movs	r3, #3
 8001658:	4619      	mov	r1, r3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff fc8d 	bl	8000f7a <MAX30105_setLEDMode>
 8001660:	e004      	b.n	800166c <MAX30105_setup+0xca>
	else MAX30105_setLEDMode(MAX30105_handler, MAX30105_MODE_REDONLY); //Red only
 8001662:	2302      	movs	r3, #2
 8001664:	4619      	mov	r1, r3
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff fc87 	bl	8000f7a <MAX30105_setLEDMode>

	MAX30105_handler->activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	787a      	ldrb	r2, [r7, #1]
 8001670:	715a      	strb	r2, [r3, #5]
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	//Particle Sensing Configuration
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	if(adcRange < 4096) MAX30105_setADCRange(MAX30105_handler, MAX30105_ADCRANGE_2048); //7.81pA per LSB
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001678:	da05      	bge.n	8001686 <MAX30105_setup+0xe4>
 800167a:	2300      	movs	r3, #0
 800167c:	4619      	mov	r1, r3
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff fc8b 	bl	8000f9a <MAX30105_setADCRange>
 8001684:	e022      	b.n	80016cc <MAX30105_setup+0x12a>
	else if(adcRange < 8192) MAX30105_setADCRange(MAX30105_handler, MAX30105_ADCRANGE_4096); //15.63pA per LSB
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800168c:	da05      	bge.n	800169a <MAX30105_setup+0xf8>
 800168e:	2320      	movs	r3, #32
 8001690:	4619      	mov	r1, r3
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fc81 	bl	8000f9a <MAX30105_setADCRange>
 8001698:	e018      	b.n	80016cc <MAX30105_setup+0x12a>
	else if(adcRange < 16384) MAX30105_setADCRange(MAX30105_handler, MAX30105_ADCRANGE_8192); //31.25pA per LSB
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016a0:	da05      	bge.n	80016ae <MAX30105_setup+0x10c>
 80016a2:	2340      	movs	r3, #64	; 0x40
 80016a4:	4619      	mov	r1, r3
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff fc77 	bl	8000f9a <MAX30105_setADCRange>
 80016ac:	e00e      	b.n	80016cc <MAX30105_setup+0x12a>
	else if(adcRange == 16384) MAX30105_setADCRange(MAX30105_handler, MAX30105_ADCRANGE_16384); //62.5pA per LSB
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016b4:	d105      	bne.n	80016c2 <MAX30105_setup+0x120>
 80016b6:	2360      	movs	r3, #96	; 0x60
 80016b8:	4619      	mov	r1, r3
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fc6d 	bl	8000f9a <MAX30105_setADCRange>
 80016c0:	e004      	b.n	80016cc <MAX30105_setup+0x12a>
	else MAX30105_setADCRange(MAX30105_handler, MAX30105_ADCRANGE_2048);
 80016c2:	2300      	movs	r3, #0
 80016c4:	4619      	mov	r1, r3
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fc67 	bl	8000f9a <MAX30105_setADCRange>

	if (sampleRate < 100) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_50); //Take 50 samples per second
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	2b63      	cmp	r3, #99	; 0x63
 80016d0:	dc05      	bgt.n	80016de <MAX30105_setup+0x13c>
 80016d2:	2300      	movs	r3, #0
 80016d4:	4619      	mov	r1, r3
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fc6f 	bl	8000fba <MAX30105_setSampleRate>
 80016dc:	e049      	b.n	8001772 <MAX30105_setup+0x1d0>
	else if (sampleRate < 200) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_100);
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	2bc7      	cmp	r3, #199	; 0xc7
 80016e2:	dc05      	bgt.n	80016f0 <MAX30105_setup+0x14e>
 80016e4:	2304      	movs	r3, #4
 80016e6:	4619      	mov	r1, r3
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff fc66 	bl	8000fba <MAX30105_setSampleRate>
 80016ee:	e040      	b.n	8001772 <MAX30105_setup+0x1d0>
	else if (sampleRate < 400) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_200);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80016f6:	da05      	bge.n	8001704 <MAX30105_setup+0x162>
 80016f8:	2308      	movs	r3, #8
 80016fa:	4619      	mov	r1, r3
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff fc5c 	bl	8000fba <MAX30105_setSampleRate>
 8001702:	e036      	b.n	8001772 <MAX30105_setup+0x1d0>
	else if (sampleRate < 800) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_400);
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800170a:	da05      	bge.n	8001718 <MAX30105_setup+0x176>
 800170c:	230c      	movs	r3, #12
 800170e:	4619      	mov	r1, r3
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fc52 	bl	8000fba <MAX30105_setSampleRate>
 8001716:	e02c      	b.n	8001772 <MAX30105_setup+0x1d0>
	else if (sampleRate < 1000) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_800);
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800171e:	da05      	bge.n	800172c <MAX30105_setup+0x18a>
 8001720:	2310      	movs	r3, #16
 8001722:	4619      	mov	r1, r3
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff fc48 	bl	8000fba <MAX30105_setSampleRate>
 800172a:	e022      	b.n	8001772 <MAX30105_setup+0x1d0>
	else if (sampleRate < 1600) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_1000);
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001732:	da05      	bge.n	8001740 <MAX30105_setup+0x19e>
 8001734:	2314      	movs	r3, #20
 8001736:	4619      	mov	r1, r3
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff fc3e 	bl	8000fba <MAX30105_setSampleRate>
 800173e:	e018      	b.n	8001772 <MAX30105_setup+0x1d0>
	else if (sampleRate < 3200) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_1600);
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8001746:	da05      	bge.n	8001754 <MAX30105_setup+0x1b2>
 8001748:	2318      	movs	r3, #24
 800174a:	4619      	mov	r1, r3
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff fc34 	bl	8000fba <MAX30105_setSampleRate>
 8001752:	e00e      	b.n	8001772 <MAX30105_setup+0x1d0>
	else if (sampleRate == 3200) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_3200);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 800175a:	d105      	bne.n	8001768 <MAX30105_setup+0x1c6>
 800175c:	231c      	movs	r3, #28
 800175e:	4619      	mov	r1, r3
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff fc2a 	bl	8000fba <MAX30105_setSampleRate>
 8001766:	e004      	b.n	8001772 <MAX30105_setup+0x1d0>
	else MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_50);
 8001768:	2300      	movs	r3, #0
 800176a:	4619      	mov	r1, r3
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff fc24 	bl	8000fba <MAX30105_setSampleRate>

	//The longer the pulse width the longer range of detection you'll have
	//At 69us and 0.4mA it's about 2 inches
	//At 411us and 0.4mA it's about 6 inches
	if (pulseWidth < 118) MAX30105_setPulseWidth(MAX30105_handler, MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2b75      	cmp	r3, #117	; 0x75
 8001776:	dc05      	bgt.n	8001784 <MAX30105_setup+0x1e2>
 8001778:	2300      	movs	r3, #0
 800177a:	4619      	mov	r1, r3
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fc2c 	bl	8000fda <MAX30105_setPulseWidth>
 8001782:	e022      	b.n	80017ca <MAX30105_setup+0x228>
	else if (pulseWidth < 215) MAX30105_setPulseWidth(MAX30105_handler, MAX30105_PULSEWIDTH_118); //16 bit resolution
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2bd6      	cmp	r3, #214	; 0xd6
 8001788:	dc05      	bgt.n	8001796 <MAX30105_setup+0x1f4>
 800178a:	2301      	movs	r3, #1
 800178c:	4619      	mov	r1, r3
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fc23 	bl	8000fda <MAX30105_setPulseWidth>
 8001794:	e019      	b.n	80017ca <MAX30105_setup+0x228>
	else if (pulseWidth < 411) MAX30105_setPulseWidth(MAX30105_handler, MAX30105_PULSEWIDTH_215); //17 bit resolution
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800179c:	dc05      	bgt.n	80017aa <MAX30105_setup+0x208>
 800179e:	2302      	movs	r3, #2
 80017a0:	4619      	mov	r1, r3
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff fc19 	bl	8000fda <MAX30105_setPulseWidth>
 80017a8:	e00f      	b.n	80017ca <MAX30105_setup+0x228>
	else if (pulseWidth == 411) MAX30105_setPulseWidth(MAX30105_handler, MAX30105_PULSEWIDTH_411); //18 bit resolution
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f240 129b 	movw	r2, #411	; 0x19b
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d105      	bne.n	80017c0 <MAX30105_setup+0x21e>
 80017b4:	2303      	movs	r3, #3
 80017b6:	4619      	mov	r1, r3
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fc0e 	bl	8000fda <MAX30105_setPulseWidth>
 80017be:	e004      	b.n	80017ca <MAX30105_setup+0x228>
	else MAX30105_setPulseWidth(MAX30105_handler, MAX30105_PULSEWIDTH_69);
 80017c0:	2300      	movs	r3, #0
 80017c2:	4619      	mov	r1, r3
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff fc08 	bl	8000fda <MAX30105_setPulseWidth>
	//powerLevel = 0x02, 0.4mA - Presence detection of ~4 inch
	//powerLevel = 0x1F, 6.4mA - Presence detection of ~8 inch
	//powerLevel = 0x7F, 25.4mA - Presence detection of ~8 inch
	//powerLevel = 0xFF, 50.0mA - Presence detection of ~12 inch

	MAX30105_setPulseAmplitudeRed(MAX30105_handler, powerLevel);
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	4619      	mov	r1, r3
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff fc13 	bl	8000ffa <MAX30105_setPulseAmplitudeRed>
	MAX30105_setPulseAmplitudeIR(MAX30105_handler, powerLevel);
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	4619      	mov	r1, r3
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff fc1f 	bl	800101c <MAX30105_setPulseAmplitudeIR>
	MAX30105_setPulseAmplitudeGreen(MAX30105_handler, powerLevel);
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	4619      	mov	r1, r3
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff fc2b 	bl	800103e <MAX30105_setPulseAmplitudeGreen>
	MAX30105_setPulseAmplitudeProximity(MAX30105_handler, powerLevel);
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	4619      	mov	r1, r3
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff fc37 	bl	8001060 <MAX30105_setPulseAmplitudeProximity>

	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	//Multi-LED Mode Configuration, Enable the reading of the three LEDs
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	MAX30105_enableSlot(MAX30105_handler, 1, SLOT_RED_LED);
 80017f2:	2301      	movs	r3, #1
 80017f4:	461a      	mov	r2, r3
 80017f6:	2101      	movs	r1, #1
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff fc43 	bl	8001084 <MAX30105_enableSlot>
	if (ledMode > 1) MAX30105_enableSlot(MAX30105_handler, 2, SLOT_IR_LED);
 80017fe:	787b      	ldrb	r3, [r7, #1]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d905      	bls.n	8001810 <MAX30105_setup+0x26e>
 8001804:	2302      	movs	r3, #2
 8001806:	461a      	mov	r2, r3
 8001808:	2102      	movs	r1, #2
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff fc3a 	bl	8001084 <MAX30105_enableSlot>
	if (ledMode > 2) MAX30105_enableSlot(MAX30105_handler, 3, SLOT_GREEN_LED);
 8001810:	787b      	ldrb	r3, [r7, #1]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d905      	bls.n	8001822 <MAX30105_setup+0x280>
 8001816:	2303      	movs	r3, #3
 8001818:	461a      	mov	r2, r3
 800181a:	2103      	movs	r1, #3
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff fc31 	bl	8001084 <MAX30105_enableSlot>
	//enableSlot(1, SLOT_RED_PILOT);
	//enableSlot(2, SLOT_IR_PILOT);
	//enableSlot(3, SLOT_GREEN_PILOT);
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	MAX30105_clearFIFO(MAX30105_handler);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fe18 	bl	8001458 <MAX30105_clearFIFO>
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b0b0      	sub	sp, #192	; 0xc0
 8001834:	af04      	add	r7, sp, #16
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
 800183c:	603b      	str	r3, [r7, #0]
  int32_t n_peak_interval_sum;
  
  int32_t n_y_ac, n_x_ac;
  int32_t n_spo2_calc; 
  int32_t n_y_dc_max, n_x_dc_max; 
  int32_t n_y_dc_max_idx = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  int32_t n_x_dc_max_idx = 0; 
 8001844:	2300      	movs	r3, #0
 8001846:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  int32_t an_ratio[5], n_ratio_average; 
  int32_t n_nume, n_denom ;

  // calculates DC mean and subtract DC from ir
  un_ir_mean =0; 
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
 8001850:	2300      	movs	r3, #0
 8001852:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001856:	e010      	b.n	800187a <maxim_heart_rate_and_oxygen_saturation+0x4a>
 8001858:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4413      	add	r3, r2
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800186a:	4413      	add	r3, r2
 800186c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001870:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001874:	3301      	adds	r3, #1
 8001876:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800187a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	429a      	cmp	r2, r3
 8001882:	dbe9      	blt.n	8001858 <maxim_heart_rate_and_oxygen_saturation+0x28>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    
  // remove DC and invert signal so that we can use peak detector as valley detector
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001898:	e014      	b.n	80018c4 <maxim_heart_rate_and_oxygen_saturation+0x94>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
 800189a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	4ab4      	ldr	r2, [pc, #720]	; (8001b84 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 80018b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
 80018ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018be:	3301      	adds	r3, #1
 80018c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80018c4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	dbe5      	blt.n	800189a <maxim_heart_rate_and_oxygen_saturation+0x6a>
    
  // 4 pt Moving Average
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80018d4:	e028      	b.n	8001928 <maxim_heart_rate_and_oxygen_saturation+0xf8>
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
 80018d6:	4aab      	ldr	r2, [pc, #684]	; (8001b84 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 80018d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018e4:	3301      	adds	r3, #1
 80018e6:	49a7      	ldr	r1, [pc, #668]	; (8001b84 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 80018e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018ec:	441a      	add	r2, r3
 80018ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018f2:	3302      	adds	r3, #2
 80018f4:	49a3      	ldr	r1, [pc, #652]	; (8001b84 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 80018f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018fa:	441a      	add	r2, r3
 80018fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001900:	3303      	adds	r3, #3
 8001902:	49a0      	ldr	r1, [pc, #640]	; (8001b84 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 8001904:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001908:	4413      	add	r3, r2
 800190a:	2b00      	cmp	r3, #0
 800190c:	da00      	bge.n	8001910 <maxim_heart_rate_and_oxygen_saturation+0xe0>
 800190e:	3303      	adds	r3, #3
 8001910:	109b      	asrs	r3, r3, #2
 8001912:	4619      	mov	r1, r3
 8001914:	4a9b      	ldr	r2, [pc, #620]	; (8001b84 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 8001916:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800191a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 800191e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001922:	3301      	adds	r3, #1
 8001924:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001928:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800192c:	2b5f      	cmp	r3, #95	; 0x5f
 800192e:	ddd2      	ble.n	80018d6 <maxim_heart_rate_and_oxygen_saturation+0xa6>
  }
  // calculate threshold  
  n_th1=0; 
 8001930:	2300      	movs	r3, #0
 8001932:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 8001936:	2300      	movs	r3, #0
 8001938:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800193c:	e00e      	b.n	800195c <maxim_heart_rate_and_oxygen_saturation+0x12c>
    n_th1 +=  an_x[k];
 800193e:	4a91      	ldr	r2, [pc, #580]	; (8001b84 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 8001940:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001948:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800194c:	4413      	add	r3, r2
 800194e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 8001952:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001956:	3301      	adds	r3, #1
 8001958:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800195c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001960:	2b63      	cmp	r3, #99	; 0x63
 8001962:	ddec      	ble.n	800193e <maxim_heart_rate_and_oxygen_saturation+0x10e>
  }
  n_th1=  n_th1/ ( BUFFER_SIZE);
 8001964:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001968:	4a87      	ldr	r2, [pc, #540]	; (8001b88 <maxim_heart_rate_and_oxygen_saturation+0x358>)
 800196a:	fb82 1203 	smull	r1, r2, r2, r3
 800196e:	1152      	asrs	r2, r2, #5
 8001970:	17db      	asrs	r3, r3, #31
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if( n_th1<30) n_th1=30; // min allowed
 8001978:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800197c:	2b1d      	cmp	r3, #29
 800197e:	dc02      	bgt.n	8001986 <maxim_heart_rate_and_oxygen_saturation+0x156>
 8001980:	231e      	movs	r3, #30
 8001982:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if( n_th1>60) n_th1=60; // max allowed
 8001986:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800198a:	2b3c      	cmp	r3, #60	; 0x3c
 800198c:	dd02      	ble.n	8001994 <maxim_heart_rate_and_oxygen_saturation+0x164>
 800198e:	233c      	movs	r3, #60	; 0x3c
 8001990:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800199a:	e00c      	b.n	80019b6 <maxim_heart_rate_and_oxygen_saturation+0x186>
 800199c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	33b0      	adds	r3, #176	; 0xb0
 80019a4:	443b      	add	r3, r7
 80019a6:	2200      	movs	r2, #0
 80019a8:	f843 2c88 	str.w	r2, [r3, #-136]
 80019ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019b0:	3301      	adds	r3, #1
 80019b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80019b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019ba:	2b0e      	cmp	r3, #14
 80019bc:	ddee      	ble.n	800199c <maxim_heart_rate_and_oxygen_saturation+0x16c>
  // since we flipped signal, we use peak detector as valley detector
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
 80019be:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80019c2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80019c6:	230f      	movs	r3, #15
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	2304      	movs	r3, #4
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2364      	movs	r3, #100	; 0x64
 80019d6:	4a6b      	ldr	r2, [pc, #428]	; (8001b84 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 80019d8:	f000 fa36 	bl	8001e48 <maxim_find_peaks>
  n_peak_interval_sum =0;
 80019dc:	2300      	movs	r3, #0
 80019de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (n_npks>=2){
 80019e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	dd38      	ble.n	8001a5a <maxim_heart_rate_and_oxygen_saturation+0x22a>
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
 80019e8:	2301      	movs	r3, #1
 80019ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80019ee:	e019      	b.n	8001a24 <maxim_heart_rate_and_oxygen_saturation+0x1f4>
 80019f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	33b0      	adds	r3, #176	; 0xb0
 80019f8:	443b      	add	r3, r7
 80019fa:	f853 2c88 	ldr.w	r2, [r3, #-136]
 80019fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a02:	3b01      	subs	r3, #1
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	33b0      	adds	r3, #176	; 0xb0
 8001a08:	443b      	add	r3, r7
 8001a0a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a14:	4413      	add	r3, r2
 8001a16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a1e:	3301      	adds	r3, #1
 8001a20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001a24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	dbe0      	blt.n	80019f0 <maxim_heart_rate_and_oxygen_saturation+0x1c0>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
 8001a2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a30:	3b01      	subs	r3, #1
 8001a32:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a36:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
 8001a3e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001a42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a46:	fb92 f2f3 	sdiv	r2, r2, r3
 8001a4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a4e:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 1;
 8001a50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
 8001a58:	e007      	b.n	8001a6a <maxim_heart_rate_and_oxygen_saturation+0x23a>
  }
  else  { 
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
 8001a5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a5e:	4a4b      	ldr	r2, [pc, #300]	; (8001b8c <maxim_heart_rate_and_oxygen_saturation+0x35c>)
 8001a60:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 0;
 8001a62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
  }

  //  load raw value again for SPO2 calculation : RED(=y) and IR(=X)
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001a70:	e01c      	b.n	8001aac <maxim_heart_rate_and_oxygen_saturation+0x27c>
      an_x[k] =  pun_ir_buffer[k] ; 
 8001a72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4a40      	ldr	r2, [pc, #256]	; (8001b84 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 8001a82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      an_y[k] =  pun_red_buffer[k] ; 
 8001a8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4413      	add	r3, r2
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	4619      	mov	r1, r3
 8001a98:	4a3d      	ldr	r2, [pc, #244]	; (8001b90 <maxim_heart_rate_and_oxygen_saturation+0x360>)
 8001a9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 8001aa2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001aac:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	dbdd      	blt.n	8001a72 <maxim_heart_rate_and_oxygen_saturation+0x242>
  }

  // find precise min near an_ir_valley_locs
  n_exact_ir_valley_locs_count =n_npks; 
 8001ab6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ab8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  
  //using exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration an_ratio
  //finding AC/DC maximum of raw

  n_ratio_average =0; 
 8001abc:	2300      	movs	r3, #0
 8001abe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  n_i_ratio_count = 0; 
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  for(k=0; k< 5; k++) an_ratio[k]=0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001ace:	e00c      	b.n	8001aea <maxim_heart_rate_and_oxygen_saturation+0x2ba>
 8001ad0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	33b0      	adds	r3, #176	; 0xb0
 8001ad8:	443b      	add	r3, r7
 8001ada:	2200      	movs	r2, #0
 8001adc:	f843 2c9c 	str.w	r2, [r3, #-156]
 8001ae0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001aea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	ddee      	ble.n	8001ad0 <maxim_heart_rate_and_oxygen_saturation+0x2a0>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001af8:	e015      	b.n	8001b26 <maxim_heart_rate_and_oxygen_saturation+0x2f6>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
 8001afa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	33b0      	adds	r3, #176	; 0xb0
 8001b02:	443b      	add	r3, r7
 8001b04:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001b08:	2b64      	cmp	r3, #100	; 0x64
 8001b0a:	dd07      	ble.n	8001b1c <maxim_heart_rate_and_oxygen_saturation+0x2ec>
      *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	4a1f      	ldr	r2, [pc, #124]	; (8001b8c <maxim_heart_rate_and_oxygen_saturation+0x35c>)
 8001b10:	601a      	str	r2, [r3, #0]
      *pch_spo2_valid  = 0; 
 8001b12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
 8001b1a:	e189      	b.n	8001e30 <maxim_heart_rate_and_oxygen_saturation+0x600>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8001b1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b20:	3301      	adds	r3, #1
 8001b22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001b2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	dbe3      	blt.n	8001afa <maxim_heart_rate_and_oxygen_saturation+0x2ca>
      return;
    }
  }
  // find max between two valley locations 
  // and use an_ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2 
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001b38:	e129      	b.n	8001d8e <maxim_heart_rate_and_oxygen_saturation+0x55e>
    n_y_dc_max= -16777216 ; 
 8001b3a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001b3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    n_x_dc_max= -16777216; 
 8001b42:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001b46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
 8001b4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b4e:	3301      	adds	r3, #1
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	33b0      	adds	r3, #176	; 0xb0
 8001b54:	443b      	add	r3, r7
 8001b56:	f853 2c88 	ldr.w	r2, [r3, #-136]
 8001b5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	33b0      	adds	r3, #176	; 0xb0
 8001b62:	443b      	add	r3, r7
 8001b64:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	f340 810a 	ble.w	8001d84 <maxim_heart_rate_and_oxygen_saturation+0x554>
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 8001b70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	33b0      	adds	r3, #176	; 0xb0
 8001b78:	443b      	add	r3, r7
 8001b7a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001b82:	e034      	b.n	8001bee <maxim_heart_rate_and_oxygen_saturation+0x3be>
 8001b84:	2000065c 	.word	0x2000065c
 8001b88:	51eb851f 	.word	0x51eb851f
 8001b8c:	fffffc19 	.word	0xfffffc19
 8001b90:	200007ec 	.word	0x200007ec
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 8001b94:	4aa8      	ldr	r2, [pc, #672]	; (8001e38 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8001b96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	da0a      	bge.n	8001bbc <maxim_heart_rate_and_oxygen_saturation+0x38c>
 8001ba6:	4aa4      	ldr	r2, [pc, #656]	; (8001e38 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8001ba8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001bb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 8001bbc:	4a9f      	ldr	r2, [pc, #636]	; (8001e3c <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8001bbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	da0a      	bge.n	8001be4 <maxim_heart_rate_and_oxygen_saturation+0x3b4>
 8001bce:	4a9b      	ldr	r2, [pc, #620]	; (8001e3c <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8001bd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001bdc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001be0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 8001be4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001be8:	3301      	adds	r3, #1
 8001bea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001bee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	33b0      	adds	r3, #176	; 0xb0
 8001bf8:	443b      	add	r3, r7
 8001bfa:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001bfe:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001c02:	429a      	cmp	r2, r3
 8001c04:	dbc6      	blt.n	8001b94 <maxim_heart_rate_and_oxygen_saturation+0x364>
      }
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
 8001c06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	33b0      	adds	r3, #176	; 0xb0
 8001c10:	443b      	add	r3, r7
 8001c12:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001c16:	4a89      	ldr	r2, [pc, #548]	; (8001e3c <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8001c18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	33b0      	adds	r3, #176	; 0xb0
 8001c24:	443b      	add	r3, r7
 8001c26:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001c2a:	4984      	ldr	r1, [pc, #528]	; (8001e3c <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8001c2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c30:	1ad2      	subs	r2, r2, r3
 8001c32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	33b0      	adds	r3, #176	; 0xb0
 8001c3a:	443b      	add	r3, r7
 8001c3c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001c40:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001c44:	1acb      	subs	r3, r1, r3
 8001c46:	fb02 f303 	mul.w	r3, r2, r3
 8001c4a:	677b      	str	r3, [r7, #116]	; 0x74
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
 8001c4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	33b0      	adds	r3, #176	; 0xb0
 8001c54:	443b      	add	r3, r7
 8001c56:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001c5a:	4a78      	ldr	r2, [pc, #480]	; (8001e3c <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8001c5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c64:	3301      	adds	r3, #1
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	33b0      	adds	r3, #176	; 0xb0
 8001c6a:	443b      	add	r3, r7
 8001c6c:	f853 1c88 	ldr.w	r1, [r3, #-136]
 8001c70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	33b0      	adds	r3, #176	; 0xb0
 8001c78:	443b      	add	r3, r7
 8001c7a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001c7e:	1acb      	subs	r3, r1, r3
 8001c80:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001c82:	fb91 f3f3 	sdiv	r3, r1, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	677b      	str	r3, [r7, #116]	; 0x74
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
 8001c8a:	4a6c      	ldr	r2, [pc, #432]	; (8001e3c <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8001c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	677b      	str	r3, [r7, #116]	; 0x74
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
 8001c9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	33b0      	adds	r3, #176	; 0xb0
 8001ca4:	443b      	add	r3, r7
 8001ca6:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001caa:	4a63      	ldr	r2, [pc, #396]	; (8001e38 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8001cac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	33b0      	adds	r3, #176	; 0xb0
 8001cb8:	443b      	add	r3, r7
 8001cba:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001cbe:	495e      	ldr	r1, [pc, #376]	; (8001e38 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8001cc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cc4:	1ad2      	subs	r2, r2, r3
 8001cc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	33b0      	adds	r3, #176	; 0xb0
 8001cce:	443b      	add	r3, r7
 8001cd0:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001cd4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001cd8:	1acb      	subs	r3, r1, r3
 8001cda:	fb02 f303 	mul.w	r3, r2, r3
 8001cde:	673b      	str	r3, [r7, #112]	; 0x70
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
 8001ce0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	33b0      	adds	r3, #176	; 0xb0
 8001ce8:	443b      	add	r3, r7
 8001cea:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001cee:	4a52      	ldr	r2, [pc, #328]	; (8001e38 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8001cf0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	33b0      	adds	r3, #176	; 0xb0
 8001cfe:	443b      	add	r3, r7
 8001d00:	f853 1c88 	ldr.w	r1, [r3, #-136]
 8001d04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	33b0      	adds	r3, #176	; 0xb0
 8001d0c:	443b      	add	r3, r7
 8001d0e:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001d12:	1acb      	subs	r3, r1, r3
 8001d14:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001d16:	fb91 f3f3 	sdiv	r3, r1, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	673b      	str	r3, [r7, #112]	; 0x70
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
 8001d1e:	4a46      	ldr	r2, [pc, #280]	; (8001e38 <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8001d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	673b      	str	r3, [r7, #112]	; 0x70
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 8001d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d30:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001d34:	fb02 f303 	mul.w	r3, r2, r3
 8001d38:	11db      	asrs	r3, r3, #7
 8001d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
 8001d3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	11db      	asrs	r3, r3, #7
 8001d48:	66bb      	str	r3, [r7, #104]	; 0x68
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 8001d4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	dd19      	ble.n	8001d84 <maxim_heart_rate_and_oxygen_saturation+0x554>
 8001d50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	dc15      	bgt.n	8001d84 <maxim_heart_rate_and_oxygen_saturation+0x554>
 8001d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d012      	beq.n	8001d84 <maxim_heart_rate_and_oxygen_saturation+0x554>
      {   
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 8001d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d60:	2264      	movs	r2, #100	; 0x64
 8001d62:	fb03 f202 	mul.w	r2, r3, r2
 8001d66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d68:	fb92 f2f3 	sdiv	r2, r2, r3
 8001d6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	33b0      	adds	r3, #176	; 0xb0
 8001d74:	443b      	add	r3, r7
 8001d76:	f843 2c9c 	str.w	r2, [r3, #-156]
        n_i_ratio_count++;
 8001d7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d7e:	3301      	adds	r3, #1
 8001d80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8001d84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d88:	3301      	adds	r3, #1
 8001d8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001d8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d92:	3b01      	subs	r3, #1
 8001d94:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	f6ff aece 	blt.w	8001b3a <maxim_heart_rate_and_oxygen_saturation+0x30a>
      }
    }
  }
  // choose median value since PPG signal may varies from beat to beat
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 f942 	bl	8002030 <maxim_sort_ascend>
  n_middle_idx= n_i_ratio_count/2;
 8001dac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001db0:	0fda      	lsrs	r2, r3, #31
 8001db2:	4413      	add	r3, r2
 8001db4:	105b      	asrs	r3, r3, #1
 8001db6:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (n_middle_idx >1)
 8001db8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	dd13      	ble.n	8001de6 <maxim_heart_rate_and_oxygen_saturation+0x5b6>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 8001dbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	33b0      	adds	r3, #176	; 0xb0
 8001dc6:	443b      	add	r3, r7
 8001dc8:	f853 2c9c 	ldr.w	r2, [r3, #-156]
 8001dcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	33b0      	adds	r3, #176	; 0xb0
 8001dd2:	443b      	add	r3, r7
 8001dd4:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001dd8:	4413      	add	r3, r2
 8001dda:	0fda      	lsrs	r2, r3, #31
 8001ddc:	4413      	add	r3, r2
 8001dde:	105b      	asrs	r3, r3, #1
 8001de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001de4:	e007      	b.n	8001df6 <maxim_heart_rate_and_oxygen_saturation+0x5c6>
  else
    n_ratio_average = an_ratio[n_middle_idx ];
 8001de6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	33b0      	adds	r3, #176	; 0xb0
 8001dec:	443b      	add	r3, r7
 8001dee:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001df2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  if( n_ratio_average>2 && n_ratio_average <184){
 8001df6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	dd11      	ble.n	8001e22 <maxim_heart_rate_and_oxygen_saturation+0x5f2>
 8001dfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e02:	2bb7      	cmp	r3, #183	; 0xb7
 8001e04:	dc0d      	bgt.n	8001e22 <maxim_heart_rate_and_oxygen_saturation+0x5f2>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 8001e06:	4a0e      	ldr	r2, [pc, #56]	; (8001e40 <maxim_heart_rate_and_oxygen_saturation+0x610>)
 8001e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e0c:	4413      	add	r3, r2
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	67bb      	str	r3, [r7, #120]	; 0x78
    *pn_spo2 = n_spo2_calc ;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001e16:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 8001e18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	701a      	strb	r2, [r3, #0]
 8001e20:	e006      	b.n	8001e30 <maxim_heart_rate_and_oxygen_saturation+0x600>
  }
  else{
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	4a07      	ldr	r2, [pc, #28]	; (8001e44 <maxim_heart_rate_and_oxygen_saturation+0x614>)
 8001e26:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0; 
 8001e28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
  }
}
 8001e30:	37b0      	adds	r7, #176	; 0xb0
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	2000065c 	.word	0x2000065c
 8001e3c:	200007ec 	.word	0x200007ec
 8001e40:	08005ba0 	.word	0x08005ba0
 8001e44:	fffffc19 	.word	0xfffffc19

08001e48 <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	68b9      	ldr	r1, [r7, #8]
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 f812 	bl	8001e8a <maxim_peaks_above_min_height>
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68b9      	ldr	r1, [r7, #8]
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f000 f87f 	bl	8001f70 <maxim_remove_close_peaks>
  *n_npks = min( *n_npks, n_max_num );
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	bfa8      	it	ge
 8001e7c:	461a      	movge	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	601a      	str	r2, [r3, #0]
}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b087      	sub	sp, #28
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	603b      	str	r3, [r7, #0]
  int32_t i = 1, n_width;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	617b      	str	r3, [r7, #20]
  *n_npks = 0;
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
  
  while (i < n_size-1){
 8001ea2:	e05a      	b.n	8001f5a <maxim_peaks_above_min_height+0xd0>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6a3a      	ldr	r2, [r7, #32]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	da4f      	bge.n	8001f54 <maxim_peaks_above_min_height+0xca>
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	4413      	add	r3, r2
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	440b      	add	r3, r1
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	dd40      	ble.n	8001f54 <maxim_peaks_above_min_height+0xca>
      n_width = 1;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	613b      	str	r3, [r7, #16]
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 8001ed6:	e002      	b.n	8001ede <maxim_peaks_above_min_height+0x54>
        n_width++;
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	3301      	adds	r3, #1
 8001edc:	613b      	str	r3, [r7, #16]
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	dd0d      	ble.n	8001f06 <maxim_peaks_above_min_height+0x7c>
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	6979      	ldr	r1, [r7, #20]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	440b      	add	r3, r1
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	440b      	add	r3, r1
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d0e8      	beq.n	8001ed8 <maxim_peaks_above_min_height+0x4e>
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	6979      	ldr	r1, [r7, #20]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	440b      	add	r3, r1
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	440b      	add	r3, r1
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	dd13      	ble.n	8001f4a <maxim_peaks_above_min_height+0xc0>
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b0e      	cmp	r3, #14
 8001f28:	dc0f      	bgt.n	8001f4a <maxim_peaks_above_min_height+0xc0>
        pn_locs[(*n_npks)++] = i;    
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	1c59      	adds	r1, r3, #1
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	6011      	str	r1, [r2, #0]
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4413      	add	r3, r2
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	601a      	str	r2, [r3, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	3301      	adds	r3, #1
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4413      	add	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	e003      	b.n	8001f52 <maxim_peaks_above_min_height+0xc8>
      }
      else
        i += n_width;
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4413      	add	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8001f52:	e002      	b.n	8001f5a <maxim_peaks_above_min_height+0xd0>
    }
    else
      i++;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	3301      	adds	r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
  while (i < n_size-1){
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	db9f      	blt.n	8001ea4 <maxim_peaks_above_min_height+0x1a>
  }
}
 8001f64:	bf00      	nop
 8001f66:	bf00      	nop
 8001f68:	371c      	adds	r7, #28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
    
  int32_t i, j, n_old_npks, n_dist;
    
  /* Order peaks from large to small */
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	68f9      	ldr	r1, [r7, #12]
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f894 	bl	80020b4 <maxim_sort_indices_descend>

  for ( i = -1; i < *pn_npks; i++ ){
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	e03e      	b.n	8002012 <maxim_remove_close_peaks+0xa2>
    n_old_npks = *pn_npks;
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	617b      	str	r3, [r7, #20]
    *pn_npks = i+1;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	601a      	str	r2, [r3, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	e02c      	b.n	8002004 <maxim_remove_close_peaks+0x94>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fba:	d005      	beq.n	8001fc8 <maxim_remove_close_peaks+0x58>
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	68f9      	ldr	r1, [r7, #12]
 8001fc2:	440b      	add	r3, r1
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	e001      	b.n	8001fcc <maxim_remove_close_peaks+0x5c>
 8001fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	613b      	str	r3, [r7, #16]
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	dc04      	bgt.n	8001fe2 <maxim_remove_close_peaks+0x72>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	425b      	negs	r3, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	da0d      	bge.n	8001ffe <maxim_remove_close_peaks+0x8e>
        pn_locs[(*pn_npks)++] = pn_locs[j];
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	441a      	add	r2, r3
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	1c58      	adds	r0, r3, #1
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	6008      	str	r0, [r1, #0]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	68f9      	ldr	r1, [r7, #12]
 8001ff8:	440b      	add	r3, r1
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	601a      	str	r2, [r3, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	3301      	adds	r3, #1
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	429a      	cmp	r2, r3
 800200a:	dbce      	blt.n	8001faa <maxim_remove_close_peaks+0x3a>
  for ( i = -1; i < *pn_npks; i++ ){
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	3301      	adds	r3, #1
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	429a      	cmp	r2, r3
 800201a:	dbbb      	blt.n	8001f94 <maxim_remove_close_peaks+0x24>
    }
  }

  // Resort indices int32_to ascending order
  maxim_sort_ascend( pn_locs, *pn_npks );
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 f804 	bl	8002030 <maxim_sort_ascend>
}
 8002028:	bf00      	nop
 800202a:	3720      	adds	r7, #32
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 800203a:	2301      	movs	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	e02f      	b.n	80020a0 <maxim_sort_ascend+0x70>
    n_temp = pn_x[i];
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4413      	add	r3, r2
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	60fb      	str	r3, [r7, #12]
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	e00f      	b.n	8002072 <maxim_sort_ascend+0x42>
        pn_x[j] = pn_x[j-1];
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002058:	3b01      	subs	r3, #1
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	441a      	add	r2, r3
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	440b      	add	r3, r1
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	601a      	str	r2, [r3, #0]
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	3b01      	subs	r3, #1
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	dd0a      	ble.n	800208e <maxim_sort_ascend+0x5e>
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800207e:	3b01      	subs	r3, #1
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	429a      	cmp	r2, r3
 800208c:	dbe1      	blt.n	8002052 <maxim_sort_ascend+0x22>
    pn_x[j] = n_temp;
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	601a      	str	r2, [r3, #0]
  for (i = 1; i < n_size; i++) {
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	3301      	adds	r3, #1
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	dbcb      	blt.n	8002040 <maxim_sort_ascend+0x10>
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	371c      	adds	r7, #28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 80020c0:	2301      	movs	r3, #1
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	e037      	b.n	8002136 <maxim_sort_indices_descend+0x82>
    n_temp = pn_indx[i];
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	4413      	add	r3, r2
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	617b      	str	r3, [r7, #20]
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	e00f      	b.n	80020f8 <maxim_sort_indices_descend+0x44>
      pn_indx[j] = pn_indx[j-1];
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020de:	3b01      	subs	r3, #1
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	441a      	add	r2, r3
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	68b9      	ldr	r1, [r7, #8]
 80020ec:	440b      	add	r3, r1
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	601a      	str	r2, [r3, #0]
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	dd12      	ble.n	8002124 <maxim_sort_indices_descend+0x70>
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4413      	add	r3, r2
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800210e:	3b01      	subs	r3, #1
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	440b      	add	r3, r1
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	68f9      	ldr	r1, [r7, #12]
 800211c:	440b      	add	r3, r1
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	dcd9      	bgt.n	80020d8 <maxim_sort_indices_descend+0x24>
    pn_indx[j] = n_temp;
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	4413      	add	r3, r2
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	601a      	str	r2, [r3, #0]
  for (i = 1; i < n_size; i++) {
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	3301      	adds	r3, #1
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	429a      	cmp	r2, r3
 800213c:	dbc3      	blt.n	80020c6 <maxim_sort_indices_descend+0x12>
  }
}
 800213e:	bf00      	nop
 8002140:	bf00      	nop
 8002142:	3724      	adds	r7, #36	; 0x24
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
	...

0800214c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <HAL_MspInit+0x5c>)
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	4a14      	ldr	r2, [pc, #80]	; (80021a8 <HAL_MspInit+0x5c>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6193      	str	r3, [r2, #24]
 800215e:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_MspInit+0x5c>)
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <HAL_MspInit+0x5c>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	4a0e      	ldr	r2, [pc, #56]	; (80021a8 <HAL_MspInit+0x5c>)
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002174:	61d3      	str	r3, [r2, #28]
 8002176:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <HAL_MspInit+0x5c>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <HAL_MspInit+0x60>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_MspInit+0x60>)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40010000 	.word	0x40010000

080021b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 0310 	add.w	r3, r7, #16
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a16      	ldr	r2, [pc, #88]	; (8002224 <HAL_I2C_MspInit+0x74>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d124      	bne.n	800221a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d0:	4b15      	ldr	r3, [pc, #84]	; (8002228 <HAL_I2C_MspInit+0x78>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	4a14      	ldr	r2, [pc, #80]	; (8002228 <HAL_I2C_MspInit+0x78>)
 80021d6:	f043 0308 	orr.w	r3, r3, #8
 80021da:	6193      	str	r3, [r2, #24]
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_I2C_MspInit+0x78>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ee:	2312      	movs	r3, #18
 80021f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021f2:	2303      	movs	r3, #3
 80021f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f6:	f107 0310 	add.w	r3, r7, #16
 80021fa:	4619      	mov	r1, r3
 80021fc:	480b      	ldr	r0, [pc, #44]	; (800222c <HAL_I2C_MspInit+0x7c>)
 80021fe:	f000 fcb7 	bl	8002b70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_I2C_MspInit+0x78>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	4a08      	ldr	r2, [pc, #32]	; (8002228 <HAL_I2C_MspInit+0x78>)
 8002208:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800220c:	61d3      	str	r3, [r2, #28]
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_I2C_MspInit+0x78>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800221a:	bf00      	nop
 800221c:	3720      	adds	r7, #32
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40005800 	.word	0x40005800
 8002228:	40021000 	.word	0x40021000
 800222c:	40010c00 	.word	0x40010c00

08002230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08c      	sub	sp, #48	; 0x30
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 031c 	add.w	r3, r7, #28
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a42      	ldr	r2, [pc, #264]	; (8002354 <HAL_UART_MspInit+0x124>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d13a      	bne.n	80022c6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002250:	4b41      	ldr	r3, [pc, #260]	; (8002358 <HAL_UART_MspInit+0x128>)
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	4a40      	ldr	r2, [pc, #256]	; (8002358 <HAL_UART_MspInit+0x128>)
 8002256:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800225a:	61d3      	str	r3, [r2, #28]
 800225c:	4b3e      	ldr	r3, [pc, #248]	; (8002358 <HAL_UART_MspInit+0x128>)
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002268:	4b3b      	ldr	r3, [pc, #236]	; (8002358 <HAL_UART_MspInit+0x128>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a3a      	ldr	r2, [pc, #232]	; (8002358 <HAL_UART_MspInit+0x128>)
 800226e:	f043 0310 	orr.w	r3, r3, #16
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b38      	ldr	r3, [pc, #224]	; (8002358 <HAL_UART_MspInit+0x128>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800228a:	2303      	movs	r3, #3
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800228e:	f107 031c 	add.w	r3, r7, #28
 8002292:	4619      	mov	r1, r3
 8002294:	4831      	ldr	r0, [pc, #196]	; (800235c <HAL_UART_MspInit+0x12c>)
 8002296:	f000 fc6b 	bl	8002b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800229a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800229e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a0:	2300      	movs	r3, #0
 80022a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a8:	f107 031c 	add.w	r3, r7, #28
 80022ac:	4619      	mov	r1, r3
 80022ae:	482b      	ldr	r0, [pc, #172]	; (800235c <HAL_UART_MspInit+0x12c>)
 80022b0:	f000 fc5e 	bl	8002b70 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80022b4:	2200      	movs	r2, #0
 80022b6:	2100      	movs	r1, #0
 80022b8:	2034      	movs	r0, #52	; 0x34
 80022ba:	f000 fae0 	bl	800287e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80022be:	2034      	movs	r0, #52	; 0x34
 80022c0:	f000 faf9 	bl	80028b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022c4:	e042      	b.n	800234c <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a25      	ldr	r2, [pc, #148]	; (8002360 <HAL_UART_MspInit+0x130>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d13d      	bne.n	800234c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART1_CLK_ENABLE();
 80022d0:	4b21      	ldr	r3, [pc, #132]	; (8002358 <HAL_UART_MspInit+0x128>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	4a20      	ldr	r2, [pc, #128]	; (8002358 <HAL_UART_MspInit+0x128>)
 80022d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022da:	6193      	str	r3, [r2, #24]
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <HAL_UART_MspInit+0x128>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e8:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <HAL_UART_MspInit+0x128>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a1a      	ldr	r2, [pc, #104]	; (8002358 <HAL_UART_MspInit+0x128>)
 80022ee:	f043 0308 	orr.w	r3, r3, #8
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <HAL_UART_MspInit+0x128>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002300:	2340      	movs	r3, #64	; 0x40
 8002302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002308:	2303      	movs	r3, #3
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	4619      	mov	r1, r3
 8002312:	4814      	ldr	r0, [pc, #80]	; (8002364 <HAL_UART_MspInit+0x134>)
 8002314:	f000 fc2c 	bl	8002b70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002324:	f107 031c 	add.w	r3, r7, #28
 8002328:	4619      	mov	r1, r3
 800232a:	480e      	ldr	r0, [pc, #56]	; (8002364 <HAL_UART_MspInit+0x134>)
 800232c:	f000 fc20 	bl	8002b70 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002330:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <HAL_UART_MspInit+0x138>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002338:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002346:	4a08      	ldr	r2, [pc, #32]	; (8002368 <HAL_UART_MspInit+0x138>)
 8002348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234a:	6053      	str	r3, [r2, #4]
}
 800234c:	bf00      	nop
 800234e:	3730      	adds	r7, #48	; 0x30
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40004c00 	.word	0x40004c00
 8002358:	40021000 	.word	0x40021000
 800235c:	40011000 	.word	0x40011000
 8002360:	40013800 	.word	0x40013800
 8002364:	40010c00 	.word	0x40010c00
 8002368:	40010000 	.word	0x40010000

0800236c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <NMI_Handler+0x4>

08002372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002376:	e7fe      	b.n	8002376 <HardFault_Handler+0x4>

08002378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800237c:	e7fe      	b.n	800237c <MemManage_Handler+0x4>

0800237e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002382:	e7fe      	b.n	8002382 <BusFault_Handler+0x4>

08002384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <UsageFault_Handler+0x4>

0800238a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr

080023a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b2:	f000 f94d 	bl	8002650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}

080023ba <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80023be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80023c2:	f000 fd81 	bl	8002ec8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
//		RxHead = 0;
//	}
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <UART4_IRQHandler+0x10>)
 80023d2:	f002 faab 	bl	800492c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200002e4 	.word	0x200002e4

080023e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e8:	4a14      	ldr	r2, [pc, #80]	; (800243c <_sbrk+0x5c>)
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <_sbrk+0x60>)
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f4:	4b13      	ldr	r3, [pc, #76]	; (8002444 <_sbrk+0x64>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <_sbrk+0x64>)
 80023fe:	4a12      	ldr	r2, [pc, #72]	; (8002448 <_sbrk+0x68>)
 8002400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <_sbrk+0x64>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	429a      	cmp	r2, r3
 800240e:	d207      	bcs.n	8002420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002410:	f002 feb4 	bl	800517c <__errno>
 8002414:	4603      	mov	r3, r0
 8002416:	220c      	movs	r2, #12
 8002418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
 800241e:	e009      	b.n	8002434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <_sbrk+0x64>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	4a05      	ldr	r2, [pc, #20]	; (8002444 <_sbrk+0x64>)
 8002430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002432:	68fb      	ldr	r3, [r7, #12]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	2000c000 	.word	0x2000c000
 8002440:	00000400 	.word	0x00000400
 8002444:	2000097c 	.word	0x2000097c
 8002448:	20000ea0 	.word	0x20000ea0

0800244c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <_getchar>:
unsigned char TxBuf[TXBUFSIZE];// transmit buffer
int TxHead =0; // circular buffer index
int TxTail =0; // circular buffer index

unsigned char _getchar()
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
	unsigned char temp;
	while (RxTail == RxHead)
 800245e:	e003      	b.n	8002468 <_getchar+0x10>
	{
		HAL_Delay(1000);
 8002460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002464:	f000 f910 	bl	8002688 <HAL_Delay>
	while (RxTail == RxHead)
 8002468:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <_getchar+0x4c>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <_getchar+0x50>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d0f5      	beq.n	8002460 <_getchar+0x8>
	}
	temp = RxBuf[RxTail];
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <_getchar+0x4c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <_getchar+0x54>)
 800247a:	5cd3      	ldrb	r3, [r2, r3]
 800247c:	71fb      	strb	r3, [r7, #7]
	if (++RxTail > (RXBUFSIZE -1))
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <_getchar+0x4c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	3301      	adds	r3, #1
 8002484:	4a07      	ldr	r2, [pc, #28]	; (80024a4 <_getchar+0x4c>)
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <_getchar+0x4c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002490:	db02      	blt.n	8002498 <_getchar+0x40>
	{
		RxTail = 0;
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <_getchar+0x4c>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
	}
	return(temp);
 8002498:	79fb      	ldrb	r3, [r7, #7]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000d84 	.word	0x20000d84
 80024a8:	20000d80 	.word	0x20000d80
 80024ac:	20000980 	.word	0x20000980

080024b0 <USART_Init>:
 *      Author: ADMIN
 */
#include "uart_print.h"

void USART_Init(USART_H_t *USART_handler, UART_HandleTypeDef *huart)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
	USART_handler->_huart = huart;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	601a      	str	r2, [r3, #0]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <UART_sendByte>:

void UART_sendByte(USART_H_t *USART_handler, uint8_t data)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(USART_handler->_huart, &data, 1, 100);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	1cf9      	adds	r1, r7, #3
 80024dc:	2364      	movs	r3, #100	; 0x64
 80024de:	2201      	movs	r2, #1
 80024e0:	f002 f961 	bl	80047a6 <HAL_UART_Transmit>
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <USART_sendChar>:

void USART_sendChar(USART_H_t *USART_handler, uint8_t data)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70fb      	strb	r3, [r7, #3]
    UART_sendByte(USART_handler, data);
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	4619      	mov	r1, r3
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff ffe4 	bl	80024ca <UART_sendByte>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <USART_put>:

void USART_put(USART_H_t *USART_handler, char *data)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	6039      	str	r1, [r7, #0]
	while (data[0] != '\0')
 8002514:	e008      	b.n	8002528 <USART_put+0x1e>
	{
		USART_sendChar(USART_handler, data[0]);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	4619      	mov	r1, r3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ffe5 	bl	80024ec <USART_sendChar>
		data++;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	603b      	str	r3, [r7, #0]
	while (data[0] != '\0')
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f2      	bne.n	8002516 <USART_put+0xc>
	}
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <USART_Transmit>:

int USART_Transmit(USART_H_t *USART_handler, const char *fmt, ...)
{
 800253c:	b40e      	push	{r1, r2, r3}
 800253e:	b580      	push	{r7, lr}
 8002540:	b085      	sub	sp, #20
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
	int done;
	va_list args;
	static char buffer[256];
	va_start(args, fmt);
 8002546:	f107 0320 	add.w	r3, r7, #32
 800254a:	60bb      	str	r3, [r7, #8]

	done = vsnprintf(buffer, 256, fmt, args);
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002554:	4807      	ldr	r0, [pc, #28]	; (8002574 <USART_Transmit+0x38>)
 8002556:	f002 fe6f 	bl	8005238 <vsniprintf>
 800255a:	60f8      	str	r0, [r7, #12]

	USART_put(USART_handler, buffer);
 800255c:	4905      	ldr	r1, [pc, #20]	; (8002574 <USART_Transmit+0x38>)
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff ffd3 	bl	800250a <USART_put>

	va_end(args);
	return done;
 8002564:	68fb      	ldr	r3, [r7, #12]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002570:	b003      	add	sp, #12
 8002572:	4770      	bx	lr
 8002574:	20000d88 	.word	0x20000d88

08002578 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002578:	480c      	ldr	r0, [pc, #48]	; (80025ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800257a:	490d      	ldr	r1, [pc, #52]	; (80025b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800257c:	4a0d      	ldr	r2, [pc, #52]	; (80025b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800257e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002580:	e002      	b.n	8002588 <LoopCopyDataInit>

08002582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002586:	3304      	adds	r3, #4

08002588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800258a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800258c:	d3f9      	bcc.n	8002582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800258e:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002590:	4c0a      	ldr	r4, [pc, #40]	; (80025bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002594:	e001      	b.n	800259a <LoopFillZerobss>

08002596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002598:	3204      	adds	r2, #4

0800259a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800259a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800259c:	d3fb      	bcc.n	8002596 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800259e:	f7ff ff55 	bl	800244c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025a2:	f002 fdf1 	bl	8005188 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025a6:	f7fe f94d 	bl	8000844 <main>
  bx lr
 80025aa:	4770      	bx	lr
  ldr r0, =_sdata
 80025ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b0:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 80025b4:	08005cac 	.word	0x08005cac
  ldr r2, =_sbss
 80025b8:	20000274 	.word	0x20000274
  ldr r4, =_ebss
 80025bc:	20000e9c 	.word	0x20000e9c

080025c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025c0:	e7fe      	b.n	80025c0 <ADC1_2_IRQHandler>
	...

080025c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <HAL_Init+0x28>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a07      	ldr	r2, [pc, #28]	; (80025ec <HAL_Init+0x28>)
 80025ce:	f043 0310 	orr.w	r3, r3, #16
 80025d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025d4:	2003      	movs	r0, #3
 80025d6:	f000 f947 	bl	8002868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025da:	200f      	movs	r0, #15
 80025dc:	f000 f808 	bl	80025f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e0:	f7ff fdb4 	bl	800214c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40022000 	.word	0x40022000

080025f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025f8:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_InitTick+0x54>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_InitTick+0x58>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	4619      	mov	r1, r3
 8002602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002606:	fbb3 f3f1 	udiv	r3, r3, r1
 800260a:	fbb2 f3f3 	udiv	r3, r2, r3
 800260e:	4618      	mov	r0, r3
 8002610:	f000 f95f 	bl	80028d2 <HAL_SYSTICK_Config>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e00e      	b.n	800263c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b0f      	cmp	r3, #15
 8002622:	d80a      	bhi.n	800263a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002624:	2200      	movs	r2, #0
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	f04f 30ff 	mov.w	r0, #4294967295
 800262c:	f000 f927 	bl	800287e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002630:	4a06      	ldr	r2, [pc, #24]	; (800264c <HAL_InitTick+0x5c>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	e000      	b.n	800263c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000204 	.word	0x20000204
 8002648:	2000020c 	.word	0x2000020c
 800264c:	20000208 	.word	0x20000208

08002650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_IncTick+0x1c>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	4b05      	ldr	r3, [pc, #20]	; (8002670 <HAL_IncTick+0x20>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4413      	add	r3, r2
 8002660:	4a03      	ldr	r2, [pc, #12]	; (8002670 <HAL_IncTick+0x20>)
 8002662:	6013      	str	r3, [r2, #0]
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	2000020c 	.word	0x2000020c
 8002670:	20000e88 	.word	0x20000e88

08002674 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return uwTick;
 8002678:	4b02      	ldr	r3, [pc, #8]	; (8002684 <HAL_GetTick+0x10>)
 800267a:	681b      	ldr	r3, [r3, #0]
}
 800267c:	4618      	mov	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr
 8002684:	20000e88 	.word	0x20000e88

08002688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002690:	f7ff fff0 	bl	8002674 <HAL_GetTick>
 8002694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a0:	d005      	beq.n	80026ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026a2:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <HAL_Delay+0x44>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4413      	add	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026ae:	bf00      	nop
 80026b0:	f7ff ffe0 	bl	8002674 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d8f7      	bhi.n	80026b0 <HAL_Delay+0x28>
  {
  }
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	2000020c 	.word	0x2000020c

080026d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ec:	4013      	ands	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002702:	4a04      	ldr	r2, [pc, #16]	; (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	60d3      	str	r3, [r2, #12]
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <__NVIC_GetPriorityGrouping+0x18>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	f003 0307 	and.w	r3, r3, #7
}
 8002726:	4618      	mov	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	2b00      	cmp	r3, #0
 8002744:	db0b      	blt.n	800275e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	f003 021f 	and.w	r2, r3, #31
 800274c:	4906      	ldr	r1, [pc, #24]	; (8002768 <__NVIC_EnableIRQ+0x34>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	2001      	movs	r0, #1
 8002756:	fa00 f202 	lsl.w	r2, r0, r2
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr
 8002768:	e000e100 	.word	0xe000e100

0800276c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	6039      	str	r1, [r7, #0]
 8002776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277c:	2b00      	cmp	r3, #0
 800277e:	db0a      	blt.n	8002796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	b2da      	uxtb	r2, r3
 8002784:	490c      	ldr	r1, [pc, #48]	; (80027b8 <__NVIC_SetPriority+0x4c>)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	0112      	lsls	r2, r2, #4
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	440b      	add	r3, r1
 8002790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002794:	e00a      	b.n	80027ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	b2da      	uxtb	r2, r3
 800279a:	4908      	ldr	r1, [pc, #32]	; (80027bc <__NVIC_SetPriority+0x50>)
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	3b04      	subs	r3, #4
 80027a4:	0112      	lsls	r2, r2, #4
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	440b      	add	r3, r1
 80027aa:	761a      	strb	r2, [r3, #24]
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000e100 	.word	0xe000e100
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	; 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f1c3 0307 	rsb	r3, r3, #7
 80027da:	2b04      	cmp	r3, #4
 80027dc:	bf28      	it	cs
 80027de:	2304      	movcs	r3, #4
 80027e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3304      	adds	r3, #4
 80027e6:	2b06      	cmp	r3, #6
 80027e8:	d902      	bls.n	80027f0 <NVIC_EncodePriority+0x30>
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	3b03      	subs	r3, #3
 80027ee:	e000      	b.n	80027f2 <NVIC_EncodePriority+0x32>
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f4:	f04f 32ff 	mov.w	r2, #4294967295
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43da      	mvns	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	401a      	ands	r2, r3
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002808:	f04f 31ff 	mov.w	r1, #4294967295
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	fa01 f303 	lsl.w	r3, r1, r3
 8002812:	43d9      	mvns	r1, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	4313      	orrs	r3, r2
         );
}
 800281a:	4618      	mov	r0, r3
 800281c:	3724      	adds	r7, #36	; 0x24
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3b01      	subs	r3, #1
 8002830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002834:	d301      	bcc.n	800283a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002836:	2301      	movs	r3, #1
 8002838:	e00f      	b.n	800285a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800283a:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <SysTick_Config+0x40>)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002842:	210f      	movs	r1, #15
 8002844:	f04f 30ff 	mov.w	r0, #4294967295
 8002848:	f7ff ff90 	bl	800276c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <SysTick_Config+0x40>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002852:	4b04      	ldr	r3, [pc, #16]	; (8002864 <SysTick_Config+0x40>)
 8002854:	2207      	movs	r2, #7
 8002856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	e000e010 	.word	0xe000e010

08002868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ff2d 	bl	80026d0 <__NVIC_SetPriorityGrouping>
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800287e:	b580      	push	{r7, lr}
 8002880:	b086      	sub	sp, #24
 8002882:	af00      	add	r7, sp, #0
 8002884:	4603      	mov	r3, r0
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002890:	f7ff ff42 	bl	8002718 <__NVIC_GetPriorityGrouping>
 8002894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	6978      	ldr	r0, [r7, #20]
 800289c:	f7ff ff90 	bl	80027c0 <NVIC_EncodePriority>
 80028a0:	4602      	mov	r2, r0
 80028a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff ff5f 	bl	800276c <__NVIC_SetPriority>
}
 80028ae:	bf00      	nop
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	4603      	mov	r3, r0
 80028be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff35 	bl	8002734 <__NVIC_EnableIRQ>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff ffa2 	bl	8002824 <SysTick_Config>
 80028e0:	4603      	mov	r3, r0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b085      	sub	sp, #20
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d008      	beq.n	8002912 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2204      	movs	r2, #4
 8002904:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e020      	b.n	8002954 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 020e 	bic.w	r2, r2, #14
 8002920:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0201 	bic.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293a:	2101      	movs	r1, #1
 800293c:	fa01 f202 	lsl.w	r2, r1, r2
 8002940:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002952:	7bfb      	ldrb	r3, [r7, #15]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
	...

08002960 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002972:	2b02      	cmp	r3, #2
 8002974:	d005      	beq.n	8002982 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2204      	movs	r2, #4
 800297a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
 8002980:	e0d6      	b.n	8002b30 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 020e 	bic.w	r2, r2, #14
 8002990:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0201 	bic.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	4b64      	ldr	r3, [pc, #400]	; (8002b3c <HAL_DMA_Abort_IT+0x1dc>)
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d958      	bls.n	8002a60 <HAL_DMA_Abort_IT+0x100>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a63      	ldr	r2, [pc, #396]	; (8002b40 <HAL_DMA_Abort_IT+0x1e0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d04f      	beq.n	8002a58 <HAL_DMA_Abort_IT+0xf8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a61      	ldr	r2, [pc, #388]	; (8002b44 <HAL_DMA_Abort_IT+0x1e4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d048      	beq.n	8002a54 <HAL_DMA_Abort_IT+0xf4>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a60      	ldr	r2, [pc, #384]	; (8002b48 <HAL_DMA_Abort_IT+0x1e8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d040      	beq.n	8002a4e <HAL_DMA_Abort_IT+0xee>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a5e      	ldr	r2, [pc, #376]	; (8002b4c <HAL_DMA_Abort_IT+0x1ec>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d038      	beq.n	8002a48 <HAL_DMA_Abort_IT+0xe8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a5d      	ldr	r2, [pc, #372]	; (8002b50 <HAL_DMA_Abort_IT+0x1f0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d030      	beq.n	8002a42 <HAL_DMA_Abort_IT+0xe2>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a5b      	ldr	r2, [pc, #364]	; (8002b54 <HAL_DMA_Abort_IT+0x1f4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d028      	beq.n	8002a3c <HAL_DMA_Abort_IT+0xdc>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a53      	ldr	r2, [pc, #332]	; (8002b3c <HAL_DMA_Abort_IT+0x1dc>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d020      	beq.n	8002a36 <HAL_DMA_Abort_IT+0xd6>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a57      	ldr	r2, [pc, #348]	; (8002b58 <HAL_DMA_Abort_IT+0x1f8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d019      	beq.n	8002a32 <HAL_DMA_Abort_IT+0xd2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a56      	ldr	r2, [pc, #344]	; (8002b5c <HAL_DMA_Abort_IT+0x1fc>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d012      	beq.n	8002a2e <HAL_DMA_Abort_IT+0xce>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a54      	ldr	r2, [pc, #336]	; (8002b60 <HAL_DMA_Abort_IT+0x200>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00a      	beq.n	8002a28 <HAL_DMA_Abort_IT+0xc8>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a53      	ldr	r2, [pc, #332]	; (8002b64 <HAL_DMA_Abort_IT+0x204>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d102      	bne.n	8002a22 <HAL_DMA_Abort_IT+0xc2>
 8002a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a20:	e01b      	b.n	8002a5a <HAL_DMA_Abort_IT+0xfa>
 8002a22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a26:	e018      	b.n	8002a5a <HAL_DMA_Abort_IT+0xfa>
 8002a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a2c:	e015      	b.n	8002a5a <HAL_DMA_Abort_IT+0xfa>
 8002a2e:	2310      	movs	r3, #16
 8002a30:	e013      	b.n	8002a5a <HAL_DMA_Abort_IT+0xfa>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e011      	b.n	8002a5a <HAL_DMA_Abort_IT+0xfa>
 8002a36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a3a:	e00e      	b.n	8002a5a <HAL_DMA_Abort_IT+0xfa>
 8002a3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a40:	e00b      	b.n	8002a5a <HAL_DMA_Abort_IT+0xfa>
 8002a42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a46:	e008      	b.n	8002a5a <HAL_DMA_Abort_IT+0xfa>
 8002a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a4c:	e005      	b.n	8002a5a <HAL_DMA_Abort_IT+0xfa>
 8002a4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a52:	e002      	b.n	8002a5a <HAL_DMA_Abort_IT+0xfa>
 8002a54:	2310      	movs	r3, #16
 8002a56:	e000      	b.n	8002a5a <HAL_DMA_Abort_IT+0xfa>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	4a43      	ldr	r2, [pc, #268]	; (8002b68 <HAL_DMA_Abort_IT+0x208>)
 8002a5c:	6053      	str	r3, [r2, #4]
 8002a5e:	e057      	b.n	8002b10 <HAL_DMA_Abort_IT+0x1b0>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a36      	ldr	r2, [pc, #216]	; (8002b40 <HAL_DMA_Abort_IT+0x1e0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d04f      	beq.n	8002b0a <HAL_DMA_Abort_IT+0x1aa>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a35      	ldr	r2, [pc, #212]	; (8002b44 <HAL_DMA_Abort_IT+0x1e4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d048      	beq.n	8002b06 <HAL_DMA_Abort_IT+0x1a6>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a33      	ldr	r2, [pc, #204]	; (8002b48 <HAL_DMA_Abort_IT+0x1e8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d040      	beq.n	8002b00 <HAL_DMA_Abort_IT+0x1a0>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a32      	ldr	r2, [pc, #200]	; (8002b4c <HAL_DMA_Abort_IT+0x1ec>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d038      	beq.n	8002afa <HAL_DMA_Abort_IT+0x19a>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a30      	ldr	r2, [pc, #192]	; (8002b50 <HAL_DMA_Abort_IT+0x1f0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d030      	beq.n	8002af4 <HAL_DMA_Abort_IT+0x194>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a2f      	ldr	r2, [pc, #188]	; (8002b54 <HAL_DMA_Abort_IT+0x1f4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d028      	beq.n	8002aee <HAL_DMA_Abort_IT+0x18e>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a26      	ldr	r2, [pc, #152]	; (8002b3c <HAL_DMA_Abort_IT+0x1dc>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d020      	beq.n	8002ae8 <HAL_DMA_Abort_IT+0x188>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a2b      	ldr	r2, [pc, #172]	; (8002b58 <HAL_DMA_Abort_IT+0x1f8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d019      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0x184>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a29      	ldr	r2, [pc, #164]	; (8002b5c <HAL_DMA_Abort_IT+0x1fc>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d012      	beq.n	8002ae0 <HAL_DMA_Abort_IT+0x180>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a28      	ldr	r2, [pc, #160]	; (8002b60 <HAL_DMA_Abort_IT+0x200>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00a      	beq.n	8002ada <HAL_DMA_Abort_IT+0x17a>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a26      	ldr	r2, [pc, #152]	; (8002b64 <HAL_DMA_Abort_IT+0x204>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d102      	bne.n	8002ad4 <HAL_DMA_Abort_IT+0x174>
 8002ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad2:	e01b      	b.n	8002b0c <HAL_DMA_Abort_IT+0x1ac>
 8002ad4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ad8:	e018      	b.n	8002b0c <HAL_DMA_Abort_IT+0x1ac>
 8002ada:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ade:	e015      	b.n	8002b0c <HAL_DMA_Abort_IT+0x1ac>
 8002ae0:	2310      	movs	r3, #16
 8002ae2:	e013      	b.n	8002b0c <HAL_DMA_Abort_IT+0x1ac>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e011      	b.n	8002b0c <HAL_DMA_Abort_IT+0x1ac>
 8002ae8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aec:	e00e      	b.n	8002b0c <HAL_DMA_Abort_IT+0x1ac>
 8002aee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002af2:	e00b      	b.n	8002b0c <HAL_DMA_Abort_IT+0x1ac>
 8002af4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002af8:	e008      	b.n	8002b0c <HAL_DMA_Abort_IT+0x1ac>
 8002afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002afe:	e005      	b.n	8002b0c <HAL_DMA_Abort_IT+0x1ac>
 8002b00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b04:	e002      	b.n	8002b0c <HAL_DMA_Abort_IT+0x1ac>
 8002b06:	2310      	movs	r3, #16
 8002b08:	e000      	b.n	8002b0c <HAL_DMA_Abort_IT+0x1ac>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	4a17      	ldr	r2, [pc, #92]	; (8002b6c <HAL_DMA_Abort_IT+0x20c>)
 8002b0e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	4798      	blx	r3
    } 
  }
  return status;
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40020080 	.word	0x40020080
 8002b40:	40020008 	.word	0x40020008
 8002b44:	4002001c 	.word	0x4002001c
 8002b48:	40020030 	.word	0x40020030
 8002b4c:	40020044 	.word	0x40020044
 8002b50:	40020058 	.word	0x40020058
 8002b54:	4002006c 	.word	0x4002006c
 8002b58:	40020408 	.word	0x40020408
 8002b5c:	4002041c 	.word	0x4002041c
 8002b60:	40020430 	.word	0x40020430
 8002b64:	40020444 	.word	0x40020444
 8002b68:	40020400 	.word	0x40020400
 8002b6c:	40020000 	.word	0x40020000

08002b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b08b      	sub	sp, #44	; 0x2c
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b82:	e179      	b.n	8002e78 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b84:	2201      	movs	r2, #1
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	f040 8168 	bne.w	8002e72 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4a96      	ldr	r2, [pc, #600]	; (8002e00 <HAL_GPIO_Init+0x290>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d05e      	beq.n	8002c6a <HAL_GPIO_Init+0xfa>
 8002bac:	4a94      	ldr	r2, [pc, #592]	; (8002e00 <HAL_GPIO_Init+0x290>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d875      	bhi.n	8002c9e <HAL_GPIO_Init+0x12e>
 8002bb2:	4a94      	ldr	r2, [pc, #592]	; (8002e04 <HAL_GPIO_Init+0x294>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d058      	beq.n	8002c6a <HAL_GPIO_Init+0xfa>
 8002bb8:	4a92      	ldr	r2, [pc, #584]	; (8002e04 <HAL_GPIO_Init+0x294>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d86f      	bhi.n	8002c9e <HAL_GPIO_Init+0x12e>
 8002bbe:	4a92      	ldr	r2, [pc, #584]	; (8002e08 <HAL_GPIO_Init+0x298>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d052      	beq.n	8002c6a <HAL_GPIO_Init+0xfa>
 8002bc4:	4a90      	ldr	r2, [pc, #576]	; (8002e08 <HAL_GPIO_Init+0x298>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d869      	bhi.n	8002c9e <HAL_GPIO_Init+0x12e>
 8002bca:	4a90      	ldr	r2, [pc, #576]	; (8002e0c <HAL_GPIO_Init+0x29c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d04c      	beq.n	8002c6a <HAL_GPIO_Init+0xfa>
 8002bd0:	4a8e      	ldr	r2, [pc, #568]	; (8002e0c <HAL_GPIO_Init+0x29c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d863      	bhi.n	8002c9e <HAL_GPIO_Init+0x12e>
 8002bd6:	4a8e      	ldr	r2, [pc, #568]	; (8002e10 <HAL_GPIO_Init+0x2a0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d046      	beq.n	8002c6a <HAL_GPIO_Init+0xfa>
 8002bdc:	4a8c      	ldr	r2, [pc, #560]	; (8002e10 <HAL_GPIO_Init+0x2a0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d85d      	bhi.n	8002c9e <HAL_GPIO_Init+0x12e>
 8002be2:	2b12      	cmp	r3, #18
 8002be4:	d82a      	bhi.n	8002c3c <HAL_GPIO_Init+0xcc>
 8002be6:	2b12      	cmp	r3, #18
 8002be8:	d859      	bhi.n	8002c9e <HAL_GPIO_Init+0x12e>
 8002bea:	a201      	add	r2, pc, #4	; (adr r2, 8002bf0 <HAL_GPIO_Init+0x80>)
 8002bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf0:	08002c6b 	.word	0x08002c6b
 8002bf4:	08002c45 	.word	0x08002c45
 8002bf8:	08002c57 	.word	0x08002c57
 8002bfc:	08002c99 	.word	0x08002c99
 8002c00:	08002c9f 	.word	0x08002c9f
 8002c04:	08002c9f 	.word	0x08002c9f
 8002c08:	08002c9f 	.word	0x08002c9f
 8002c0c:	08002c9f 	.word	0x08002c9f
 8002c10:	08002c9f 	.word	0x08002c9f
 8002c14:	08002c9f 	.word	0x08002c9f
 8002c18:	08002c9f 	.word	0x08002c9f
 8002c1c:	08002c9f 	.word	0x08002c9f
 8002c20:	08002c9f 	.word	0x08002c9f
 8002c24:	08002c9f 	.word	0x08002c9f
 8002c28:	08002c9f 	.word	0x08002c9f
 8002c2c:	08002c9f 	.word	0x08002c9f
 8002c30:	08002c9f 	.word	0x08002c9f
 8002c34:	08002c4d 	.word	0x08002c4d
 8002c38:	08002c61 	.word	0x08002c61
 8002c3c:	4a75      	ldr	r2, [pc, #468]	; (8002e14 <HAL_GPIO_Init+0x2a4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d013      	beq.n	8002c6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c42:	e02c      	b.n	8002c9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	623b      	str	r3, [r7, #32]
          break;
 8002c4a:	e029      	b.n	8002ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	3304      	adds	r3, #4
 8002c52:	623b      	str	r3, [r7, #32]
          break;
 8002c54:	e024      	b.n	8002ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	3308      	adds	r3, #8
 8002c5c:	623b      	str	r3, [r7, #32]
          break;
 8002c5e:	e01f      	b.n	8002ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	330c      	adds	r3, #12
 8002c66:	623b      	str	r3, [r7, #32]
          break;
 8002c68:	e01a      	b.n	8002ca0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d102      	bne.n	8002c78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c72:	2304      	movs	r3, #4
 8002c74:	623b      	str	r3, [r7, #32]
          break;
 8002c76:	e013      	b.n	8002ca0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d105      	bne.n	8002c8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c80:	2308      	movs	r3, #8
 8002c82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	611a      	str	r2, [r3, #16]
          break;
 8002c8a:	e009      	b.n	8002ca0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c8c:	2308      	movs	r3, #8
 8002c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	615a      	str	r2, [r3, #20]
          break;
 8002c96:	e003      	b.n	8002ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	623b      	str	r3, [r7, #32]
          break;
 8002c9c:	e000      	b.n	8002ca0 <HAL_GPIO_Init+0x130>
          break;
 8002c9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2bff      	cmp	r3, #255	; 0xff
 8002ca4:	d801      	bhi.n	8002caa <HAL_GPIO_Init+0x13a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	e001      	b.n	8002cae <HAL_GPIO_Init+0x13e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3304      	adds	r3, #4
 8002cae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2bff      	cmp	r3, #255	; 0xff
 8002cb4:	d802      	bhi.n	8002cbc <HAL_GPIO_Init+0x14c>
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	e002      	b.n	8002cc2 <HAL_GPIO_Init+0x152>
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	3b08      	subs	r3, #8
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	210f      	movs	r1, #15
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	6a39      	ldr	r1, [r7, #32]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80c1 	beq.w	8002e72 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cf0:	4b49      	ldr	r3, [pc, #292]	; (8002e18 <HAL_GPIO_Init+0x2a8>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	4a48      	ldr	r2, [pc, #288]	; (8002e18 <HAL_GPIO_Init+0x2a8>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6193      	str	r3, [r2, #24]
 8002cfc:	4b46      	ldr	r3, [pc, #280]	; (8002e18 <HAL_GPIO_Init+0x2a8>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d08:	4a44      	ldr	r2, [pc, #272]	; (8002e1c <HAL_GPIO_Init+0x2ac>)
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	3302      	adds	r3, #2
 8002d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	220f      	movs	r2, #15
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a3c      	ldr	r2, [pc, #240]	; (8002e20 <HAL_GPIO_Init+0x2b0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d01f      	beq.n	8002d74 <HAL_GPIO_Init+0x204>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a3b      	ldr	r2, [pc, #236]	; (8002e24 <HAL_GPIO_Init+0x2b4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d019      	beq.n	8002d70 <HAL_GPIO_Init+0x200>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a3a      	ldr	r2, [pc, #232]	; (8002e28 <HAL_GPIO_Init+0x2b8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d013      	beq.n	8002d6c <HAL_GPIO_Init+0x1fc>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a39      	ldr	r2, [pc, #228]	; (8002e2c <HAL_GPIO_Init+0x2bc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00d      	beq.n	8002d68 <HAL_GPIO_Init+0x1f8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a38      	ldr	r2, [pc, #224]	; (8002e30 <HAL_GPIO_Init+0x2c0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d007      	beq.n	8002d64 <HAL_GPIO_Init+0x1f4>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a37      	ldr	r2, [pc, #220]	; (8002e34 <HAL_GPIO_Init+0x2c4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d101      	bne.n	8002d60 <HAL_GPIO_Init+0x1f0>
 8002d5c:	2305      	movs	r3, #5
 8002d5e:	e00a      	b.n	8002d76 <HAL_GPIO_Init+0x206>
 8002d60:	2306      	movs	r3, #6
 8002d62:	e008      	b.n	8002d76 <HAL_GPIO_Init+0x206>
 8002d64:	2304      	movs	r3, #4
 8002d66:	e006      	b.n	8002d76 <HAL_GPIO_Init+0x206>
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e004      	b.n	8002d76 <HAL_GPIO_Init+0x206>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e002      	b.n	8002d76 <HAL_GPIO_Init+0x206>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <HAL_GPIO_Init+0x206>
 8002d74:	2300      	movs	r3, #0
 8002d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d78:	f002 0203 	and.w	r2, r2, #3
 8002d7c:	0092      	lsls	r2, r2, #2
 8002d7e:	4093      	lsls	r3, r2
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d86:	4925      	ldr	r1, [pc, #148]	; (8002e1c <HAL_GPIO_Init+0x2ac>)
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	089b      	lsrs	r3, r3, #2
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d006      	beq.n	8002dae <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002da0:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <HAL_GPIO_Init+0x2c8>)
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4924      	ldr	r1, [pc, #144]	; (8002e38 <HAL_GPIO_Init+0x2c8>)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	600b      	str	r3, [r1, #0]
 8002dac:	e006      	b.n	8002dbc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002dae:	4b22      	ldr	r3, [pc, #136]	; (8002e38 <HAL_GPIO_Init+0x2c8>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	4920      	ldr	r1, [pc, #128]	; (8002e38 <HAL_GPIO_Init+0x2c8>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d006      	beq.n	8002dd6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <HAL_GPIO_Init+0x2c8>)
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	491a      	ldr	r1, [pc, #104]	; (8002e38 <HAL_GPIO_Init+0x2c8>)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]
 8002dd4:	e006      	b.n	8002de4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002dd6:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <HAL_GPIO_Init+0x2c8>)
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	4916      	ldr	r1, [pc, #88]	; (8002e38 <HAL_GPIO_Init+0x2c8>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d025      	beq.n	8002e3c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002df0:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <HAL_GPIO_Init+0x2c8>)
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	4910      	ldr	r1, [pc, #64]	; (8002e38 <HAL_GPIO_Init+0x2c8>)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	608b      	str	r3, [r1, #8]
 8002dfc:	e025      	b.n	8002e4a <HAL_GPIO_Init+0x2da>
 8002dfe:	bf00      	nop
 8002e00:	10320000 	.word	0x10320000
 8002e04:	10310000 	.word	0x10310000
 8002e08:	10220000 	.word	0x10220000
 8002e0c:	10210000 	.word	0x10210000
 8002e10:	10120000 	.word	0x10120000
 8002e14:	10110000 	.word	0x10110000
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40010000 	.word	0x40010000
 8002e20:	40010800 	.word	0x40010800
 8002e24:	40010c00 	.word	0x40010c00
 8002e28:	40011000 	.word	0x40011000
 8002e2c:	40011400 	.word	0x40011400
 8002e30:	40011800 	.word	0x40011800
 8002e34:	40011c00 	.word	0x40011c00
 8002e38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e3c:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <HAL_GPIO_Init+0x324>)
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	4913      	ldr	r1, [pc, #76]	; (8002e94 <HAL_GPIO_Init+0x324>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d006      	beq.n	8002e64 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e56:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <HAL_GPIO_Init+0x324>)
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	490e      	ldr	r1, [pc, #56]	; (8002e94 <HAL_GPIO_Init+0x324>)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60cb      	str	r3, [r1, #12]
 8002e62:	e006      	b.n	8002e72 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_GPIO_Init+0x324>)
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	4909      	ldr	r1, [pc, #36]	; (8002e94 <HAL_GPIO_Init+0x324>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	3301      	adds	r3, #1
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f47f ae7e 	bne.w	8002b84 <HAL_GPIO_Init+0x14>
  }
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	372c      	adds	r7, #44	; 0x2c
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	40010400 	.word	0x40010400

08002e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	807b      	strh	r3, [r7, #2]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ea8:	787b      	ldrb	r3, [r7, #1]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eae:	887a      	ldrh	r2, [r7, #2]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002eb4:	e003      	b.n	8002ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002eb6:	887b      	ldrh	r3, [r7, #2]
 8002eb8:	041a      	lsls	r2, r3, #16
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	611a      	str	r2, [r3, #16]
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ede:	4a05      	ldr	r2, [pc, #20]	; (8002ef4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f806 	bl	8002ef8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002eec:	bf00      	nop
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40010400 	.word	0x40010400

08002ef8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e12b      	b.n	8003176 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff f93c 	bl	80021b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2224      	movs	r2, #36	; 0x24
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f70:	f001 fb86 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 8002f74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4a81      	ldr	r2, [pc, #516]	; (8003180 <HAL_I2C_Init+0x274>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d807      	bhi.n	8002f90 <HAL_I2C_Init+0x84>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a80      	ldr	r2, [pc, #512]	; (8003184 <HAL_I2C_Init+0x278>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	bf94      	ite	ls
 8002f88:	2301      	movls	r3, #1
 8002f8a:	2300      	movhi	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	e006      	b.n	8002f9e <HAL_I2C_Init+0x92>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4a7d      	ldr	r2, [pc, #500]	; (8003188 <HAL_I2C_Init+0x27c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	bf94      	ite	ls
 8002f98:	2301      	movls	r3, #1
 8002f9a:	2300      	movhi	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e0e7      	b.n	8003176 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4a78      	ldr	r2, [pc, #480]	; (800318c <HAL_I2C_Init+0x280>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	0c9b      	lsrs	r3, r3, #18
 8002fb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a6a      	ldr	r2, [pc, #424]	; (8003180 <HAL_I2C_Init+0x274>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d802      	bhi.n	8002fe0 <HAL_I2C_Init+0xd4>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	e009      	b.n	8002ff4 <HAL_I2C_Init+0xe8>
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	4a69      	ldr	r2, [pc, #420]	; (8003190 <HAL_I2C_Init+0x284>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	099b      	lsrs	r3, r3, #6
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003006:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	495c      	ldr	r1, [pc, #368]	; (8003180 <HAL_I2C_Init+0x274>)
 8003010:	428b      	cmp	r3, r1
 8003012:	d819      	bhi.n	8003048 <HAL_I2C_Init+0x13c>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1e59      	subs	r1, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003022:	1c59      	adds	r1, r3, #1
 8003024:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003028:	400b      	ands	r3, r1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_I2C_Init+0x138>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1e59      	subs	r1, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	fbb1 f3f3 	udiv	r3, r1, r3
 800303c:	3301      	adds	r3, #1
 800303e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003042:	e051      	b.n	80030e8 <HAL_I2C_Init+0x1dc>
 8003044:	2304      	movs	r3, #4
 8003046:	e04f      	b.n	80030e8 <HAL_I2C_Init+0x1dc>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d111      	bne.n	8003074 <HAL_I2C_Init+0x168>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	1e58      	subs	r0, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6859      	ldr	r1, [r3, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	440b      	add	r3, r1
 800305e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003062:	3301      	adds	r3, #1
 8003064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	e012      	b.n	800309a <HAL_I2C_Init+0x18e>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1e58      	subs	r0, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6859      	ldr	r1, [r3, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	0099      	lsls	r1, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	fbb0 f3f3 	udiv	r3, r0, r3
 800308a:	3301      	adds	r3, #1
 800308c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_Init+0x196>
 800309e:	2301      	movs	r3, #1
 80030a0:	e022      	b.n	80030e8 <HAL_I2C_Init+0x1dc>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10e      	bne.n	80030c8 <HAL_I2C_Init+0x1bc>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1e58      	subs	r0, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	460b      	mov	r3, r1
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	440b      	add	r3, r1
 80030b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030c6:	e00f      	b.n	80030e8 <HAL_I2C_Init+0x1dc>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1e58      	subs	r0, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	0099      	lsls	r1, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	fbb0 f3f3 	udiv	r3, r0, r3
 80030de:	3301      	adds	r3, #1
 80030e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	6809      	ldr	r1, [r1, #0]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69da      	ldr	r2, [r3, #28]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003116:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6911      	ldr	r1, [r2, #16]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68d2      	ldr	r2, [r2, #12]
 8003122:	4311      	orrs	r1, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	430b      	orrs	r3, r1
 800312a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2220      	movs	r2, #32
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	000186a0 	.word	0x000186a0
 8003184:	001e847f 	.word	0x001e847f
 8003188:	003d08ff 	.word	0x003d08ff
 800318c:	431bde83 	.word	0x431bde83
 8003190:	10624dd3 	.word	0x10624dd3

08003194 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af02      	add	r7, sp, #8
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	461a      	mov	r2, r3
 80031a0:	460b      	mov	r3, r1
 80031a2:	817b      	strh	r3, [r7, #10]
 80031a4:	4613      	mov	r3, r2
 80031a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031a8:	f7ff fa64 	bl	8002674 <HAL_GetTick>
 80031ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b20      	cmp	r3, #32
 80031b8:	f040 80e0 	bne.w	800337c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	2319      	movs	r3, #25
 80031c2:	2201      	movs	r2, #1
 80031c4:	4970      	ldr	r1, [pc, #448]	; (8003388 <HAL_I2C_Master_Transmit+0x1f4>)
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 fcaa 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031d2:	2302      	movs	r3, #2
 80031d4:	e0d3      	b.n	800337e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_I2C_Master_Transmit+0x50>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e0cc      	b.n	800337e <HAL_I2C_Master_Transmit+0x1ea>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d007      	beq.n	800320a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0201 	orr.w	r2, r2, #1
 8003208:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003218:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2221      	movs	r2, #33	; 0x21
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2210      	movs	r2, #16
 8003226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	893a      	ldrh	r2, [r7, #8]
 800323a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4a50      	ldr	r2, [pc, #320]	; (800338c <HAL_I2C_Master_Transmit+0x1f8>)
 800324a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800324c:	8979      	ldrh	r1, [r7, #10]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	6a3a      	ldr	r2, [r7, #32]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 fb14 	bl	8003880 <I2C_MasterRequestWrite>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e08d      	b.n	800337e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003278:	e066      	b.n	8003348 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	6a39      	ldr	r1, [r7, #32]
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 fd24 	bl	8003ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00d      	beq.n	80032a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	2b04      	cmp	r3, #4
 8003290:	d107      	bne.n	80032a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e06b      	b.n	800337e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	781a      	ldrb	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d11b      	bne.n	800331c <HAL_I2C_Master_Transmit+0x188>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d017      	beq.n	800331c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	781a      	ldrb	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	6a39      	ldr	r1, [r7, #32]
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fd14 	bl	8003d4e <I2C_WaitOnBTFFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00d      	beq.n	8003348 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	2b04      	cmp	r3, #4
 8003332:	d107      	bne.n	8003344 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003342:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e01a      	b.n	800337e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334c:	2b00      	cmp	r3, #0
 800334e:	d194      	bne.n	800327a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800335e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	e000      	b.n	800337e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800337c:	2302      	movs	r3, #2
  }
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	00100002 	.word	0x00100002
 800338c:	ffff0000 	.word	0xffff0000

08003390 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08c      	sub	sp, #48	; 0x30
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	607a      	str	r2, [r7, #4]
 800339a:	461a      	mov	r2, r3
 800339c:	460b      	mov	r3, r1
 800339e:	817b      	strh	r3, [r7, #10]
 80033a0:	4613      	mov	r3, r2
 80033a2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033a8:	f7ff f964 	bl	8002674 <HAL_GetTick>
 80033ac:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	f040 823f 	bne.w	800383a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	2319      	movs	r3, #25
 80033c2:	2201      	movs	r2, #1
 80033c4:	497f      	ldr	r1, [pc, #508]	; (80035c4 <HAL_I2C_Master_Receive+0x234>)
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fbaa 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
 80033d4:	e232      	b.n	800383c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_I2C_Master_Receive+0x54>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e22b      	b.n	800383c <HAL_I2C_Master_Receive+0x4ac>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d007      	beq.n	800340a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 0201 	orr.w	r2, r2, #1
 8003408:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003418:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2222      	movs	r2, #34	; 0x22
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2210      	movs	r2, #16
 8003426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	893a      	ldrh	r2, [r7, #8]
 800343a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4a5f      	ldr	r2, [pc, #380]	; (80035c8 <HAL_I2C_Master_Receive+0x238>)
 800344a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800344c:	8979      	ldrh	r1, [r7, #10]
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 fa96 	bl	8003984 <I2C_MasterRequestRead>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e1ec      	b.n	800383c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003466:	2b00      	cmp	r3, #0
 8003468:	d113      	bne.n	8003492 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346a:	2300      	movs	r3, #0
 800346c:	61fb      	str	r3, [r7, #28]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	e1c0      	b.n	8003814 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003496:	2b01      	cmp	r3, #1
 8003498:	d11e      	bne.n	80034d8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034aa:	b672      	cpsid	i
}
 80034ac:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034d4:	b662      	cpsie	i
}
 80034d6:	e035      	b.n	8003544 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d11e      	bne.n	800351e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034f0:	b672      	cpsid	i
}
 80034f2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003518:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800351a:	b662      	cpsie	i
}
 800351c:	e012      	b.n	8003544 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800352c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800352e:	2300      	movs	r3, #0
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003544:	e166      	b.n	8003814 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354a:	2b03      	cmp	r3, #3
 800354c:	f200 811f 	bhi.w	800378e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003554:	2b01      	cmp	r3, #1
 8003556:	d123      	bne.n	80035a0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 fc37 	bl	8003dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e167      	b.n	800383c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691a      	ldr	r2, [r3, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800359e:	e139      	b.n	8003814 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d152      	bne.n	800364e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	2200      	movs	r2, #0
 80035b0:	4906      	ldr	r1, [pc, #24]	; (80035cc <HAL_I2C_Master_Receive+0x23c>)
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 fab4 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d008      	beq.n	80035d0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e13c      	b.n	800383c <HAL_I2C_Master_Receive+0x4ac>
 80035c2:	bf00      	nop
 80035c4:	00100002 	.word	0x00100002
 80035c8:	ffff0000 	.word	0xffff0000
 80035cc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80035d0:	b672      	cpsid	i
}
 80035d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003616:	b662      	cpsie	i
}
 8003618:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003642:	b29b      	uxth	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800364c:	e0e2      	b.n	8003814 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	2200      	movs	r2, #0
 8003656:	497b      	ldr	r1, [pc, #492]	; (8003844 <HAL_I2C_Master_Receive+0x4b4>)
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fa61 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0e9      	b.n	800383c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003676:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003678:	b672      	cpsid	i
}
 800367a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80036ae:	4b66      	ldr	r3, [pc, #408]	; (8003848 <HAL_I2C_Master_Receive+0x4b8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	4a65      	ldr	r2, [pc, #404]	; (800384c <HAL_I2C_Master_Receive+0x4bc>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	0a1a      	lsrs	r2, r3, #8
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	00da      	lsls	r2, r3, #3
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d118      	bne.n	8003706 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f043 0220 	orr.w	r2, r3, #32
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80036f6:	b662      	cpsie	i
}
 80036f8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e09a      	b.n	800383c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b04      	cmp	r3, #4
 8003712:	d1d9      	bne.n	80036c8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003756:	b662      	cpsie	i
}
 8003758:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003782:	b29b      	uxth	r3, r3
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800378c:	e042      	b.n	8003814 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800378e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003790:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 fb1c 	bl	8003dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e04c      	b.n	800383c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d118      	bne.n	8003814 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003818:	2b00      	cmp	r3, #0
 800381a:	f47f ae94 	bne.w	8003546 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e000      	b.n	800383c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800383a:	2302      	movs	r3, #2
  }
}
 800383c:	4618      	mov	r0, r3
 800383e:	3728      	adds	r7, #40	; 0x28
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	00010004 	.word	0x00010004
 8003848:	20000204 	.word	0x20000204
 800384c:	14f8b589 	.word	0x14f8b589

08003850 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385e:	b2db      	uxtb	r3, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr

0800386a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr

08003880 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af02      	add	r7, sp, #8
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	460b      	mov	r3, r1
 800388e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d006      	beq.n	80038aa <I2C_MasterRequestWrite+0x2a>
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d003      	beq.n	80038aa <I2C_MasterRequestWrite+0x2a>
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038a8:	d108      	bne.n	80038bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e00b      	b.n	80038d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	2b12      	cmp	r3, #18
 80038c2:	d107      	bne.n	80038d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 f91d 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00d      	beq.n	8003908 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fa:	d103      	bne.n	8003904 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e035      	b.n	8003974 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003910:	d108      	bne.n	8003924 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003912:	897b      	ldrh	r3, [r7, #10]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003920:	611a      	str	r2, [r3, #16]
 8003922:	e01b      	b.n	800395c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003924:	897b      	ldrh	r3, [r7, #10]
 8003926:	11db      	asrs	r3, r3, #7
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f003 0306 	and.w	r3, r3, #6
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f063 030f 	orn	r3, r3, #15
 8003934:	b2da      	uxtb	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	490e      	ldr	r1, [pc, #56]	; (800397c <I2C_MasterRequestWrite+0xfc>)
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f943 	bl	8003bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e010      	b.n	8003974 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003952:	897b      	ldrh	r3, [r7, #10]
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	4907      	ldr	r1, [pc, #28]	; (8003980 <I2C_MasterRequestWrite+0x100>)
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f933 	bl	8003bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	00010008 	.word	0x00010008
 8003980:	00010002 	.word	0x00010002

08003984 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	460b      	mov	r3, r1
 8003992:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d006      	beq.n	80039be <I2C_MasterRequestRead+0x3a>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d003      	beq.n	80039be <I2C_MasterRequestRead+0x3a>
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039bc:	d108      	bne.n	80039d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	e00b      	b.n	80039e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	2b11      	cmp	r3, #17
 80039d6:	d107      	bne.n	80039e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f893 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00d      	beq.n	8003a1c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a0e:	d103      	bne.n	8003a18 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e079      	b.n	8003b10 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a24:	d108      	bne.n	8003a38 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a26:	897b      	ldrh	r3, [r7, #10]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	611a      	str	r2, [r3, #16]
 8003a36:	e05f      	b.n	8003af8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a38:	897b      	ldrh	r3, [r7, #10]
 8003a3a:	11db      	asrs	r3, r3, #7
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	f003 0306 	and.w	r3, r3, #6
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	f063 030f 	orn	r3, r3, #15
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	4930      	ldr	r1, [pc, #192]	; (8003b18 <I2C_MasterRequestRead+0x194>)
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f8b9 	bl	8003bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e054      	b.n	8003b10 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a66:	897b      	ldrh	r3, [r7, #10]
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	4929      	ldr	r1, [pc, #164]	; (8003b1c <I2C_MasterRequestRead+0x198>)
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 f8a9 	bl	8003bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e044      	b.n	8003b10 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aaa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f831 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00d      	beq.n	8003ae0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad2:	d103      	bne.n	8003adc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e017      	b.n	8003b10 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ae0:	897b      	ldrh	r3, [r7, #10]
 8003ae2:	11db      	asrs	r3, r3, #7
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	f003 0306 	and.w	r3, r3, #6
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	f063 030e 	orn	r3, r3, #14
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	4907      	ldr	r1, [pc, #28]	; (8003b1c <I2C_MasterRequestRead+0x198>)
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f865 	bl	8003bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	00010008 	.word	0x00010008
 8003b1c:	00010002 	.word	0x00010002

08003b20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b30:	e025      	b.n	8003b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b38:	d021      	beq.n	8003b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f7fe fd9b 	bl	8002674 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d302      	bcc.n	8003b50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d116      	bne.n	8003b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f043 0220 	orr.w	r2, r3, #32
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e023      	b.n	8003bc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	0c1b      	lsrs	r3, r3, #16
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d10d      	bne.n	8003ba4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	43da      	mvns	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4013      	ands	r3, r2
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	e00c      	b.n	8003bbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	43da      	mvns	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d0b6      	beq.n	8003b32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bdc:	e051      	b.n	8003c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bec:	d123      	bne.n	8003c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bfc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f043 0204 	orr.w	r2, r3, #4
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e046      	b.n	8003cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3c:	d021      	beq.n	8003c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3e:	f7fe fd19 	bl	8002674 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d302      	bcc.n	8003c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d116      	bne.n	8003c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f043 0220 	orr.w	r2, r3, #32
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e020      	b.n	8003cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	0c1b      	lsrs	r3, r3, #16
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d10c      	bne.n	8003ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	43da      	mvns	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4013      	ands	r3, r2
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bf14      	ite	ne
 8003c9e:	2301      	movne	r3, #1
 8003ca0:	2300      	moveq	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	e00b      	b.n	8003cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	43da      	mvns	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	bf14      	ite	ne
 8003cb8:	2301      	movne	r3, #1
 8003cba:	2300      	moveq	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d18d      	bne.n	8003bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cd8:	e02d      	b.n	8003d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f8ce 	bl	8003e7c <I2C_IsAcknowledgeFailed>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e02d      	b.n	8003d46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf0:	d021      	beq.n	8003d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf2:	f7fe fcbf 	bl	8002674 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d302      	bcc.n	8003d08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d116      	bne.n	8003d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f043 0220 	orr.w	r2, r3, #32
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e007      	b.n	8003d46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d40:	2b80      	cmp	r3, #128	; 0x80
 8003d42:	d1ca      	bne.n	8003cda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d5a:	e02d      	b.n	8003db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f88d 	bl	8003e7c <I2C_IsAcknowledgeFailed>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e02d      	b.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d72:	d021      	beq.n	8003db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d74:	f7fe fc7e 	bl	8002674 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d302      	bcc.n	8003d8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d116      	bne.n	8003db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	f043 0220 	orr.w	r2, r3, #32
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e007      	b.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d1ca      	bne.n	8003d5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ddc:	e042      	b.n	8003e64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b10      	cmp	r3, #16
 8003dea:	d119      	bne.n	8003e20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f06f 0210 	mvn.w	r2, #16
 8003df4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e029      	b.n	8003e74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e20:	f7fe fc28 	bl	8002674 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d302      	bcc.n	8003e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d116      	bne.n	8003e64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	f043 0220 	orr.w	r2, r3, #32
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e007      	b.n	8003e74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6e:	2b40      	cmp	r3, #64	; 0x40
 8003e70:	d1b5      	bne.n	8003dde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e92:	d11b      	bne.n	8003ecc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	f043 0204 	orr.w	r2, r3, #4
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e272      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 8087 	beq.w	8004006 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ef8:	4b92      	ldr	r3, [pc, #584]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 030c 	and.w	r3, r3, #12
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d00c      	beq.n	8003f1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f04:	4b8f      	ldr	r3, [pc, #572]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d112      	bne.n	8003f36 <HAL_RCC_OscConfig+0x5e>
 8003f10:	4b8c      	ldr	r3, [pc, #560]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1c:	d10b      	bne.n	8003f36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f1e:	4b89      	ldr	r3, [pc, #548]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d06c      	beq.n	8004004 <HAL_RCC_OscConfig+0x12c>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d168      	bne.n	8004004 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e24c      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3e:	d106      	bne.n	8003f4e <HAL_RCC_OscConfig+0x76>
 8003f40:	4b80      	ldr	r3, [pc, #512]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a7f      	ldr	r2, [pc, #508]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	e02e      	b.n	8003fac <HAL_RCC_OscConfig+0xd4>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10c      	bne.n	8003f70 <HAL_RCC_OscConfig+0x98>
 8003f56:	4b7b      	ldr	r3, [pc, #492]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a7a      	ldr	r2, [pc, #488]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	4b78      	ldr	r3, [pc, #480]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a77      	ldr	r2, [pc, #476]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e01d      	b.n	8003fac <HAL_RCC_OscConfig+0xd4>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0xbc>
 8003f7a:	4b72      	ldr	r3, [pc, #456]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a71      	ldr	r2, [pc, #452]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	4b6f      	ldr	r3, [pc, #444]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a6e      	ldr	r2, [pc, #440]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	e00b      	b.n	8003fac <HAL_RCC_OscConfig+0xd4>
 8003f94:	4b6b      	ldr	r3, [pc, #428]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a6a      	ldr	r2, [pc, #424]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	4b68      	ldr	r3, [pc, #416]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a67      	ldr	r2, [pc, #412]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003faa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d013      	beq.n	8003fdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fe fb5e 	bl	8002674 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7fe fb5a 	bl	8002674 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e200      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fce:	4b5d      	ldr	r3, [pc, #372]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0xe4>
 8003fda:	e014      	b.n	8004006 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7fe fb4a 	bl	8002674 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe4:	f7fe fb46 	bl	8002674 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	; 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e1ec      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff6:	4b53      	ldr	r3, [pc, #332]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x10c>
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d063      	beq.n	80040da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004012:	4b4c      	ldr	r3, [pc, #304]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800401e:	4b49      	ldr	r3, [pc, #292]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b08      	cmp	r3, #8
 8004028:	d11c      	bne.n	8004064 <HAL_RCC_OscConfig+0x18c>
 800402a:	4b46      	ldr	r3, [pc, #280]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d116      	bne.n	8004064 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004036:	4b43      	ldr	r3, [pc, #268]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_RCC_OscConfig+0x176>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d001      	beq.n	800404e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e1c0      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404e:	4b3d      	ldr	r3, [pc, #244]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4939      	ldr	r1, [pc, #228]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 800405e:	4313      	orrs	r3, r2
 8004060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004062:	e03a      	b.n	80040da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d020      	beq.n	80040ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800406c:	4b36      	ldr	r3, [pc, #216]	; (8004148 <HAL_RCC_OscConfig+0x270>)
 800406e:	2201      	movs	r2, #1
 8004070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004072:	f7fe faff 	bl	8002674 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800407a:	f7fe fafb 	bl	8002674 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e1a1      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408c:	4b2d      	ldr	r3, [pc, #180]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004098:	4b2a      	ldr	r3, [pc, #168]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4927      	ldr	r1, [pc, #156]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	600b      	str	r3, [r1, #0]
 80040ac:	e015      	b.n	80040da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ae:	4b26      	ldr	r3, [pc, #152]	; (8004148 <HAL_RCC_OscConfig+0x270>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fe fade 	bl	8002674 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040bc:	f7fe fada 	bl	8002674 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e180      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ce:	4b1d      	ldr	r3, [pc, #116]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d03a      	beq.n	800415c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d019      	beq.n	8004122 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ee:	4b17      	ldr	r3, [pc, #92]	; (800414c <HAL_RCC_OscConfig+0x274>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f4:	f7fe fabe 	bl	8002674 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040fc:	f7fe faba 	bl	8002674 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e160      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410e:	4b0d      	ldr	r3, [pc, #52]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0f0      	beq.n	80040fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800411a:	2001      	movs	r0, #1
 800411c:	f000 fad8 	bl	80046d0 <RCC_Delay>
 8004120:	e01c      	b.n	800415c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004122:	4b0a      	ldr	r3, [pc, #40]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004128:	f7fe faa4 	bl	8002674 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800412e:	e00f      	b.n	8004150 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004130:	f7fe faa0 	bl	8002674 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d908      	bls.n	8004150 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e146      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
 8004142:	bf00      	nop
 8004144:	40021000 	.word	0x40021000
 8004148:	42420000 	.word	0x42420000
 800414c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004150:	4b92      	ldr	r3, [pc, #584]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e9      	bne.n	8004130 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80a6 	beq.w	80042b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416e:	4b8b      	ldr	r3, [pc, #556]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10d      	bne.n	8004196 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417a:	4b88      	ldr	r3, [pc, #544]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	4a87      	ldr	r2, [pc, #540]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004184:	61d3      	str	r3, [r2, #28]
 8004186:	4b85      	ldr	r3, [pc, #532]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418e:	60bb      	str	r3, [r7, #8]
 8004190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004192:	2301      	movs	r3, #1
 8004194:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004196:	4b82      	ldr	r3, [pc, #520]	; (80043a0 <HAL_RCC_OscConfig+0x4c8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d118      	bne.n	80041d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a2:	4b7f      	ldr	r3, [pc, #508]	; (80043a0 <HAL_RCC_OscConfig+0x4c8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a7e      	ldr	r2, [pc, #504]	; (80043a0 <HAL_RCC_OscConfig+0x4c8>)
 80041a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ae:	f7fe fa61 	bl	8002674 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b6:	f7fe fa5d 	bl	8002674 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b64      	cmp	r3, #100	; 0x64
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e103      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c8:	4b75      	ldr	r3, [pc, #468]	; (80043a0 <HAL_RCC_OscConfig+0x4c8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d106      	bne.n	80041ea <HAL_RCC_OscConfig+0x312>
 80041dc:	4b6f      	ldr	r3, [pc, #444]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	4a6e      	ldr	r2, [pc, #440]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	6213      	str	r3, [r2, #32]
 80041e8:	e02d      	b.n	8004246 <HAL_RCC_OscConfig+0x36e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10c      	bne.n	800420c <HAL_RCC_OscConfig+0x334>
 80041f2:	4b6a      	ldr	r3, [pc, #424]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	4a69      	ldr	r2, [pc, #420]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80041f8:	f023 0301 	bic.w	r3, r3, #1
 80041fc:	6213      	str	r3, [r2, #32]
 80041fe:	4b67      	ldr	r3, [pc, #412]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	4a66      	ldr	r2, [pc, #408]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004204:	f023 0304 	bic.w	r3, r3, #4
 8004208:	6213      	str	r3, [r2, #32]
 800420a:	e01c      	b.n	8004246 <HAL_RCC_OscConfig+0x36e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	2b05      	cmp	r3, #5
 8004212:	d10c      	bne.n	800422e <HAL_RCC_OscConfig+0x356>
 8004214:	4b61      	ldr	r3, [pc, #388]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	4a60      	ldr	r2, [pc, #384]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800421a:	f043 0304 	orr.w	r3, r3, #4
 800421e:	6213      	str	r3, [r2, #32]
 8004220:	4b5e      	ldr	r3, [pc, #376]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	4a5d      	ldr	r2, [pc, #372]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	6213      	str	r3, [r2, #32]
 800422c:	e00b      	b.n	8004246 <HAL_RCC_OscConfig+0x36e>
 800422e:	4b5b      	ldr	r3, [pc, #364]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	4a5a      	ldr	r2, [pc, #360]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	6213      	str	r3, [r2, #32]
 800423a:	4b58      	ldr	r3, [pc, #352]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	4a57      	ldr	r2, [pc, #348]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004240:	f023 0304 	bic.w	r3, r3, #4
 8004244:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d015      	beq.n	800427a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800424e:	f7fe fa11 	bl	8002674 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004254:	e00a      	b.n	800426c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004256:	f7fe fa0d 	bl	8002674 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	f241 3288 	movw	r2, #5000	; 0x1388
 8004264:	4293      	cmp	r3, r2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e0b1      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426c:	4b4b      	ldr	r3, [pc, #300]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0ee      	beq.n	8004256 <HAL_RCC_OscConfig+0x37e>
 8004278:	e014      	b.n	80042a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800427a:	f7fe f9fb 	bl	8002674 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004280:	e00a      	b.n	8004298 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004282:	f7fe f9f7 	bl	8002674 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004290:	4293      	cmp	r3, r2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e09b      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004298:	4b40      	ldr	r3, [pc, #256]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1ee      	bne.n	8004282 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d105      	bne.n	80042b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042aa:	4b3c      	ldr	r3, [pc, #240]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	4a3b      	ldr	r2, [pc, #236]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80042b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 8087 	beq.w	80043ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042c0:	4b36      	ldr	r3, [pc, #216]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 030c 	and.w	r3, r3, #12
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d061      	beq.n	8004390 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d146      	bne.n	8004362 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d4:	4b33      	ldr	r3, [pc, #204]	; (80043a4 <HAL_RCC_OscConfig+0x4cc>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042da:	f7fe f9cb 	bl	8002674 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e2:	f7fe f9c7 	bl	8002674 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e06d      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042f4:	4b29      	ldr	r3, [pc, #164]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f0      	bne.n	80042e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004308:	d108      	bne.n	800431c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800430a:	4b24      	ldr	r3, [pc, #144]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	4921      	ldr	r1, [pc, #132]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004318:	4313      	orrs	r3, r2
 800431a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800431c:	4b1f      	ldr	r3, [pc, #124]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a19      	ldr	r1, [r3, #32]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	430b      	orrs	r3, r1
 800432e:	491b      	ldr	r1, [pc, #108]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004330:	4313      	orrs	r3, r2
 8004332:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004334:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <HAL_RCC_OscConfig+0x4cc>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433a:	f7fe f99b 	bl	8002674 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004342:	f7fe f997 	bl	8002674 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e03d      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004354:	4b11      	ldr	r3, [pc, #68]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x46a>
 8004360:	e035      	b.n	80043ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004362:	4b10      	ldr	r3, [pc, #64]	; (80043a4 <HAL_RCC_OscConfig+0x4cc>)
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fe f984 	bl	8002674 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004370:	f7fe f980 	bl	8002674 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e026      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004382:	4b06      	ldr	r3, [pc, #24]	; (800439c <HAL_RCC_OscConfig+0x4c4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x498>
 800438e:	e01e      	b.n	80043ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d107      	bne.n	80043a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e019      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
 800439c:	40021000 	.word	0x40021000
 80043a0:	40007000 	.word	0x40007000
 80043a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <HAL_RCC_OscConfig+0x500>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d106      	bne.n	80043ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d001      	beq.n	80043ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40021000 	.word	0x40021000

080043dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0d0      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043f0:	4b6a      	ldr	r3, [pc, #424]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d910      	bls.n	8004420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fe:	4b67      	ldr	r3, [pc, #412]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f023 0207 	bic.w	r2, r3, #7
 8004406:	4965      	ldr	r1, [pc, #404]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	4313      	orrs	r3, r2
 800440c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800440e:	4b63      	ldr	r3, [pc, #396]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d001      	beq.n	8004420 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0b8      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d020      	beq.n	800446e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004438:	4b59      	ldr	r3, [pc, #356]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4a58      	ldr	r2, [pc, #352]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800443e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004442:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004450:	4b53      	ldr	r3, [pc, #332]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	4a52      	ldr	r2, [pc, #328]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004456:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800445a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800445c:	4b50      	ldr	r3, [pc, #320]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	494d      	ldr	r1, [pc, #308]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800446a:	4313      	orrs	r3, r2
 800446c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d040      	beq.n	80044fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d107      	bne.n	8004492 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004482:	4b47      	ldr	r3, [pc, #284]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d115      	bne.n	80044ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e07f      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d107      	bne.n	80044aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449a:	4b41      	ldr	r3, [pc, #260]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d109      	bne.n	80044ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e073      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044aa:	4b3d      	ldr	r3, [pc, #244]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e06b      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ba:	4b39      	ldr	r3, [pc, #228]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f023 0203 	bic.w	r2, r3, #3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	4936      	ldr	r1, [pc, #216]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044cc:	f7fe f8d2 	bl	8002674 <HAL_GetTick>
 80044d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d4:	f7fe f8ce 	bl	8002674 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e053      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ea:	4b2d      	ldr	r3, [pc, #180]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 020c 	and.w	r2, r3, #12
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d1eb      	bne.n	80044d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044fc:	4b27      	ldr	r3, [pc, #156]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d210      	bcs.n	800452c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450a:	4b24      	ldr	r3, [pc, #144]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 0207 	bic.w	r2, r3, #7
 8004512:	4922      	ldr	r1, [pc, #136]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	4313      	orrs	r3, r2
 8004518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800451a:	4b20      	ldr	r3, [pc, #128]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d001      	beq.n	800452c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e032      	b.n	8004592 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004538:	4b19      	ldr	r3, [pc, #100]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4916      	ldr	r1, [pc, #88]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004546:	4313      	orrs	r3, r2
 8004548:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d009      	beq.n	800456a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004556:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	490e      	ldr	r1, [pc, #56]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004566:	4313      	orrs	r3, r2
 8004568:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800456a:	f000 f821 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 800456e:	4602      	mov	r2, r0
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	091b      	lsrs	r3, r3, #4
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	490a      	ldr	r1, [pc, #40]	; (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 800457c:	5ccb      	ldrb	r3, [r1, r3]
 800457e:	fa22 f303 	lsr.w	r3, r2, r3
 8004582:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004586:	4b09      	ldr	r3, [pc, #36]	; (80045ac <HAL_RCC_ClockConfig+0x1d0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fe f830 	bl	80025f0 <HAL_InitTick>

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40022000 	.word	0x40022000
 80045a0:	40021000 	.word	0x40021000
 80045a4:	08005c58 	.word	0x08005c58
 80045a8:	20000204 	.word	0x20000204
 80045ac:	20000208 	.word	0x20000208

080045b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b0:	b490      	push	{r4, r7}
 80045b2:	b08a      	sub	sp, #40	; 0x28
 80045b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80045b6:	4b29      	ldr	r3, [pc, #164]	; (800465c <HAL_RCC_GetSysClockFreq+0xac>)
 80045b8:	1d3c      	adds	r4, r7, #4
 80045ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80045c0:	f240 2301 	movw	r3, #513	; 0x201
 80045c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	61fb      	str	r3, [r7, #28]
 80045ca:	2300      	movs	r3, #0
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	2300      	movs	r3, #0
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045da:	4b21      	ldr	r3, [pc, #132]	; (8004660 <HAL_RCC_GetSysClockFreq+0xb0>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f003 030c 	and.w	r3, r3, #12
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d002      	beq.n	80045f0 <HAL_RCC_GetSysClockFreq+0x40>
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d003      	beq.n	80045f6 <HAL_RCC_GetSysClockFreq+0x46>
 80045ee:	e02b      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045f0:	4b1c      	ldr	r3, [pc, #112]	; (8004664 <HAL_RCC_GetSysClockFreq+0xb4>)
 80045f2:	623b      	str	r3, [r7, #32]
      break;
 80045f4:	e02b      	b.n	800464e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	0c9b      	lsrs	r3, r3, #18
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	3328      	adds	r3, #40	; 0x28
 8004600:	443b      	add	r3, r7
 8004602:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004606:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d012      	beq.n	8004638 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004612:	4b13      	ldr	r3, [pc, #76]	; (8004660 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	0c5b      	lsrs	r3, r3, #17
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	3328      	adds	r3, #40	; 0x28
 800461e:	443b      	add	r3, r7
 8004620:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004624:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	4a0e      	ldr	r2, [pc, #56]	; (8004664 <HAL_RCC_GetSysClockFreq+0xb4>)
 800462a:	fb03 f202 	mul.w	r2, r3, r2
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	fbb2 f3f3 	udiv	r3, r2, r3
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
 8004636:	e004      	b.n	8004642 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	4a0b      	ldr	r2, [pc, #44]	; (8004668 <HAL_RCC_GetSysClockFreq+0xb8>)
 800463c:	fb02 f303 	mul.w	r3, r2, r3
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	623b      	str	r3, [r7, #32]
      break;
 8004646:	e002      	b.n	800464e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004648:	4b06      	ldr	r3, [pc, #24]	; (8004664 <HAL_RCC_GetSysClockFreq+0xb4>)
 800464a:	623b      	str	r3, [r7, #32]
      break;
 800464c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800464e:	6a3b      	ldr	r3, [r7, #32]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3728      	adds	r7, #40	; 0x28
 8004654:	46bd      	mov	sp, r7
 8004656:	bc90      	pop	{r4, r7}
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	08005b90 	.word	0x08005b90
 8004660:	40021000 	.word	0x40021000
 8004664:	007a1200 	.word	0x007a1200
 8004668:	003d0900 	.word	0x003d0900

0800466c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004670:	4b02      	ldr	r3, [pc, #8]	; (800467c <HAL_RCC_GetHCLKFreq+0x10>)
 8004672:	681b      	ldr	r3, [r3, #0]
}
 8004674:	4618      	mov	r0, r3
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr
 800467c:	20000204 	.word	0x20000204

08004680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004684:	f7ff fff2 	bl	800466c <HAL_RCC_GetHCLKFreq>
 8004688:	4602      	mov	r2, r0
 800468a:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	0a1b      	lsrs	r3, r3, #8
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	4903      	ldr	r1, [pc, #12]	; (80046a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004696:	5ccb      	ldrb	r3, [r1, r3]
 8004698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800469c:	4618      	mov	r0, r3
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40021000 	.word	0x40021000
 80046a4:	08005c68 	.word	0x08005c68

080046a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046ac:	f7ff ffde 	bl	800466c <HAL_RCC_GetHCLKFreq>
 80046b0:	4602      	mov	r2, r0
 80046b2:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	0adb      	lsrs	r3, r3, #11
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	4903      	ldr	r1, [pc, #12]	; (80046cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80046be:	5ccb      	ldrb	r3, [r1, r3]
 80046c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40021000 	.word	0x40021000
 80046cc:	08005c68 	.word	0x08005c68

080046d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <RCC_Delay+0x34>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a0a      	ldr	r2, [pc, #40]	; (8004708 <RCC_Delay+0x38>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	0a5b      	lsrs	r3, r3, #9
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	fb02 f303 	mul.w	r3, r2, r3
 80046ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046ec:	bf00      	nop
  }
  while (Delay --);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	1e5a      	subs	r2, r3, #1
 80046f2:	60fa      	str	r2, [r7, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1f9      	bne.n	80046ec <RCC_Delay+0x1c>
}
 80046f8:	bf00      	nop
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr
 8004704:	20000204 	.word	0x20000204
 8004708:	10624dd3 	.word	0x10624dd3

0800470c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e03f      	b.n	800479e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fd fd7c 	bl	8002230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2224      	movs	r2, #36	; 0x24
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800474e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 fc85 	bl	8005060 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004774:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004784:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b08a      	sub	sp, #40	; 0x28
 80047aa:	af02      	add	r7, sp, #8
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	603b      	str	r3, [r7, #0]
 80047b2:	4613      	mov	r3, r2
 80047b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d17c      	bne.n	80048c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <HAL_UART_Transmit+0x2c>
 80047cc:	88fb      	ldrh	r3, [r7, #6]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e075      	b.n	80048c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_UART_Transmit+0x3e>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e06e      	b.n	80048c2 <HAL_UART_Transmit+0x11c>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2221      	movs	r2, #33	; 0x21
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047fa:	f7fd ff3b 	bl	8002674 <HAL_GetTick>
 80047fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	88fa      	ldrh	r2, [r7, #6]
 8004804:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	88fa      	ldrh	r2, [r7, #6]
 800480a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004814:	d108      	bne.n	8004828 <HAL_UART_Transmit+0x82>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d104      	bne.n	8004828 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	e003      	b.n	8004830 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800482c:	2300      	movs	r3, #0
 800482e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004838:	e02a      	b.n	8004890 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2200      	movs	r2, #0
 8004842:	2180      	movs	r1, #128	; 0x80
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 fa38 	bl	8004cba <UART_WaitOnFlagUntilTimeout>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e036      	b.n	80048c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10b      	bne.n	8004872 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004868:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	3302      	adds	r3, #2
 800486e:	61bb      	str	r3, [r7, #24]
 8004870:	e007      	b.n	8004882 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	781a      	ldrb	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	3301      	adds	r3, #1
 8004880:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1cf      	bne.n	800483a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2200      	movs	r2, #0
 80048a2:	2140      	movs	r1, #64	; 0x40
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 fa08 	bl	8004cba <UART_WaitOnFlagUntilTimeout>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e006      	b.n	80048c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	e000      	b.n	80048c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048c0:	2302      	movs	r3, #2
  }
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3720      	adds	r7, #32
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	4613      	mov	r3, r2
 80048d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b20      	cmp	r3, #32
 80048e2:	d11d      	bne.n	8004920 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <HAL_UART_Receive_IT+0x26>
 80048ea:	88fb      	ldrh	r3, [r7, #6]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e016      	b.n	8004922 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_UART_Receive_IT+0x38>
 80048fe:	2302      	movs	r3, #2
 8004900:	e00f      	b.n	8004922 <HAL_UART_Receive_IT+0x58>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004910:	88fb      	ldrh	r3, [r7, #6]
 8004912:	461a      	mov	r2, r3
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 fa19 	bl	8004d4e <UART_Start_Receive_IT>
 800491c:	4603      	mov	r3, r0
 800491e:	e000      	b.n	8004922 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004920:	2302      	movs	r3, #2
  }
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
	...

0800492c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	; 0x28
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800494c:	2300      	movs	r3, #0
 800494e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004950:	2300      	movs	r3, #0
 8004952:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	f003 030f 	and.w	r3, r3, #15
 800495a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10d      	bne.n	800497e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	f003 0320 	and.w	r3, r3, #32
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <HAL_UART_IRQHandler+0x52>
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fac9 	bl	8004f0e <UART_Receive_IT>
      return;
 800497c:	e17b      	b.n	8004c76 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 80b1 	beq.w	8004ae8 <HAL_UART_IRQHandler+0x1bc>
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d105      	bne.n	800499c <HAL_UART_IRQHandler+0x70>
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 80a6 	beq.w	8004ae8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <HAL_UART_IRQHandler+0x90>
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	f043 0201 	orr.w	r2, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <HAL_UART_IRQHandler+0xb0>
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	f043 0202 	orr.w	r2, r3, #2
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <HAL_UART_IRQHandler+0xd0>
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	f043 0204 	orr.w	r2, r3, #4
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00f      	beq.n	8004a26 <HAL_UART_IRQHandler+0xfa>
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d104      	bne.n	8004a1a <HAL_UART_IRQHandler+0xee>
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f043 0208 	orr.w	r2, r3, #8
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 811e 	beq.w	8004c6c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d007      	beq.n	8004a4a <HAL_UART_IRQHandler+0x11e>
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fa62 	bl	8004f0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	bf14      	ite	ne
 8004a58:	2301      	movne	r3, #1
 8004a5a:	2300      	moveq	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d102      	bne.n	8004a72 <HAL_UART_IRQHandler+0x146>
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d031      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f9a4 	bl	8004dc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d023      	beq.n	8004ace <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695a      	ldr	r2, [r3, #20]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a94:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d013      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	4a76      	ldr	r2, [pc, #472]	; (8004c7c <HAL_UART_IRQHandler+0x350>)
 8004aa4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fd ff58 	bl	8002960 <HAL_DMA_Abort_IT>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d016      	beq.n	8004ae4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac4:	e00e      	b.n	8004ae4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f8e3 	bl	8004c92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004acc:	e00a      	b.n	8004ae4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f8df 	bl	8004c92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad4:	e006      	b.n	8004ae4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f8db 	bl	8004c92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004ae2:	e0c3      	b.n	8004c6c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae4:	bf00      	nop
    return;
 8004ae6:	e0c1      	b.n	8004c6c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	f040 80a1 	bne.w	8004c34 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	f003 0310 	and.w	r3, r3, #16
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 809b 	beq.w	8004c34 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 8095 	beq.w	8004c34 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d04e      	beq.n	8004bcc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004b38:	8a3b      	ldrh	r3, [r7, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 8098 	beq.w	8004c70 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b44:	8a3a      	ldrh	r2, [r7, #16]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	f080 8092 	bcs.w	8004c70 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	8a3a      	ldrh	r2, [r7, #16]
 8004b50:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d02b      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b6a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695a      	ldr	r2, [r3, #20]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0201 	bic.w	r2, r2, #1
 8004b7a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695a      	ldr	r2, [r3, #20]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b8a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68da      	ldr	r2, [r3, #12]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0210 	bic.w	r2, r2, #16
 8004ba8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fd fe9b 	bl	80028ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f86d 	bl	8004ca4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004bca:	e051      	b.n	8004c70 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d047      	beq.n	8004c74 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004be4:	8a7b      	ldrh	r3, [r7, #18]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d044      	beq.n	8004c74 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bf8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695a      	ldr	r2, [r3, #20]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0201 	bic.w	r2, r2, #1
 8004c08:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0210 	bic.w	r2, r2, #16
 8004c26:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c28:	8a7b      	ldrh	r3, [r7, #18]
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f839 	bl	8004ca4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004c32:	e01f      	b.n	8004c74 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d008      	beq.n	8004c50 <HAL_UART_IRQHandler+0x324>
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f8f9 	bl	8004e40 <UART_Transmit_IT>
    return;
 8004c4e:	e012      	b.n	8004c76 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00d      	beq.n	8004c76 <HAL_UART_IRQHandler+0x34a>
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d008      	beq.n	8004c76 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f93a 	bl	8004ede <UART_EndTransmit_IT>
    return;
 8004c6a:	e004      	b.n	8004c76 <HAL_UART_IRQHandler+0x34a>
    return;
 8004c6c:	bf00      	nop
 8004c6e:	e002      	b.n	8004c76 <HAL_UART_IRQHandler+0x34a>
      return;
 8004c70:	bf00      	nop
 8004c72:	e000      	b.n	8004c76 <HAL_UART_IRQHandler+0x34a>
      return;
 8004c74:	bf00      	nop
  }
}
 8004c76:	3728      	adds	r7, #40	; 0x28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	08004e19 	.word	0x08004e19

08004c80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr

08004c92 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bc80      	pop	{r7}
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bc80      	pop	{r7}
 8004cb8:	4770      	bx	lr

08004cba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	603b      	str	r3, [r7, #0]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cca:	e02c      	b.n	8004d26 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd2:	d028      	beq.n	8004d26 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d007      	beq.n	8004cea <UART_WaitOnFlagUntilTimeout+0x30>
 8004cda:	f7fd fccb 	bl	8002674 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d21d      	bcs.n	8004d26 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cf8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695a      	ldr	r2, [r3, #20]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0201 	bic.w	r2, r2, #1
 8004d08:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e00f      	b.n	8004d46 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	bf0c      	ite	eq
 8004d36:	2301      	moveq	r3, #1
 8004d38:	2300      	movne	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d0c3      	beq.n	8004ccc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b085      	sub	sp, #20
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	88fa      	ldrh	r2, [r7, #6]
 8004d66:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	88fa      	ldrh	r2, [r7, #6]
 8004d6c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2222      	movs	r2, #34	; 0x22
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d92:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0220 	orr.w	r2, r2, #32
 8004db2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr

08004dc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dd6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695a      	ldr	r2, [r3, #20]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0201 	bic.w	r2, r2, #1
 8004de6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d107      	bne.n	8004e00 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0210 	bic.w	r2, r2, #16
 8004dfe:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr

08004e18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f7ff ff2d 	bl	8004c92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e38:	bf00      	nop
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b21      	cmp	r3, #33	; 0x21
 8004e52:	d13e      	bne.n	8004ed2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5c:	d114      	bne.n	8004e88 <UART_Transmit_IT+0x48>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d110      	bne.n	8004e88 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	1c9a      	adds	r2, r3, #2
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	621a      	str	r2, [r3, #32]
 8004e86:	e008      	b.n	8004e9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	1c59      	adds	r1, r3, #1
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6211      	str	r1, [r2, #32]
 8004e92:	781a      	ldrb	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10f      	bne.n	8004ece <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ebc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ecc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e000      	b.n	8004ed4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ed2:	2302      	movs	r3, #2
  }
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr

08004ede <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff febe 	bl	8004c80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b086      	sub	sp, #24
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b22      	cmp	r3, #34	; 0x22
 8004f20:	f040 8099 	bne.w	8005056 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2c:	d117      	bne.n	8004f5e <UART_Receive_IT+0x50>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d113      	bne.n	8004f5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f36:	2300      	movs	r3, #0
 8004f38:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f56:	1c9a      	adds	r2, r3, #2
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	629a      	str	r2, [r3, #40]	; 0x28
 8004f5c:	e026      	b.n	8004fac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f62:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f70:	d007      	beq.n	8004f82 <UART_Receive_IT+0x74>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10a      	bne.n	8004f90 <UART_Receive_IT+0x82>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	e008      	b.n	8004fa2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d148      	bne.n	8005052 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0220 	bic.w	r2, r2, #32
 8004fce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695a      	ldr	r2, [r3, #20]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0201 	bic.w	r2, r2, #1
 8004fee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d123      	bne.n	8005048 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0210 	bic.w	r2, r2, #16
 8005014:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0310 	and.w	r3, r3, #16
 8005020:	2b10      	cmp	r3, #16
 8005022:	d10a      	bne.n	800503a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800503e:	4619      	mov	r1, r3
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7ff fe2f 	bl	8004ca4 <HAL_UARTEx_RxEventCallback>
 8005046:	e002      	b.n	800504e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7fb fba9 	bl	80007a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	e002      	b.n	8005058 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	e000      	b.n	8005058 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005056:	2302      	movs	r3, #2
  }
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800509a:	f023 030c 	bic.w	r3, r3, #12
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6812      	ldr	r2, [r2, #0]
 80050a2:	68b9      	ldr	r1, [r7, #8]
 80050a4:	430b      	orrs	r3, r1
 80050a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699a      	ldr	r2, [r3, #24]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a2c      	ldr	r2, [pc, #176]	; (8005174 <UART_SetConfig+0x114>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d103      	bne.n	80050d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80050c8:	f7ff faee 	bl	80046a8 <HAL_RCC_GetPCLK2Freq>
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	e002      	b.n	80050d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80050d0:	f7ff fad6 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 80050d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	009a      	lsls	r2, r3, #2
 80050e0:	441a      	add	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ec:	4a22      	ldr	r2, [pc, #136]	; (8005178 <UART_SetConfig+0x118>)
 80050ee:	fba2 2303 	umull	r2, r3, r2, r3
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	0119      	lsls	r1, r3, #4
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	009a      	lsls	r2, r3, #2
 8005100:	441a      	add	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	fbb2 f2f3 	udiv	r2, r2, r3
 800510c:	4b1a      	ldr	r3, [pc, #104]	; (8005178 <UART_SetConfig+0x118>)
 800510e:	fba3 0302 	umull	r0, r3, r3, r2
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	2064      	movs	r0, #100	; 0x64
 8005116:	fb00 f303 	mul.w	r3, r0, r3
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	3332      	adds	r3, #50	; 0x32
 8005120:	4a15      	ldr	r2, [pc, #84]	; (8005178 <UART_SetConfig+0x118>)
 8005122:	fba2 2303 	umull	r2, r3, r2, r3
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800512c:	4419      	add	r1, r3
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4613      	mov	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	009a      	lsls	r2, r3, #2
 8005138:	441a      	add	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	fbb2 f2f3 	udiv	r2, r2, r3
 8005144:	4b0c      	ldr	r3, [pc, #48]	; (8005178 <UART_SetConfig+0x118>)
 8005146:	fba3 0302 	umull	r0, r3, r3, r2
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	2064      	movs	r0, #100	; 0x64
 800514e:	fb00 f303 	mul.w	r3, r0, r3
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	3332      	adds	r3, #50	; 0x32
 8005158:	4a07      	ldr	r2, [pc, #28]	; (8005178 <UART_SetConfig+0x118>)
 800515a:	fba2 2303 	umull	r2, r3, r2, r3
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	f003 020f 	and.w	r2, r3, #15
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	440a      	add	r2, r1
 800516a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800516c:	bf00      	nop
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40013800 	.word	0x40013800
 8005178:	51eb851f 	.word	0x51eb851f

0800517c <__errno>:
 800517c:	4b01      	ldr	r3, [pc, #4]	; (8005184 <__errno+0x8>)
 800517e:	6818      	ldr	r0, [r3, #0]
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	20000210 	.word	0x20000210

08005188 <__libc_init_array>:
 8005188:	b570      	push	{r4, r5, r6, lr}
 800518a:	2600      	movs	r6, #0
 800518c:	4d0c      	ldr	r5, [pc, #48]	; (80051c0 <__libc_init_array+0x38>)
 800518e:	4c0d      	ldr	r4, [pc, #52]	; (80051c4 <__libc_init_array+0x3c>)
 8005190:	1b64      	subs	r4, r4, r5
 8005192:	10a4      	asrs	r4, r4, #2
 8005194:	42a6      	cmp	r6, r4
 8005196:	d109      	bne.n	80051ac <__libc_init_array+0x24>
 8005198:	f000 fcb6 	bl	8005b08 <_init>
 800519c:	2600      	movs	r6, #0
 800519e:	4d0a      	ldr	r5, [pc, #40]	; (80051c8 <__libc_init_array+0x40>)
 80051a0:	4c0a      	ldr	r4, [pc, #40]	; (80051cc <__libc_init_array+0x44>)
 80051a2:	1b64      	subs	r4, r4, r5
 80051a4:	10a4      	asrs	r4, r4, #2
 80051a6:	42a6      	cmp	r6, r4
 80051a8:	d105      	bne.n	80051b6 <__libc_init_array+0x2e>
 80051aa:	bd70      	pop	{r4, r5, r6, pc}
 80051ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80051b0:	4798      	blx	r3
 80051b2:	3601      	adds	r6, #1
 80051b4:	e7ee      	b.n	8005194 <__libc_init_array+0xc>
 80051b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ba:	4798      	blx	r3
 80051bc:	3601      	adds	r6, #1
 80051be:	e7f2      	b.n	80051a6 <__libc_init_array+0x1e>
 80051c0:	08005ca4 	.word	0x08005ca4
 80051c4:	08005ca4 	.word	0x08005ca4
 80051c8:	08005ca4 	.word	0x08005ca4
 80051cc:	08005ca8 	.word	0x08005ca8

080051d0 <memset>:
 80051d0:	4603      	mov	r3, r0
 80051d2:	4402      	add	r2, r0
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d100      	bne.n	80051da <memset+0xa>
 80051d8:	4770      	bx	lr
 80051da:	f803 1b01 	strb.w	r1, [r3], #1
 80051de:	e7f9      	b.n	80051d4 <memset+0x4>

080051e0 <_vsniprintf_r>:
 80051e0:	b530      	push	{r4, r5, lr}
 80051e2:	4614      	mov	r4, r2
 80051e4:	2c00      	cmp	r4, #0
 80051e6:	4605      	mov	r5, r0
 80051e8:	461a      	mov	r2, r3
 80051ea:	b09b      	sub	sp, #108	; 0x6c
 80051ec:	da05      	bge.n	80051fa <_vsniprintf_r+0x1a>
 80051ee:	238b      	movs	r3, #139	; 0x8b
 80051f0:	6003      	str	r3, [r0, #0]
 80051f2:	f04f 30ff 	mov.w	r0, #4294967295
 80051f6:	b01b      	add	sp, #108	; 0x6c
 80051f8:	bd30      	pop	{r4, r5, pc}
 80051fa:	f44f 7302 	mov.w	r3, #520	; 0x208
 80051fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005202:	bf0c      	ite	eq
 8005204:	4623      	moveq	r3, r4
 8005206:	f104 33ff 	addne.w	r3, r4, #4294967295
 800520a:	9302      	str	r3, [sp, #8]
 800520c:	9305      	str	r3, [sp, #20]
 800520e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005212:	9100      	str	r1, [sp, #0]
 8005214:	9104      	str	r1, [sp, #16]
 8005216:	f8ad 300e 	strh.w	r3, [sp, #14]
 800521a:	4669      	mov	r1, sp
 800521c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800521e:	f000 f875 	bl	800530c <_svfiprintf_r>
 8005222:	1c43      	adds	r3, r0, #1
 8005224:	bfbc      	itt	lt
 8005226:	238b      	movlt	r3, #139	; 0x8b
 8005228:	602b      	strlt	r3, [r5, #0]
 800522a:	2c00      	cmp	r4, #0
 800522c:	d0e3      	beq.n	80051f6 <_vsniprintf_r+0x16>
 800522e:	2200      	movs	r2, #0
 8005230:	9b00      	ldr	r3, [sp, #0]
 8005232:	701a      	strb	r2, [r3, #0]
 8005234:	e7df      	b.n	80051f6 <_vsniprintf_r+0x16>
	...

08005238 <vsniprintf>:
 8005238:	b507      	push	{r0, r1, r2, lr}
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	4613      	mov	r3, r2
 800523e:	460a      	mov	r2, r1
 8005240:	4601      	mov	r1, r0
 8005242:	4803      	ldr	r0, [pc, #12]	; (8005250 <vsniprintf+0x18>)
 8005244:	6800      	ldr	r0, [r0, #0]
 8005246:	f7ff ffcb 	bl	80051e0 <_vsniprintf_r>
 800524a:	b003      	add	sp, #12
 800524c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005250:	20000210 	.word	0x20000210

08005254 <__ssputs_r>:
 8005254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005258:	688e      	ldr	r6, [r1, #8]
 800525a:	4682      	mov	sl, r0
 800525c:	429e      	cmp	r6, r3
 800525e:	460c      	mov	r4, r1
 8005260:	4690      	mov	r8, r2
 8005262:	461f      	mov	r7, r3
 8005264:	d838      	bhi.n	80052d8 <__ssputs_r+0x84>
 8005266:	898a      	ldrh	r2, [r1, #12]
 8005268:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800526c:	d032      	beq.n	80052d4 <__ssputs_r+0x80>
 800526e:	6825      	ldr	r5, [r4, #0]
 8005270:	6909      	ldr	r1, [r1, #16]
 8005272:	3301      	adds	r3, #1
 8005274:	eba5 0901 	sub.w	r9, r5, r1
 8005278:	6965      	ldr	r5, [r4, #20]
 800527a:	444b      	add	r3, r9
 800527c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005280:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005284:	106d      	asrs	r5, r5, #1
 8005286:	429d      	cmp	r5, r3
 8005288:	bf38      	it	cc
 800528a:	461d      	movcc	r5, r3
 800528c:	0553      	lsls	r3, r2, #21
 800528e:	d531      	bpl.n	80052f4 <__ssputs_r+0xa0>
 8005290:	4629      	mov	r1, r5
 8005292:	f000 fb6f 	bl	8005974 <_malloc_r>
 8005296:	4606      	mov	r6, r0
 8005298:	b950      	cbnz	r0, 80052b0 <__ssputs_r+0x5c>
 800529a:	230c      	movs	r3, #12
 800529c:	f04f 30ff 	mov.w	r0, #4294967295
 80052a0:	f8ca 3000 	str.w	r3, [sl]
 80052a4:	89a3      	ldrh	r3, [r4, #12]
 80052a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052aa:	81a3      	strh	r3, [r4, #12]
 80052ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b0:	464a      	mov	r2, r9
 80052b2:	6921      	ldr	r1, [r4, #16]
 80052b4:	f000 face 	bl	8005854 <memcpy>
 80052b8:	89a3      	ldrh	r3, [r4, #12]
 80052ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c2:	81a3      	strh	r3, [r4, #12]
 80052c4:	6126      	str	r6, [r4, #16]
 80052c6:	444e      	add	r6, r9
 80052c8:	6026      	str	r6, [r4, #0]
 80052ca:	463e      	mov	r6, r7
 80052cc:	6165      	str	r5, [r4, #20]
 80052ce:	eba5 0509 	sub.w	r5, r5, r9
 80052d2:	60a5      	str	r5, [r4, #8]
 80052d4:	42be      	cmp	r6, r7
 80052d6:	d900      	bls.n	80052da <__ssputs_r+0x86>
 80052d8:	463e      	mov	r6, r7
 80052da:	4632      	mov	r2, r6
 80052dc:	4641      	mov	r1, r8
 80052de:	6820      	ldr	r0, [r4, #0]
 80052e0:	f000 fac6 	bl	8005870 <memmove>
 80052e4:	68a3      	ldr	r3, [r4, #8]
 80052e6:	2000      	movs	r0, #0
 80052e8:	1b9b      	subs	r3, r3, r6
 80052ea:	60a3      	str	r3, [r4, #8]
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	4433      	add	r3, r6
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	e7db      	b.n	80052ac <__ssputs_r+0x58>
 80052f4:	462a      	mov	r2, r5
 80052f6:	f000 fbb1 	bl	8005a5c <_realloc_r>
 80052fa:	4606      	mov	r6, r0
 80052fc:	2800      	cmp	r0, #0
 80052fe:	d1e1      	bne.n	80052c4 <__ssputs_r+0x70>
 8005300:	4650      	mov	r0, sl
 8005302:	6921      	ldr	r1, [r4, #16]
 8005304:	f000 face 	bl	80058a4 <_free_r>
 8005308:	e7c7      	b.n	800529a <__ssputs_r+0x46>
	...

0800530c <_svfiprintf_r>:
 800530c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005310:	4698      	mov	r8, r3
 8005312:	898b      	ldrh	r3, [r1, #12]
 8005314:	4607      	mov	r7, r0
 8005316:	061b      	lsls	r3, r3, #24
 8005318:	460d      	mov	r5, r1
 800531a:	4614      	mov	r4, r2
 800531c:	b09d      	sub	sp, #116	; 0x74
 800531e:	d50e      	bpl.n	800533e <_svfiprintf_r+0x32>
 8005320:	690b      	ldr	r3, [r1, #16]
 8005322:	b963      	cbnz	r3, 800533e <_svfiprintf_r+0x32>
 8005324:	2140      	movs	r1, #64	; 0x40
 8005326:	f000 fb25 	bl	8005974 <_malloc_r>
 800532a:	6028      	str	r0, [r5, #0]
 800532c:	6128      	str	r0, [r5, #16]
 800532e:	b920      	cbnz	r0, 800533a <_svfiprintf_r+0x2e>
 8005330:	230c      	movs	r3, #12
 8005332:	603b      	str	r3, [r7, #0]
 8005334:	f04f 30ff 	mov.w	r0, #4294967295
 8005338:	e0d1      	b.n	80054de <_svfiprintf_r+0x1d2>
 800533a:	2340      	movs	r3, #64	; 0x40
 800533c:	616b      	str	r3, [r5, #20]
 800533e:	2300      	movs	r3, #0
 8005340:	9309      	str	r3, [sp, #36]	; 0x24
 8005342:	2320      	movs	r3, #32
 8005344:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005348:	2330      	movs	r3, #48	; 0x30
 800534a:	f04f 0901 	mov.w	r9, #1
 800534e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005352:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80054f8 <_svfiprintf_r+0x1ec>
 8005356:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800535a:	4623      	mov	r3, r4
 800535c:	469a      	mov	sl, r3
 800535e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005362:	b10a      	cbz	r2, 8005368 <_svfiprintf_r+0x5c>
 8005364:	2a25      	cmp	r2, #37	; 0x25
 8005366:	d1f9      	bne.n	800535c <_svfiprintf_r+0x50>
 8005368:	ebba 0b04 	subs.w	fp, sl, r4
 800536c:	d00b      	beq.n	8005386 <_svfiprintf_r+0x7a>
 800536e:	465b      	mov	r3, fp
 8005370:	4622      	mov	r2, r4
 8005372:	4629      	mov	r1, r5
 8005374:	4638      	mov	r0, r7
 8005376:	f7ff ff6d 	bl	8005254 <__ssputs_r>
 800537a:	3001      	adds	r0, #1
 800537c:	f000 80aa 	beq.w	80054d4 <_svfiprintf_r+0x1c8>
 8005380:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005382:	445a      	add	r2, fp
 8005384:	9209      	str	r2, [sp, #36]	; 0x24
 8005386:	f89a 3000 	ldrb.w	r3, [sl]
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 80a2 	beq.w	80054d4 <_svfiprintf_r+0x1c8>
 8005390:	2300      	movs	r3, #0
 8005392:	f04f 32ff 	mov.w	r2, #4294967295
 8005396:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800539a:	f10a 0a01 	add.w	sl, sl, #1
 800539e:	9304      	str	r3, [sp, #16]
 80053a0:	9307      	str	r3, [sp, #28]
 80053a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053a6:	931a      	str	r3, [sp, #104]	; 0x68
 80053a8:	4654      	mov	r4, sl
 80053aa:	2205      	movs	r2, #5
 80053ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053b0:	4851      	ldr	r0, [pc, #324]	; (80054f8 <_svfiprintf_r+0x1ec>)
 80053b2:	f000 fa41 	bl	8005838 <memchr>
 80053b6:	9a04      	ldr	r2, [sp, #16]
 80053b8:	b9d8      	cbnz	r0, 80053f2 <_svfiprintf_r+0xe6>
 80053ba:	06d0      	lsls	r0, r2, #27
 80053bc:	bf44      	itt	mi
 80053be:	2320      	movmi	r3, #32
 80053c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053c4:	0711      	lsls	r1, r2, #28
 80053c6:	bf44      	itt	mi
 80053c8:	232b      	movmi	r3, #43	; 0x2b
 80053ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053ce:	f89a 3000 	ldrb.w	r3, [sl]
 80053d2:	2b2a      	cmp	r3, #42	; 0x2a
 80053d4:	d015      	beq.n	8005402 <_svfiprintf_r+0xf6>
 80053d6:	4654      	mov	r4, sl
 80053d8:	2000      	movs	r0, #0
 80053da:	f04f 0c0a 	mov.w	ip, #10
 80053de:	9a07      	ldr	r2, [sp, #28]
 80053e0:	4621      	mov	r1, r4
 80053e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053e6:	3b30      	subs	r3, #48	; 0x30
 80053e8:	2b09      	cmp	r3, #9
 80053ea:	d94e      	bls.n	800548a <_svfiprintf_r+0x17e>
 80053ec:	b1b0      	cbz	r0, 800541c <_svfiprintf_r+0x110>
 80053ee:	9207      	str	r2, [sp, #28]
 80053f0:	e014      	b.n	800541c <_svfiprintf_r+0x110>
 80053f2:	eba0 0308 	sub.w	r3, r0, r8
 80053f6:	fa09 f303 	lsl.w	r3, r9, r3
 80053fa:	4313      	orrs	r3, r2
 80053fc:	46a2      	mov	sl, r4
 80053fe:	9304      	str	r3, [sp, #16]
 8005400:	e7d2      	b.n	80053a8 <_svfiprintf_r+0x9c>
 8005402:	9b03      	ldr	r3, [sp, #12]
 8005404:	1d19      	adds	r1, r3, #4
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	9103      	str	r1, [sp, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	bfbb      	ittet	lt
 800540e:	425b      	neglt	r3, r3
 8005410:	f042 0202 	orrlt.w	r2, r2, #2
 8005414:	9307      	strge	r3, [sp, #28]
 8005416:	9307      	strlt	r3, [sp, #28]
 8005418:	bfb8      	it	lt
 800541a:	9204      	strlt	r2, [sp, #16]
 800541c:	7823      	ldrb	r3, [r4, #0]
 800541e:	2b2e      	cmp	r3, #46	; 0x2e
 8005420:	d10c      	bne.n	800543c <_svfiprintf_r+0x130>
 8005422:	7863      	ldrb	r3, [r4, #1]
 8005424:	2b2a      	cmp	r3, #42	; 0x2a
 8005426:	d135      	bne.n	8005494 <_svfiprintf_r+0x188>
 8005428:	9b03      	ldr	r3, [sp, #12]
 800542a:	3402      	adds	r4, #2
 800542c:	1d1a      	adds	r2, r3, #4
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	9203      	str	r2, [sp, #12]
 8005432:	2b00      	cmp	r3, #0
 8005434:	bfb8      	it	lt
 8005436:	f04f 33ff 	movlt.w	r3, #4294967295
 800543a:	9305      	str	r3, [sp, #20]
 800543c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80054fc <_svfiprintf_r+0x1f0>
 8005440:	2203      	movs	r2, #3
 8005442:	4650      	mov	r0, sl
 8005444:	7821      	ldrb	r1, [r4, #0]
 8005446:	f000 f9f7 	bl	8005838 <memchr>
 800544a:	b140      	cbz	r0, 800545e <_svfiprintf_r+0x152>
 800544c:	2340      	movs	r3, #64	; 0x40
 800544e:	eba0 000a 	sub.w	r0, r0, sl
 8005452:	fa03 f000 	lsl.w	r0, r3, r0
 8005456:	9b04      	ldr	r3, [sp, #16]
 8005458:	3401      	adds	r4, #1
 800545a:	4303      	orrs	r3, r0
 800545c:	9304      	str	r3, [sp, #16]
 800545e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005462:	2206      	movs	r2, #6
 8005464:	4826      	ldr	r0, [pc, #152]	; (8005500 <_svfiprintf_r+0x1f4>)
 8005466:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800546a:	f000 f9e5 	bl	8005838 <memchr>
 800546e:	2800      	cmp	r0, #0
 8005470:	d038      	beq.n	80054e4 <_svfiprintf_r+0x1d8>
 8005472:	4b24      	ldr	r3, [pc, #144]	; (8005504 <_svfiprintf_r+0x1f8>)
 8005474:	bb1b      	cbnz	r3, 80054be <_svfiprintf_r+0x1b2>
 8005476:	9b03      	ldr	r3, [sp, #12]
 8005478:	3307      	adds	r3, #7
 800547a:	f023 0307 	bic.w	r3, r3, #7
 800547e:	3308      	adds	r3, #8
 8005480:	9303      	str	r3, [sp, #12]
 8005482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005484:	4433      	add	r3, r6
 8005486:	9309      	str	r3, [sp, #36]	; 0x24
 8005488:	e767      	b.n	800535a <_svfiprintf_r+0x4e>
 800548a:	460c      	mov	r4, r1
 800548c:	2001      	movs	r0, #1
 800548e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005492:	e7a5      	b.n	80053e0 <_svfiprintf_r+0xd4>
 8005494:	2300      	movs	r3, #0
 8005496:	f04f 0c0a 	mov.w	ip, #10
 800549a:	4619      	mov	r1, r3
 800549c:	3401      	adds	r4, #1
 800549e:	9305      	str	r3, [sp, #20]
 80054a0:	4620      	mov	r0, r4
 80054a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054a6:	3a30      	subs	r2, #48	; 0x30
 80054a8:	2a09      	cmp	r2, #9
 80054aa:	d903      	bls.n	80054b4 <_svfiprintf_r+0x1a8>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0c5      	beq.n	800543c <_svfiprintf_r+0x130>
 80054b0:	9105      	str	r1, [sp, #20]
 80054b2:	e7c3      	b.n	800543c <_svfiprintf_r+0x130>
 80054b4:	4604      	mov	r4, r0
 80054b6:	2301      	movs	r3, #1
 80054b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80054bc:	e7f0      	b.n	80054a0 <_svfiprintf_r+0x194>
 80054be:	ab03      	add	r3, sp, #12
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	462a      	mov	r2, r5
 80054c4:	4638      	mov	r0, r7
 80054c6:	4b10      	ldr	r3, [pc, #64]	; (8005508 <_svfiprintf_r+0x1fc>)
 80054c8:	a904      	add	r1, sp, #16
 80054ca:	f3af 8000 	nop.w
 80054ce:	1c42      	adds	r2, r0, #1
 80054d0:	4606      	mov	r6, r0
 80054d2:	d1d6      	bne.n	8005482 <_svfiprintf_r+0x176>
 80054d4:	89ab      	ldrh	r3, [r5, #12]
 80054d6:	065b      	lsls	r3, r3, #25
 80054d8:	f53f af2c 	bmi.w	8005334 <_svfiprintf_r+0x28>
 80054dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054de:	b01d      	add	sp, #116	; 0x74
 80054e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054e4:	ab03      	add	r3, sp, #12
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	462a      	mov	r2, r5
 80054ea:	4638      	mov	r0, r7
 80054ec:	4b06      	ldr	r3, [pc, #24]	; (8005508 <_svfiprintf_r+0x1fc>)
 80054ee:	a904      	add	r1, sp, #16
 80054f0:	f000 f87c 	bl	80055ec <_printf_i>
 80054f4:	e7eb      	b.n	80054ce <_svfiprintf_r+0x1c2>
 80054f6:	bf00      	nop
 80054f8:	08005c70 	.word	0x08005c70
 80054fc:	08005c76 	.word	0x08005c76
 8005500:	08005c7a 	.word	0x08005c7a
 8005504:	00000000 	.word	0x00000000
 8005508:	08005255 	.word	0x08005255

0800550c <_printf_common>:
 800550c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005510:	4616      	mov	r6, r2
 8005512:	4699      	mov	r9, r3
 8005514:	688a      	ldr	r2, [r1, #8]
 8005516:	690b      	ldr	r3, [r1, #16]
 8005518:	4607      	mov	r7, r0
 800551a:	4293      	cmp	r3, r2
 800551c:	bfb8      	it	lt
 800551e:	4613      	movlt	r3, r2
 8005520:	6033      	str	r3, [r6, #0]
 8005522:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005526:	460c      	mov	r4, r1
 8005528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800552c:	b10a      	cbz	r2, 8005532 <_printf_common+0x26>
 800552e:	3301      	adds	r3, #1
 8005530:	6033      	str	r3, [r6, #0]
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	0699      	lsls	r1, r3, #26
 8005536:	bf42      	ittt	mi
 8005538:	6833      	ldrmi	r3, [r6, #0]
 800553a:	3302      	addmi	r3, #2
 800553c:	6033      	strmi	r3, [r6, #0]
 800553e:	6825      	ldr	r5, [r4, #0]
 8005540:	f015 0506 	ands.w	r5, r5, #6
 8005544:	d106      	bne.n	8005554 <_printf_common+0x48>
 8005546:	f104 0a19 	add.w	sl, r4, #25
 800554a:	68e3      	ldr	r3, [r4, #12]
 800554c:	6832      	ldr	r2, [r6, #0]
 800554e:	1a9b      	subs	r3, r3, r2
 8005550:	42ab      	cmp	r3, r5
 8005552:	dc28      	bgt.n	80055a6 <_printf_common+0x9a>
 8005554:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005558:	1e13      	subs	r3, r2, #0
 800555a:	6822      	ldr	r2, [r4, #0]
 800555c:	bf18      	it	ne
 800555e:	2301      	movne	r3, #1
 8005560:	0692      	lsls	r2, r2, #26
 8005562:	d42d      	bmi.n	80055c0 <_printf_common+0xb4>
 8005564:	4649      	mov	r1, r9
 8005566:	4638      	mov	r0, r7
 8005568:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800556c:	47c0      	blx	r8
 800556e:	3001      	adds	r0, #1
 8005570:	d020      	beq.n	80055b4 <_printf_common+0xa8>
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	68e5      	ldr	r5, [r4, #12]
 8005576:	f003 0306 	and.w	r3, r3, #6
 800557a:	2b04      	cmp	r3, #4
 800557c:	bf18      	it	ne
 800557e:	2500      	movne	r5, #0
 8005580:	6832      	ldr	r2, [r6, #0]
 8005582:	f04f 0600 	mov.w	r6, #0
 8005586:	68a3      	ldr	r3, [r4, #8]
 8005588:	bf08      	it	eq
 800558a:	1aad      	subeq	r5, r5, r2
 800558c:	6922      	ldr	r2, [r4, #16]
 800558e:	bf08      	it	eq
 8005590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005594:	4293      	cmp	r3, r2
 8005596:	bfc4      	itt	gt
 8005598:	1a9b      	subgt	r3, r3, r2
 800559a:	18ed      	addgt	r5, r5, r3
 800559c:	341a      	adds	r4, #26
 800559e:	42b5      	cmp	r5, r6
 80055a0:	d11a      	bne.n	80055d8 <_printf_common+0xcc>
 80055a2:	2000      	movs	r0, #0
 80055a4:	e008      	b.n	80055b8 <_printf_common+0xac>
 80055a6:	2301      	movs	r3, #1
 80055a8:	4652      	mov	r2, sl
 80055aa:	4649      	mov	r1, r9
 80055ac:	4638      	mov	r0, r7
 80055ae:	47c0      	blx	r8
 80055b0:	3001      	adds	r0, #1
 80055b2:	d103      	bne.n	80055bc <_printf_common+0xb0>
 80055b4:	f04f 30ff 	mov.w	r0, #4294967295
 80055b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055bc:	3501      	adds	r5, #1
 80055be:	e7c4      	b.n	800554a <_printf_common+0x3e>
 80055c0:	2030      	movs	r0, #48	; 0x30
 80055c2:	18e1      	adds	r1, r4, r3
 80055c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055ce:	4422      	add	r2, r4
 80055d0:	3302      	adds	r3, #2
 80055d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055d6:	e7c5      	b.n	8005564 <_printf_common+0x58>
 80055d8:	2301      	movs	r3, #1
 80055da:	4622      	mov	r2, r4
 80055dc:	4649      	mov	r1, r9
 80055de:	4638      	mov	r0, r7
 80055e0:	47c0      	blx	r8
 80055e2:	3001      	adds	r0, #1
 80055e4:	d0e6      	beq.n	80055b4 <_printf_common+0xa8>
 80055e6:	3601      	adds	r6, #1
 80055e8:	e7d9      	b.n	800559e <_printf_common+0x92>
	...

080055ec <_printf_i>:
 80055ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055f0:	7e0f      	ldrb	r7, [r1, #24]
 80055f2:	4691      	mov	r9, r2
 80055f4:	2f78      	cmp	r7, #120	; 0x78
 80055f6:	4680      	mov	r8, r0
 80055f8:	460c      	mov	r4, r1
 80055fa:	469a      	mov	sl, r3
 80055fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005602:	d807      	bhi.n	8005614 <_printf_i+0x28>
 8005604:	2f62      	cmp	r7, #98	; 0x62
 8005606:	d80a      	bhi.n	800561e <_printf_i+0x32>
 8005608:	2f00      	cmp	r7, #0
 800560a:	f000 80d9 	beq.w	80057c0 <_printf_i+0x1d4>
 800560e:	2f58      	cmp	r7, #88	; 0x58
 8005610:	f000 80a4 	beq.w	800575c <_printf_i+0x170>
 8005614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005618:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800561c:	e03a      	b.n	8005694 <_printf_i+0xa8>
 800561e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005622:	2b15      	cmp	r3, #21
 8005624:	d8f6      	bhi.n	8005614 <_printf_i+0x28>
 8005626:	a101      	add	r1, pc, #4	; (adr r1, 800562c <_printf_i+0x40>)
 8005628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800562c:	08005685 	.word	0x08005685
 8005630:	08005699 	.word	0x08005699
 8005634:	08005615 	.word	0x08005615
 8005638:	08005615 	.word	0x08005615
 800563c:	08005615 	.word	0x08005615
 8005640:	08005615 	.word	0x08005615
 8005644:	08005699 	.word	0x08005699
 8005648:	08005615 	.word	0x08005615
 800564c:	08005615 	.word	0x08005615
 8005650:	08005615 	.word	0x08005615
 8005654:	08005615 	.word	0x08005615
 8005658:	080057a7 	.word	0x080057a7
 800565c:	080056c9 	.word	0x080056c9
 8005660:	08005789 	.word	0x08005789
 8005664:	08005615 	.word	0x08005615
 8005668:	08005615 	.word	0x08005615
 800566c:	080057c9 	.word	0x080057c9
 8005670:	08005615 	.word	0x08005615
 8005674:	080056c9 	.word	0x080056c9
 8005678:	08005615 	.word	0x08005615
 800567c:	08005615 	.word	0x08005615
 8005680:	08005791 	.word	0x08005791
 8005684:	682b      	ldr	r3, [r5, #0]
 8005686:	1d1a      	adds	r2, r3, #4
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	602a      	str	r2, [r5, #0]
 800568c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005690:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005694:	2301      	movs	r3, #1
 8005696:	e0a4      	b.n	80057e2 <_printf_i+0x1f6>
 8005698:	6820      	ldr	r0, [r4, #0]
 800569a:	6829      	ldr	r1, [r5, #0]
 800569c:	0606      	lsls	r6, r0, #24
 800569e:	f101 0304 	add.w	r3, r1, #4
 80056a2:	d50a      	bpl.n	80056ba <_printf_i+0xce>
 80056a4:	680e      	ldr	r6, [r1, #0]
 80056a6:	602b      	str	r3, [r5, #0]
 80056a8:	2e00      	cmp	r6, #0
 80056aa:	da03      	bge.n	80056b4 <_printf_i+0xc8>
 80056ac:	232d      	movs	r3, #45	; 0x2d
 80056ae:	4276      	negs	r6, r6
 80056b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056b4:	230a      	movs	r3, #10
 80056b6:	485e      	ldr	r0, [pc, #376]	; (8005830 <_printf_i+0x244>)
 80056b8:	e019      	b.n	80056ee <_printf_i+0x102>
 80056ba:	680e      	ldr	r6, [r1, #0]
 80056bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056c0:	602b      	str	r3, [r5, #0]
 80056c2:	bf18      	it	ne
 80056c4:	b236      	sxthne	r6, r6
 80056c6:	e7ef      	b.n	80056a8 <_printf_i+0xbc>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	6820      	ldr	r0, [r4, #0]
 80056cc:	1d19      	adds	r1, r3, #4
 80056ce:	6029      	str	r1, [r5, #0]
 80056d0:	0601      	lsls	r1, r0, #24
 80056d2:	d501      	bpl.n	80056d8 <_printf_i+0xec>
 80056d4:	681e      	ldr	r6, [r3, #0]
 80056d6:	e002      	b.n	80056de <_printf_i+0xf2>
 80056d8:	0646      	lsls	r6, r0, #25
 80056da:	d5fb      	bpl.n	80056d4 <_printf_i+0xe8>
 80056dc:	881e      	ldrh	r6, [r3, #0]
 80056de:	2f6f      	cmp	r7, #111	; 0x6f
 80056e0:	bf0c      	ite	eq
 80056e2:	2308      	moveq	r3, #8
 80056e4:	230a      	movne	r3, #10
 80056e6:	4852      	ldr	r0, [pc, #328]	; (8005830 <_printf_i+0x244>)
 80056e8:	2100      	movs	r1, #0
 80056ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056ee:	6865      	ldr	r5, [r4, #4]
 80056f0:	2d00      	cmp	r5, #0
 80056f2:	bfa8      	it	ge
 80056f4:	6821      	ldrge	r1, [r4, #0]
 80056f6:	60a5      	str	r5, [r4, #8]
 80056f8:	bfa4      	itt	ge
 80056fa:	f021 0104 	bicge.w	r1, r1, #4
 80056fe:	6021      	strge	r1, [r4, #0]
 8005700:	b90e      	cbnz	r6, 8005706 <_printf_i+0x11a>
 8005702:	2d00      	cmp	r5, #0
 8005704:	d04d      	beq.n	80057a2 <_printf_i+0x1b6>
 8005706:	4615      	mov	r5, r2
 8005708:	fbb6 f1f3 	udiv	r1, r6, r3
 800570c:	fb03 6711 	mls	r7, r3, r1, r6
 8005710:	5dc7      	ldrb	r7, [r0, r7]
 8005712:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005716:	4637      	mov	r7, r6
 8005718:	42bb      	cmp	r3, r7
 800571a:	460e      	mov	r6, r1
 800571c:	d9f4      	bls.n	8005708 <_printf_i+0x11c>
 800571e:	2b08      	cmp	r3, #8
 8005720:	d10b      	bne.n	800573a <_printf_i+0x14e>
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	07de      	lsls	r6, r3, #31
 8005726:	d508      	bpl.n	800573a <_printf_i+0x14e>
 8005728:	6923      	ldr	r3, [r4, #16]
 800572a:	6861      	ldr	r1, [r4, #4]
 800572c:	4299      	cmp	r1, r3
 800572e:	bfde      	ittt	le
 8005730:	2330      	movle	r3, #48	; 0x30
 8005732:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005736:	f105 35ff 	addle.w	r5, r5, #4294967295
 800573a:	1b52      	subs	r2, r2, r5
 800573c:	6122      	str	r2, [r4, #16]
 800573e:	464b      	mov	r3, r9
 8005740:	4621      	mov	r1, r4
 8005742:	4640      	mov	r0, r8
 8005744:	f8cd a000 	str.w	sl, [sp]
 8005748:	aa03      	add	r2, sp, #12
 800574a:	f7ff fedf 	bl	800550c <_printf_common>
 800574e:	3001      	adds	r0, #1
 8005750:	d14c      	bne.n	80057ec <_printf_i+0x200>
 8005752:	f04f 30ff 	mov.w	r0, #4294967295
 8005756:	b004      	add	sp, #16
 8005758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800575c:	4834      	ldr	r0, [pc, #208]	; (8005830 <_printf_i+0x244>)
 800575e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005762:	6829      	ldr	r1, [r5, #0]
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	f851 6b04 	ldr.w	r6, [r1], #4
 800576a:	6029      	str	r1, [r5, #0]
 800576c:	061d      	lsls	r5, r3, #24
 800576e:	d514      	bpl.n	800579a <_printf_i+0x1ae>
 8005770:	07df      	lsls	r7, r3, #31
 8005772:	bf44      	itt	mi
 8005774:	f043 0320 	orrmi.w	r3, r3, #32
 8005778:	6023      	strmi	r3, [r4, #0]
 800577a:	b91e      	cbnz	r6, 8005784 <_printf_i+0x198>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	f023 0320 	bic.w	r3, r3, #32
 8005782:	6023      	str	r3, [r4, #0]
 8005784:	2310      	movs	r3, #16
 8005786:	e7af      	b.n	80056e8 <_printf_i+0xfc>
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	f043 0320 	orr.w	r3, r3, #32
 800578e:	6023      	str	r3, [r4, #0]
 8005790:	2378      	movs	r3, #120	; 0x78
 8005792:	4828      	ldr	r0, [pc, #160]	; (8005834 <_printf_i+0x248>)
 8005794:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005798:	e7e3      	b.n	8005762 <_printf_i+0x176>
 800579a:	0659      	lsls	r1, r3, #25
 800579c:	bf48      	it	mi
 800579e:	b2b6      	uxthmi	r6, r6
 80057a0:	e7e6      	b.n	8005770 <_printf_i+0x184>
 80057a2:	4615      	mov	r5, r2
 80057a4:	e7bb      	b.n	800571e <_printf_i+0x132>
 80057a6:	682b      	ldr	r3, [r5, #0]
 80057a8:	6826      	ldr	r6, [r4, #0]
 80057aa:	1d18      	adds	r0, r3, #4
 80057ac:	6961      	ldr	r1, [r4, #20]
 80057ae:	6028      	str	r0, [r5, #0]
 80057b0:	0635      	lsls	r5, r6, #24
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	d501      	bpl.n	80057ba <_printf_i+0x1ce>
 80057b6:	6019      	str	r1, [r3, #0]
 80057b8:	e002      	b.n	80057c0 <_printf_i+0x1d4>
 80057ba:	0670      	lsls	r0, r6, #25
 80057bc:	d5fb      	bpl.n	80057b6 <_printf_i+0x1ca>
 80057be:	8019      	strh	r1, [r3, #0]
 80057c0:	2300      	movs	r3, #0
 80057c2:	4615      	mov	r5, r2
 80057c4:	6123      	str	r3, [r4, #16]
 80057c6:	e7ba      	b.n	800573e <_printf_i+0x152>
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	2100      	movs	r1, #0
 80057cc:	1d1a      	adds	r2, r3, #4
 80057ce:	602a      	str	r2, [r5, #0]
 80057d0:	681d      	ldr	r5, [r3, #0]
 80057d2:	6862      	ldr	r2, [r4, #4]
 80057d4:	4628      	mov	r0, r5
 80057d6:	f000 f82f 	bl	8005838 <memchr>
 80057da:	b108      	cbz	r0, 80057e0 <_printf_i+0x1f4>
 80057dc:	1b40      	subs	r0, r0, r5
 80057de:	6060      	str	r0, [r4, #4]
 80057e0:	6863      	ldr	r3, [r4, #4]
 80057e2:	6123      	str	r3, [r4, #16]
 80057e4:	2300      	movs	r3, #0
 80057e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ea:	e7a8      	b.n	800573e <_printf_i+0x152>
 80057ec:	462a      	mov	r2, r5
 80057ee:	4649      	mov	r1, r9
 80057f0:	4640      	mov	r0, r8
 80057f2:	6923      	ldr	r3, [r4, #16]
 80057f4:	47d0      	blx	sl
 80057f6:	3001      	adds	r0, #1
 80057f8:	d0ab      	beq.n	8005752 <_printf_i+0x166>
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	079b      	lsls	r3, r3, #30
 80057fe:	d413      	bmi.n	8005828 <_printf_i+0x23c>
 8005800:	68e0      	ldr	r0, [r4, #12]
 8005802:	9b03      	ldr	r3, [sp, #12]
 8005804:	4298      	cmp	r0, r3
 8005806:	bfb8      	it	lt
 8005808:	4618      	movlt	r0, r3
 800580a:	e7a4      	b.n	8005756 <_printf_i+0x16a>
 800580c:	2301      	movs	r3, #1
 800580e:	4632      	mov	r2, r6
 8005810:	4649      	mov	r1, r9
 8005812:	4640      	mov	r0, r8
 8005814:	47d0      	blx	sl
 8005816:	3001      	adds	r0, #1
 8005818:	d09b      	beq.n	8005752 <_printf_i+0x166>
 800581a:	3501      	adds	r5, #1
 800581c:	68e3      	ldr	r3, [r4, #12]
 800581e:	9903      	ldr	r1, [sp, #12]
 8005820:	1a5b      	subs	r3, r3, r1
 8005822:	42ab      	cmp	r3, r5
 8005824:	dcf2      	bgt.n	800580c <_printf_i+0x220>
 8005826:	e7eb      	b.n	8005800 <_printf_i+0x214>
 8005828:	2500      	movs	r5, #0
 800582a:	f104 0619 	add.w	r6, r4, #25
 800582e:	e7f5      	b.n	800581c <_printf_i+0x230>
 8005830:	08005c81 	.word	0x08005c81
 8005834:	08005c92 	.word	0x08005c92

08005838 <memchr>:
 8005838:	4603      	mov	r3, r0
 800583a:	b510      	push	{r4, lr}
 800583c:	b2c9      	uxtb	r1, r1
 800583e:	4402      	add	r2, r0
 8005840:	4293      	cmp	r3, r2
 8005842:	4618      	mov	r0, r3
 8005844:	d101      	bne.n	800584a <memchr+0x12>
 8005846:	2000      	movs	r0, #0
 8005848:	e003      	b.n	8005852 <memchr+0x1a>
 800584a:	7804      	ldrb	r4, [r0, #0]
 800584c:	3301      	adds	r3, #1
 800584e:	428c      	cmp	r4, r1
 8005850:	d1f6      	bne.n	8005840 <memchr+0x8>
 8005852:	bd10      	pop	{r4, pc}

08005854 <memcpy>:
 8005854:	440a      	add	r2, r1
 8005856:	4291      	cmp	r1, r2
 8005858:	f100 33ff 	add.w	r3, r0, #4294967295
 800585c:	d100      	bne.n	8005860 <memcpy+0xc>
 800585e:	4770      	bx	lr
 8005860:	b510      	push	{r4, lr}
 8005862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005866:	4291      	cmp	r1, r2
 8005868:	f803 4f01 	strb.w	r4, [r3, #1]!
 800586c:	d1f9      	bne.n	8005862 <memcpy+0xe>
 800586e:	bd10      	pop	{r4, pc}

08005870 <memmove>:
 8005870:	4288      	cmp	r0, r1
 8005872:	b510      	push	{r4, lr}
 8005874:	eb01 0402 	add.w	r4, r1, r2
 8005878:	d902      	bls.n	8005880 <memmove+0x10>
 800587a:	4284      	cmp	r4, r0
 800587c:	4623      	mov	r3, r4
 800587e:	d807      	bhi.n	8005890 <memmove+0x20>
 8005880:	1e43      	subs	r3, r0, #1
 8005882:	42a1      	cmp	r1, r4
 8005884:	d008      	beq.n	8005898 <memmove+0x28>
 8005886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800588a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800588e:	e7f8      	b.n	8005882 <memmove+0x12>
 8005890:	4601      	mov	r1, r0
 8005892:	4402      	add	r2, r0
 8005894:	428a      	cmp	r2, r1
 8005896:	d100      	bne.n	800589a <memmove+0x2a>
 8005898:	bd10      	pop	{r4, pc}
 800589a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800589e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058a2:	e7f7      	b.n	8005894 <memmove+0x24>

080058a4 <_free_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4605      	mov	r5, r0
 80058a8:	2900      	cmp	r1, #0
 80058aa:	d040      	beq.n	800592e <_free_r+0x8a>
 80058ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058b0:	1f0c      	subs	r4, r1, #4
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	bfb8      	it	lt
 80058b6:	18e4      	addlt	r4, r4, r3
 80058b8:	f000 f910 	bl	8005adc <__malloc_lock>
 80058bc:	4a1c      	ldr	r2, [pc, #112]	; (8005930 <_free_r+0x8c>)
 80058be:	6813      	ldr	r3, [r2, #0]
 80058c0:	b933      	cbnz	r3, 80058d0 <_free_r+0x2c>
 80058c2:	6063      	str	r3, [r4, #4]
 80058c4:	6014      	str	r4, [r2, #0]
 80058c6:	4628      	mov	r0, r5
 80058c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058cc:	f000 b90c 	b.w	8005ae8 <__malloc_unlock>
 80058d0:	42a3      	cmp	r3, r4
 80058d2:	d908      	bls.n	80058e6 <_free_r+0x42>
 80058d4:	6820      	ldr	r0, [r4, #0]
 80058d6:	1821      	adds	r1, r4, r0
 80058d8:	428b      	cmp	r3, r1
 80058da:	bf01      	itttt	eq
 80058dc:	6819      	ldreq	r1, [r3, #0]
 80058de:	685b      	ldreq	r3, [r3, #4]
 80058e0:	1809      	addeq	r1, r1, r0
 80058e2:	6021      	streq	r1, [r4, #0]
 80058e4:	e7ed      	b.n	80058c2 <_free_r+0x1e>
 80058e6:	461a      	mov	r2, r3
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	b10b      	cbz	r3, 80058f0 <_free_r+0x4c>
 80058ec:	42a3      	cmp	r3, r4
 80058ee:	d9fa      	bls.n	80058e6 <_free_r+0x42>
 80058f0:	6811      	ldr	r1, [r2, #0]
 80058f2:	1850      	adds	r0, r2, r1
 80058f4:	42a0      	cmp	r0, r4
 80058f6:	d10b      	bne.n	8005910 <_free_r+0x6c>
 80058f8:	6820      	ldr	r0, [r4, #0]
 80058fa:	4401      	add	r1, r0
 80058fc:	1850      	adds	r0, r2, r1
 80058fe:	4283      	cmp	r3, r0
 8005900:	6011      	str	r1, [r2, #0]
 8005902:	d1e0      	bne.n	80058c6 <_free_r+0x22>
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	4401      	add	r1, r0
 800590a:	6011      	str	r1, [r2, #0]
 800590c:	6053      	str	r3, [r2, #4]
 800590e:	e7da      	b.n	80058c6 <_free_r+0x22>
 8005910:	d902      	bls.n	8005918 <_free_r+0x74>
 8005912:	230c      	movs	r3, #12
 8005914:	602b      	str	r3, [r5, #0]
 8005916:	e7d6      	b.n	80058c6 <_free_r+0x22>
 8005918:	6820      	ldr	r0, [r4, #0]
 800591a:	1821      	adds	r1, r4, r0
 800591c:	428b      	cmp	r3, r1
 800591e:	bf01      	itttt	eq
 8005920:	6819      	ldreq	r1, [r3, #0]
 8005922:	685b      	ldreq	r3, [r3, #4]
 8005924:	1809      	addeq	r1, r1, r0
 8005926:	6021      	streq	r1, [r4, #0]
 8005928:	6063      	str	r3, [r4, #4]
 800592a:	6054      	str	r4, [r2, #4]
 800592c:	e7cb      	b.n	80058c6 <_free_r+0x22>
 800592e:	bd38      	pop	{r3, r4, r5, pc}
 8005930:	20000e8c 	.word	0x20000e8c

08005934 <sbrk_aligned>:
 8005934:	b570      	push	{r4, r5, r6, lr}
 8005936:	4e0e      	ldr	r6, [pc, #56]	; (8005970 <sbrk_aligned+0x3c>)
 8005938:	460c      	mov	r4, r1
 800593a:	6831      	ldr	r1, [r6, #0]
 800593c:	4605      	mov	r5, r0
 800593e:	b911      	cbnz	r1, 8005946 <sbrk_aligned+0x12>
 8005940:	f000 f8bc 	bl	8005abc <_sbrk_r>
 8005944:	6030      	str	r0, [r6, #0]
 8005946:	4621      	mov	r1, r4
 8005948:	4628      	mov	r0, r5
 800594a:	f000 f8b7 	bl	8005abc <_sbrk_r>
 800594e:	1c43      	adds	r3, r0, #1
 8005950:	d00a      	beq.n	8005968 <sbrk_aligned+0x34>
 8005952:	1cc4      	adds	r4, r0, #3
 8005954:	f024 0403 	bic.w	r4, r4, #3
 8005958:	42a0      	cmp	r0, r4
 800595a:	d007      	beq.n	800596c <sbrk_aligned+0x38>
 800595c:	1a21      	subs	r1, r4, r0
 800595e:	4628      	mov	r0, r5
 8005960:	f000 f8ac 	bl	8005abc <_sbrk_r>
 8005964:	3001      	adds	r0, #1
 8005966:	d101      	bne.n	800596c <sbrk_aligned+0x38>
 8005968:	f04f 34ff 	mov.w	r4, #4294967295
 800596c:	4620      	mov	r0, r4
 800596e:	bd70      	pop	{r4, r5, r6, pc}
 8005970:	20000e90 	.word	0x20000e90

08005974 <_malloc_r>:
 8005974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005978:	1ccd      	adds	r5, r1, #3
 800597a:	f025 0503 	bic.w	r5, r5, #3
 800597e:	3508      	adds	r5, #8
 8005980:	2d0c      	cmp	r5, #12
 8005982:	bf38      	it	cc
 8005984:	250c      	movcc	r5, #12
 8005986:	2d00      	cmp	r5, #0
 8005988:	4607      	mov	r7, r0
 800598a:	db01      	blt.n	8005990 <_malloc_r+0x1c>
 800598c:	42a9      	cmp	r1, r5
 800598e:	d905      	bls.n	800599c <_malloc_r+0x28>
 8005990:	230c      	movs	r3, #12
 8005992:	2600      	movs	r6, #0
 8005994:	603b      	str	r3, [r7, #0]
 8005996:	4630      	mov	r0, r6
 8005998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800599c:	4e2e      	ldr	r6, [pc, #184]	; (8005a58 <_malloc_r+0xe4>)
 800599e:	f000 f89d 	bl	8005adc <__malloc_lock>
 80059a2:	6833      	ldr	r3, [r6, #0]
 80059a4:	461c      	mov	r4, r3
 80059a6:	bb34      	cbnz	r4, 80059f6 <_malloc_r+0x82>
 80059a8:	4629      	mov	r1, r5
 80059aa:	4638      	mov	r0, r7
 80059ac:	f7ff ffc2 	bl	8005934 <sbrk_aligned>
 80059b0:	1c43      	adds	r3, r0, #1
 80059b2:	4604      	mov	r4, r0
 80059b4:	d14d      	bne.n	8005a52 <_malloc_r+0xde>
 80059b6:	6834      	ldr	r4, [r6, #0]
 80059b8:	4626      	mov	r6, r4
 80059ba:	2e00      	cmp	r6, #0
 80059bc:	d140      	bne.n	8005a40 <_malloc_r+0xcc>
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	4631      	mov	r1, r6
 80059c2:	4638      	mov	r0, r7
 80059c4:	eb04 0803 	add.w	r8, r4, r3
 80059c8:	f000 f878 	bl	8005abc <_sbrk_r>
 80059cc:	4580      	cmp	r8, r0
 80059ce:	d13a      	bne.n	8005a46 <_malloc_r+0xd2>
 80059d0:	6821      	ldr	r1, [r4, #0]
 80059d2:	3503      	adds	r5, #3
 80059d4:	1a6d      	subs	r5, r5, r1
 80059d6:	f025 0503 	bic.w	r5, r5, #3
 80059da:	3508      	adds	r5, #8
 80059dc:	2d0c      	cmp	r5, #12
 80059de:	bf38      	it	cc
 80059e0:	250c      	movcc	r5, #12
 80059e2:	4638      	mov	r0, r7
 80059e4:	4629      	mov	r1, r5
 80059e6:	f7ff ffa5 	bl	8005934 <sbrk_aligned>
 80059ea:	3001      	adds	r0, #1
 80059ec:	d02b      	beq.n	8005a46 <_malloc_r+0xd2>
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	442b      	add	r3, r5
 80059f2:	6023      	str	r3, [r4, #0]
 80059f4:	e00e      	b.n	8005a14 <_malloc_r+0xa0>
 80059f6:	6822      	ldr	r2, [r4, #0]
 80059f8:	1b52      	subs	r2, r2, r5
 80059fa:	d41e      	bmi.n	8005a3a <_malloc_r+0xc6>
 80059fc:	2a0b      	cmp	r2, #11
 80059fe:	d916      	bls.n	8005a2e <_malloc_r+0xba>
 8005a00:	1961      	adds	r1, r4, r5
 8005a02:	42a3      	cmp	r3, r4
 8005a04:	6025      	str	r5, [r4, #0]
 8005a06:	bf18      	it	ne
 8005a08:	6059      	strne	r1, [r3, #4]
 8005a0a:	6863      	ldr	r3, [r4, #4]
 8005a0c:	bf08      	it	eq
 8005a0e:	6031      	streq	r1, [r6, #0]
 8005a10:	5162      	str	r2, [r4, r5]
 8005a12:	604b      	str	r3, [r1, #4]
 8005a14:	4638      	mov	r0, r7
 8005a16:	f104 060b 	add.w	r6, r4, #11
 8005a1a:	f000 f865 	bl	8005ae8 <__malloc_unlock>
 8005a1e:	f026 0607 	bic.w	r6, r6, #7
 8005a22:	1d23      	adds	r3, r4, #4
 8005a24:	1af2      	subs	r2, r6, r3
 8005a26:	d0b6      	beq.n	8005996 <_malloc_r+0x22>
 8005a28:	1b9b      	subs	r3, r3, r6
 8005a2a:	50a3      	str	r3, [r4, r2]
 8005a2c:	e7b3      	b.n	8005996 <_malloc_r+0x22>
 8005a2e:	6862      	ldr	r2, [r4, #4]
 8005a30:	42a3      	cmp	r3, r4
 8005a32:	bf0c      	ite	eq
 8005a34:	6032      	streq	r2, [r6, #0]
 8005a36:	605a      	strne	r2, [r3, #4]
 8005a38:	e7ec      	b.n	8005a14 <_malloc_r+0xa0>
 8005a3a:	4623      	mov	r3, r4
 8005a3c:	6864      	ldr	r4, [r4, #4]
 8005a3e:	e7b2      	b.n	80059a6 <_malloc_r+0x32>
 8005a40:	4634      	mov	r4, r6
 8005a42:	6876      	ldr	r6, [r6, #4]
 8005a44:	e7b9      	b.n	80059ba <_malloc_r+0x46>
 8005a46:	230c      	movs	r3, #12
 8005a48:	4638      	mov	r0, r7
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	f000 f84c 	bl	8005ae8 <__malloc_unlock>
 8005a50:	e7a1      	b.n	8005996 <_malloc_r+0x22>
 8005a52:	6025      	str	r5, [r4, #0]
 8005a54:	e7de      	b.n	8005a14 <_malloc_r+0xa0>
 8005a56:	bf00      	nop
 8005a58:	20000e8c 	.word	0x20000e8c

08005a5c <_realloc_r>:
 8005a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a60:	4680      	mov	r8, r0
 8005a62:	4614      	mov	r4, r2
 8005a64:	460e      	mov	r6, r1
 8005a66:	b921      	cbnz	r1, 8005a72 <_realloc_r+0x16>
 8005a68:	4611      	mov	r1, r2
 8005a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a6e:	f7ff bf81 	b.w	8005974 <_malloc_r>
 8005a72:	b92a      	cbnz	r2, 8005a80 <_realloc_r+0x24>
 8005a74:	f7ff ff16 	bl	80058a4 <_free_r>
 8005a78:	4625      	mov	r5, r4
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a80:	f000 f838 	bl	8005af4 <_malloc_usable_size_r>
 8005a84:	4284      	cmp	r4, r0
 8005a86:	4607      	mov	r7, r0
 8005a88:	d802      	bhi.n	8005a90 <_realloc_r+0x34>
 8005a8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a8e:	d812      	bhi.n	8005ab6 <_realloc_r+0x5a>
 8005a90:	4621      	mov	r1, r4
 8005a92:	4640      	mov	r0, r8
 8005a94:	f7ff ff6e 	bl	8005974 <_malloc_r>
 8005a98:	4605      	mov	r5, r0
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	d0ed      	beq.n	8005a7a <_realloc_r+0x1e>
 8005a9e:	42bc      	cmp	r4, r7
 8005aa0:	4622      	mov	r2, r4
 8005aa2:	4631      	mov	r1, r6
 8005aa4:	bf28      	it	cs
 8005aa6:	463a      	movcs	r2, r7
 8005aa8:	f7ff fed4 	bl	8005854 <memcpy>
 8005aac:	4631      	mov	r1, r6
 8005aae:	4640      	mov	r0, r8
 8005ab0:	f7ff fef8 	bl	80058a4 <_free_r>
 8005ab4:	e7e1      	b.n	8005a7a <_realloc_r+0x1e>
 8005ab6:	4635      	mov	r5, r6
 8005ab8:	e7df      	b.n	8005a7a <_realloc_r+0x1e>
	...

08005abc <_sbrk_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	2300      	movs	r3, #0
 8005ac0:	4d05      	ldr	r5, [pc, #20]	; (8005ad8 <_sbrk_r+0x1c>)
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	4608      	mov	r0, r1
 8005ac6:	602b      	str	r3, [r5, #0]
 8005ac8:	f7fc fc8a 	bl	80023e0 <_sbrk>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_sbrk_r+0x1a>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_sbrk_r+0x1a>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	20000e94 	.word	0x20000e94

08005adc <__malloc_lock>:
 8005adc:	4801      	ldr	r0, [pc, #4]	; (8005ae4 <__malloc_lock+0x8>)
 8005ade:	f000 b811 	b.w	8005b04 <__retarget_lock_acquire_recursive>
 8005ae2:	bf00      	nop
 8005ae4:	20000e98 	.word	0x20000e98

08005ae8 <__malloc_unlock>:
 8005ae8:	4801      	ldr	r0, [pc, #4]	; (8005af0 <__malloc_unlock+0x8>)
 8005aea:	f000 b80c 	b.w	8005b06 <__retarget_lock_release_recursive>
 8005aee:	bf00      	nop
 8005af0:	20000e98 	.word	0x20000e98

08005af4 <_malloc_usable_size_r>:
 8005af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005af8:	1f18      	subs	r0, r3, #4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	bfbc      	itt	lt
 8005afe:	580b      	ldrlt	r3, [r1, r0]
 8005b00:	18c0      	addlt	r0, r0, r3
 8005b02:	4770      	bx	lr

08005b04 <__retarget_lock_acquire_recursive>:
 8005b04:	4770      	bx	lr

08005b06 <__retarget_lock_release_recursive>:
 8005b06:	4770      	bx	lr

08005b08 <_init>:
 8005b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0a:	bf00      	nop
 8005b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0e:	bc08      	pop	{r3}
 8005b10:	469e      	mov	lr, r3
 8005b12:	4770      	bx	lr

08005b14 <_fini>:
 8005b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b16:	bf00      	nop
 8005b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1a:	bc08      	pop	{r3}
 8005b1c:	469e      	mov	lr, r3
 8005b1e:	4770      	bx	lr
