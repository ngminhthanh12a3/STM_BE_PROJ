
SERIAL_COMMUNICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cdc  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08005ec0  08005ec0  00006ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006048  08006048  00008264  2**0
                  CONTENTS
  4 .ARM          00000000  08006048  08006048  00008264  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006048  08006048  00008264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006048  08006048  00007048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800604c  0800604c  0000704c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  08006050  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d68  20000264  080062b4  00008264  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fcc  080062b4  00008fcc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d57e  00000000  00000000  0000828d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000253e  00000000  00000000  0001580b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00017d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000922  00000000  00000000  00018910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f05  00000000  00000000  00019232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe17  00000000  00000000  00033137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093db8  00000000  00000000  00042f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6d06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033f4  00000000  00000000  000d6d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000da140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000264 	.word	0x20000264
 8000200:	00000000 	.word	0x00000000
 8000204:	08005ea8 	.word	0x08005ea8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000268 	.word	0x20000268
 8000220:	08005ea8 	.word	0x08005ea8

08000224 <Compute_CRC16>:
		crctable16[divident] = curByte;
	}
}

unsigned short Compute_CRC16(unsigned char* bytes, const int BYTES_LEN)
{
 8000224:	b480      	push	{r7}
 8000226:	b087      	sub	sp, #28
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	6039      	str	r1, [r7, #0]
	unsigned short crc = 0;
 800022e:	2300      	movs	r3, #0
 8000230:	82fb      	strh	r3, [r7, #22]

	for (int i = 0; i < BYTES_LEN; i++)
 8000232:	2300      	movs	r3, #0
 8000234:	613b      	str	r3, [r7, #16]
 8000236:	e019      	b.n	800026c <Compute_CRC16+0x48>
	{
		unsigned char b = bytes[i];
 8000238:	693b      	ldr	r3, [r7, #16]
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	4413      	add	r3, r2
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	73fb      	strb	r3, [r7, #15]

		/* XOR-in next input byte into MSB of crc, that's our new intermediate divident */
		unsigned char pos = (unsigned char)((crc >> 8) ^ b);
 8000242:	8afb      	ldrh	r3, [r7, #22]
 8000244:	0a1b      	lsrs	r3, r3, #8
 8000246:	b29b      	uxth	r3, r3
 8000248:	b2da      	uxtb	r2, r3
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	4053      	eors	r3, r2
 800024e:	73bb      	strb	r3, [r7, #14]
		/* Shift out the MSB used for division per lookuptable and XOR with the remainder */
		crc = (unsigned short)((crc << 8) ^ (unsigned short)(crctable16[pos]));
 8000250:	8afb      	ldrh	r3, [r7, #22]
 8000252:	021b      	lsls	r3, r3, #8
 8000254:	b21a      	sxth	r2, r3
 8000256:	7bbb      	ldrb	r3, [r7, #14]
 8000258:	4909      	ldr	r1, [pc, #36]	@ (8000280 <Compute_CRC16+0x5c>)
 800025a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800025e:	b21b      	sxth	r3, r3
 8000260:	4053      	eors	r3, r2
 8000262:	b21b      	sxth	r3, r3
 8000264:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < BYTES_LEN; i++)
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	3301      	adds	r3, #1
 800026a:	613b      	str	r3, [r7, #16]
 800026c:	693a      	ldr	r2, [r7, #16]
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	429a      	cmp	r2, r3
 8000272:	dbe1      	blt.n	8000238 <Compute_CRC16+0x14>

	}
//	printf("\nHERE 3");

	return crc;
 8000274:	8afb      	ldrh	r3, [r7, #22]
}
 8000276:	4618      	mov	r0, r3
 8000278:	371c      	adds	r7, #28
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	20000000 	.word	0x20000000

08000284 <DectModHandler>:

extern FrameParse_t FrameParse;

uint8_t FP_HEADER[] = {FP_H1, FP_H2, FP_T1, FP_T2};
uint8_t DectModHandler(FrameParse_t *FP_handler, uint8_t __char)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	460b      	mov	r3, r1
 800028e:	70fb      	strb	r3, [r7, #3]
	if (__char == FP_HEADER[FP_handler->H_Index])
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	789b      	ldrb	r3, [r3, #2]
 8000294:	461a      	mov	r2, r3
 8000296:	4b0d      	ldr	r3, [pc, #52]	@ (80002cc <DectModHandler+0x48>)
 8000298:	5c9b      	ldrb	r3, [r3, r2]
 800029a:	78fa      	ldrb	r2, [r7, #3]
 800029c:	429a      	cmp	r2, r3
 800029e:	d10e      	bne.n	80002be <DectModHandler+0x3a>
	{
		// go to next header
		if((++FP_handler->H_Index) == sizeof(FP_HEADER))
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	789b      	ldrb	r3, [r3, #2]
 80002a4:	3301      	adds	r3, #1
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	709a      	strb	r2, [r3, #2]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	789b      	ldrb	r3, [r3, #2]
 80002b0:	2b04      	cmp	r3, #4
 80002b2:	d102      	bne.n	80002ba <DectModHandler+0x36>
			FP_handler->H_Index = 0;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2200      	movs	r2, #0
 80002b8:	709a      	strb	r2, [r3, #2]

		return FP_OK;
 80002ba:	2301      	movs	r3, #1
 80002bc:	e000      	b.n	80002c0 <DectModHandler+0x3c>
	}
	return FP_FAIL;
 80002be:	2300      	movs	r3, #0
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	20000200 	.word	0x20000200

080002d0 <FP_Init>:

void FP_Init(FrameParse_t *FP_handler)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	// initialize fields
	FP_handler->FP_MOD = DECT_H_MOD;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2200      	movs	r2, #0
 80002dc:	701a      	strb	r2, [r3, #0]
	FP_handler->FP_Status = FP_OK;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2201      	movs	r2, #1
 80002e2:	705a      	strb	r2, [r3, #1]

	//
	FP_handler->H_Index = 0;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2200      	movs	r2, #0
 80002e8:	709a      	strb	r2, [r3, #2]
	FP_handler->_CRC.index = 0;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2200      	movs	r2, #0
 80002ee:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
	FP_handler->buffer.index = 0;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2200      	movs	r2, #0
 80002f6:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr

08000304 <HandleFPStatusFail>:
  * @note   .
  * @param  __char character.
  * @retval
  */
void HandleFPStatusFail(FrameParse_t *FP_handler)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	FP_Init(FP_handler);
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	f7ff ffdf 	bl	80002d0 <FP_Init>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <FP_CheckCRC>:

uint8_t FP_CheckCRC(FrameParse_t *FP_handler)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	b084      	sub	sp, #16
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
	uint16_t FRAME_CRC = (FP_handler->_CRC.buffer[1] << 8)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 8000328:	021b      	lsls	r3, r3, #8
						| FP_handler->_CRC.buffer[0];
 800032a:	b21a      	sxth	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8000332:	b21b      	sxth	r3, r3
 8000334:	4313      	orrs	r3, r2
 8000336:	b21b      	sxth	r3, r3
	uint16_t FRAME_CRC = (FP_handler->_CRC.buffer[1] << 8)
 8000338:	81fb      	strh	r3, [r7, #14]
	return Compute_CRC16(FP_handler->buffer.data, FP_handler->buffer.len)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	1d5a      	adds	r2, r3, #5
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	791b      	ldrb	r3, [r3, #4]
 8000342:	4619      	mov	r1, r3
 8000344:	4610      	mov	r0, r2
 8000346:	f7ff ff6d 	bl	8000224 <Compute_CRC16>
 800034a:	4603      	mov	r3, r0
 800034c:	461a      	mov	r2, r3
			== FRAME_CRC;
 800034e:	89fb      	ldrh	r3, [r7, #14]
 8000350:	4293      	cmp	r3, r2
 8000352:	bf0c      	ite	eq
 8000354:	2301      	moveq	r3, #1
 8000356:	2300      	movne	r3, #0
 8000358:	b2db      	uxtb	r3, r3
}
 800035a:	4618      	mov	r0, r3
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <ParseFrameHandler>:

void ParseFrameHandler(FrameParse_t *FP_handler, uint8_t __char)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	70fb      	strb	r3, [r7, #3]
	// pre handlers

	// Status fail
	if(FP_handler->FP_Status == FP_FAIL)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	785b      	ldrb	r3, [r3, #1]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d102      	bne.n	800037e <ParseFrameHandler+0x1a>
	{
		// handlers
		HandleFPStatusFail(FP_handler);
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f7ff ffc3 	bl	8000304 <HandleFPStatusFail>
	}

	//
	FP_handler->cur_char = __char;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	78fa      	ldrb	r2, [r7, #3]
 8000382:	70da      	strb	r2, [r3, #3]
	switch (FP_handler->FP_MOD) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b04      	cmp	r3, #4
 800038a:	f200 8091 	bhi.w	80004b0 <ParseFrameHandler+0x14c>
 800038e:	a201      	add	r2, pc, #4	@ (adr r2, 8000394 <ParseFrameHandler+0x30>)
 8000390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000394:	080003a9 	.word	0x080003a9
 8000398:	080003f5 	.word	0x080003f5
 800039c:	08000405 	.word	0x08000405
 80003a0:	0800042b 	.word	0x0800042b
 80003a4:	08000469 	.word	0x08000469
		case DECT_H_MOD:
			FP_handler->FP_Status = DectModHandler(FP_handler, __char);
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	4619      	mov	r1, r3
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f7ff ff69 	bl	8000284 <DectModHandler>
 80003b2:	4603      	mov	r3, r0
 80003b4:	461a      	mov	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	705a      	strb	r2, [r3, #1]

			// go to next mode
			if(FP_HEADER[FP_handler->H_Index] == FP_T1)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	789b      	ldrb	r3, [r3, #2]
 80003be:	461a      	mov	r2, r3
 80003c0:	4b41      	ldr	r3, [pc, #260]	@ (80004c8 <ParseFrameHandler+0x164>)
 80003c2:	5c9b      	ldrb	r3, [r3, r2]
 80003c4:	2be1      	cmp	r3, #225	@ 0xe1
 80003c6:	d102      	bne.n	80003ce <ParseFrameHandler+0x6a>
				FP_handler->FP_MOD = DECT_CMD;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2201      	movs	r2, #1
 80003cc:	701a      	strb	r2, [r3, #0]
			if(FP_HEADER[FP_handler->H_Index] == FP_H1)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	789b      	ldrb	r3, [r3, #2]
 80003d2:	461a      	mov	r2, r3
 80003d4:	4b3c      	ldr	r3, [pc, #240]	@ (80004c8 <ParseFrameHandler+0x164>)
 80003d6:	5c9b      	ldrb	r3, [r3, r2]
 80003d8:	2bab      	cmp	r3, #171	@ 0xab
 80003da:	d16b      	bne.n	80004b4 <ParseFrameHandler+0x150>
			{
				// case that the buffer has buffer length
				if(FP_handler->buffer.len)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	791b      	ldrb	r3, [r3, #4]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d003      	beq.n	80003ec <ParseFrameHandler+0x88>
					FP_handler->FP_MOD = COL_CRC;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2204      	movs	r2, #4
 80003e8:	701a      	strb	r2, [r3, #0]
				else
					FP_handler->FP_MOD = DECT_COML;
			}

			break;
 80003ea:	e063      	b.n	80004b4 <ParseFrameHandler+0x150>
					FP_handler->FP_MOD = DECT_COML;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2205      	movs	r2, #5
 80003f0:	701a      	strb	r2, [r3, #0]
			break;
 80003f2:	e05f      	b.n	80004b4 <ParseFrameHandler+0x150>
		case DECT_CMD:
//			FP_handler->dev.id = __char & 0x7Fu;
//			FP_handler->dev.mode = __char >> 7;
			FP_handler->_CMD = __char;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	78fa      	ldrb	r2, [r7, #3]
 80003f8:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

			// go to next mode
			FP_handler->FP_MOD = DECT_BUF_LEN;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2202      	movs	r2, #2
 8000400:	701a      	strb	r2, [r3, #0]
			break;
 8000402:	e05c      	b.n	80004be <ParseFrameHandler+0x15a>
		case DECT_BUF_LEN:
			FP_handler->buffer.len = __char;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	78fa      	ldrb	r2, [r7, #3]
 8000408:	711a      	strb	r2, [r3, #4]


			//
			FP_handler->buffer.index = 0;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	2200      	movs	r2, #0
 800040e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104

			// go to next mode
			if(FP_handler->buffer.len)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	791b      	ldrb	r3, [r3, #4]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d003      	beq.n	8000422 <ParseFrameHandler+0xbe>
				FP_handler->FP_MOD = COL_BUF_DATA;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	2203      	movs	r2, #3
 800041e:	701a      	strb	r2, [r3, #0]
			else
				FP_handler->FP_MOD = DECT_H_MOD;
			break;
 8000420:	e04d      	b.n	80004be <ParseFrameHandler+0x15a>
				FP_handler->FP_MOD = DECT_H_MOD;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
			break;
 8000428:	e049      	b.n	80004be <ParseFrameHandler+0x15a>
		case COL_BUF_DATA:
			if(FP_handler->buffer.len)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	791b      	ldrb	r3, [r3, #4]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d007      	beq.n	8000442 <ParseFrameHandler+0xde>
				FP_handler->buffer.data[FP_handler->buffer.index] = __char;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8000438:	461a      	mov	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4413      	add	r3, r2
 800043e:	78fa      	ldrb	r2, [r7, #3]
 8000440:	715a      	strb	r2, [r3, #5]

			// increase buffer index, and go to next mode
			if((++FP_handler->buffer.index) == FP_handler->buffer.len)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8000448:	3301      	adds	r3, #1
 800044a:	b2da      	uxtb	r2, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	791b      	ldrb	r3, [r3, #4]
 800045c:	429a      	cmp	r2, r3
 800045e:	d12b      	bne.n	80004b8 <ParseFrameHandler+0x154>
			{
				FP_handler->FP_MOD = DECT_H_MOD;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2200      	movs	r2, #0
 8000464:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000466:	e027      	b.n	80004b8 <ParseFrameHandler+0x154>
		case COL_CRC:
			FP_handler->_CRC.buffer[FP_handler->_CRC.index] = __char;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 800046e:	461a      	mov	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4413      	add	r3, r2
 8000474:	78fa      	ldrb	r2, [r7, #3]
 8000476:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106

			// increase buffer index, and go to next mode
			if((++FP_handler->_CRC.index) == sizeof(FP_handler->_CRC.buffer))
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8000480:	3301      	adds	r3, #1
 8000482:	b2da      	uxtb	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8000490:	2b02      	cmp	r3, #2
 8000492:	d113      	bne.n	80004bc <ParseFrameHandler+0x158>
			{
				if(FP_CheckCRC(FP_handler))
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f7ff ff40 	bl	800031a <FP_CheckCRC>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d003      	beq.n	80004a8 <ParseFrameHandler+0x144>
				{
					FP_handler->FP_MOD = DECT_COML;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2205      	movs	r2, #5
 80004a4:	701a      	strb	r2, [r3, #0]
				else
				{
					HandleFPStatusFail(FP_handler);
				}
			}
			break;
 80004a6:	e009      	b.n	80004bc <ParseFrameHandler+0x158>
					HandleFPStatusFail(FP_handler);
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f7ff ff2b 	bl	8000304 <HandleFPStatusFail>
			break;
 80004ae:	e005      	b.n	80004bc <ParseFrameHandler+0x158>
		default:
			break;
 80004b0:	bf00      	nop
 80004b2:	e004      	b.n	80004be <ParseFrameHandler+0x15a>
			break;
 80004b4:	bf00      	nop
 80004b6:	e002      	b.n	80004be <ParseFrameHandler+0x15a>
			break;
 80004b8:	bf00      	nop
 80004ba:	e000      	b.n	80004be <ParseFrameHandler+0x15a>
			break;
 80004bc:	bf00      	nop
	}

}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000200 	.word	0x20000200

080004cc <HandlerDeviceAction>:
extern int8_t validHeartRate; // indicator to show if the heart rate calculation is valid

//
extern uint8_t startToCalculate;
void HandlerDeviceAction(uint8_t CMD, uint8_t buffer_len, uint8_t *buffer)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b0c6      	sub	sp, #280	@ 0x118
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80004d6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80004e0:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80004e4:	4602      	mov	r2, r0
 80004e6:	701a      	strb	r2, [r3, #0]
 80004e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80004ec:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 80004f0:	460a      	mov	r2, r1
 80004f2:	701a      	strb	r2, [r3, #0]
	uint8_t devID = CMD & 0x7Fu;
 80004f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80004f8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000502:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
	uint8_t mode = CMD >> 7;
 8000506:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800050a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	09db      	lsrs	r3, r3, #7
 8000512:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
	if(mode == DEV_W_MOD)
 8000516:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800051a:	2b00      	cmp	r3, #0
 800051c:	d127      	bne.n	800056e <HandlerDeviceAction+0xa2>
	{
		switch (devID) {
 800051e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000522:	2b00      	cmp	r3, #0
 8000524:	d002      	beq.n	800052c <HandlerDeviceAction+0x60>
 8000526:	2b01      	cmp	r3, #1
 8000528:	d014      	beq.n	8000554 <HandlerDeviceAction+0x88>
		case DEV_1_ID:
			HAL_GPIO_WritePin(DEV_1_PORT, DEV_1_PIN, buffer[0]);

			break;
		default:
			break;
 800052a:	e055      	b.n	80005d8 <HandlerDeviceAction+0x10c>
			startToCalculate = *buffer;
 800052c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000530:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	781a      	ldrb	r2, [r3, #0]
 8000538:	4b2a      	ldr	r3, [pc, #168]	@ (80005e4 <HandlerDeviceAction+0x118>)
 800053a:	701a      	strb	r2, [r3, #0]
			USART_Transmit(&USART_handler, "\r\nReceive start: %d", *buffer);
 800053c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000540:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	4927      	ldr	r1, [pc, #156]	@ (80005e8 <HandlerDeviceAction+0x11c>)
 800054c:	4827      	ldr	r0, [pc, #156]	@ (80005ec <HandlerDeviceAction+0x120>)
 800054e:	f002 f833 	bl	80025b8 <USART_Transmit>
			break;
 8000552:	e041      	b.n	80005d8 <HandlerDeviceAction+0x10c>
			HAL_GPIO_WritePin(DEV_1_PORT, DEV_1_PIN, buffer[0]);
 8000554:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000558:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	461a      	mov	r2, r3
 8000562:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000566:	4822      	ldr	r0, [pc, #136]	@ (80005f0 <HandlerDeviceAction+0x124>)
 8000568:	f002 fcd4 	bl	8002f14 <HAL_GPIO_WritePin>
			break;
 800056c:	e034      	b.n	80005d8 <HandlerDeviceAction+0x10c>

	}
	else
	{
		//
		uint8_t pData[FP_F_MAX_LEN], pLen = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
		uint8_t pIndex = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	f887 3114 	strb.w	r3, [r7, #276]	@ 0x114
		// | H1 | H2 |
		pData[pIndex++] = FP_H1; pData[pIndex++] = FP_H2;
 800057a:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 800057e:	1c5a      	adds	r2, r3, #1
 8000580:	f887 2114 	strb.w	r2, [r7, #276]	@ 0x114
 8000584:	461a      	mov	r2, r3
 8000586:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800058a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800058e:	21ab      	movs	r1, #171	@ 0xab
 8000590:	5499      	strb	r1, [r3, r2]
 8000592:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	f887 2114 	strb.w	r2, [r7, #276]	@ 0x114
 800059c:	461a      	mov	r2, r3
 800059e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80005a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80005a6:	21cd      	movs	r1, #205	@ 0xcd
 80005a8:	5499      	strb	r1, [r3, r2]
		pData[pIndex++] = devID; // | CMD |
 80005aa:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 80005ae:	1c5a      	adds	r2, r3, #1
 80005b0:	f887 2114 	strb.w	r2, [r7, #276]	@ 0x114
 80005b4:	4619      	mov	r1, r3
 80005b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80005ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80005be:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 80005c2:	545a      	strb	r2, [r3, r1]
		//
		switch (devID) {
 80005c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d002      	beq.n	80005d2 <HandlerDeviceAction+0x106>
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d002      	beq.n	80005d6 <HandlerDeviceAction+0x10a>
		{

			break;
		}
		default:
			break;
 80005d0:	e002      	b.n	80005d8 <HandlerDeviceAction+0x10c>
			break;
 80005d2:	bf00      	nop
 80005d4:	e000      	b.n	80005d8 <HandlerDeviceAction+0x10c>
			break;
 80005d6:	bf00      	nop
//		if(pLen)
//		{
//			HAL_UART_Transmit(&huart4, pData, pLen, 100);
//		}
	}
}
 80005d8:	bf00      	nop
 80005da:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000204 	.word	0x20000204
 80005e8:	08005ec0 	.word	0x08005ec0
 80005ec:	200004b0 	.word	0x200004b0
 80005f0:	40010c00 	.word	0x40010c00

080005f4 <HandleDeviceSendFrame>:

void HandleDeviceSendFrame(uint8_t devID, uint8_t buffer_len, uint8_t *buffer)
{
 80005f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005f8:	b0c9      	sub	sp, #292	@ 0x124
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000600:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800060a:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800060e:	4602      	mov	r2, r0
 8000610:	701a      	strb	r2, [r3, #0]
 8000612:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000616:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800061a:	460a      	mov	r2, r1
 800061c:	701a      	strb	r2, [r3, #0]
	uint8_t pData[FP_F_MAX_LEN], pLen = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	uint8_t pIndex = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
	// | H1 | H2 |
	pData[pIndex++] = FP_H1; pData[pIndex++] = FP_H2;
 800062a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800062e:	1c5a      	adds	r2, r3, #1
 8000630:	f887 211e 	strb.w	r2, [r7, #286]	@ 0x11e
 8000634:	461a      	mov	r2, r3
 8000636:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800063a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800063e:	21ab      	movs	r1, #171	@ 0xab
 8000640:	5499      	strb	r1, [r3, r2]
 8000642:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	f887 211e 	strb.w	r2, [r7, #286]	@ 0x11e
 800064c:	461a      	mov	r2, r3
 800064e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000652:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000656:	21cd      	movs	r1, #205	@ 0xcd
 8000658:	5499      	strb	r1, [r3, r2]
	pData[pIndex++] = devID; // | CMD |
 800065a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	f887 211e 	strb.w	r2, [r7, #286]	@ 0x11e
 8000664:	4619      	mov	r1, r3
 8000666:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800066a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800066e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000672:	f2a2 1219 	subw	r2, r2, #281	@ 0x119
 8000676:	7812      	ldrb	r2, [r2, #0]
 8000678:	545a      	strb	r2, [r3, r1]

	switch (devID) {
 800067a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800067e:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	f040 80b9 	bne.w	80007fc <HandleDeviceSendFrame+0x208>
		case DEV_0_ID:
			//
			pLen = FP_F_LEN(buffer_len);
 800068a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800068e:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	3308      	adds	r3, #8
 8000696:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
			pData[pIndex++] = buffer_len; // | DATA LEN |
 800069a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	f887 211e 	strb.w	r2, [r7, #286]	@ 0x11e
 80006a4:	4619      	mov	r1, r3
 80006a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80006aa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80006ae:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80006b2:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 80006b6:	7812      	ldrb	r2, [r2, #0]
 80006b8:	545a      	strb	r2, [r3, r1]

			//
			uint8_t DATA[buffer_len];
 80006ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80006be:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80006c2:	7819      	ldrb	r1, [r3, #0]
 80006c4:	466b      	mov	r3, sp
 80006c6:	461e      	mov	r6, r3
 80006c8:	460b      	mov	r3, r1
 80006ca:	3b01      	subs	r3, #1
 80006cc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80006d0:	b2cb      	uxtb	r3, r1
 80006d2:	2200      	movs	r2, #0
 80006d4:	4698      	mov	r8, r3
 80006d6:	4691      	mov	r9, r2
 80006d8:	f04f 0200 	mov.w	r2, #0
 80006dc:	f04f 0300 	mov.w	r3, #0
 80006e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80006e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80006e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80006ec:	b2cb      	uxtb	r3, r1
 80006ee:	2200      	movs	r2, #0
 80006f0:	461c      	mov	r4, r3
 80006f2:	4615      	mov	r5, r2
 80006f4:	f04f 0200 	mov.w	r2, #0
 80006f8:	f04f 0300 	mov.w	r3, #0
 80006fc:	00eb      	lsls	r3, r5, #3
 80006fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000702:	00e2      	lsls	r2, r4, #3
 8000704:	460b      	mov	r3, r1
 8000706:	3307      	adds	r3, #7
 8000708:	08db      	lsrs	r3, r3, #3
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	ebad 0d03 	sub.w	sp, sp, r3
 8000710:	466b      	mov	r3, sp
 8000712:	3300      	adds	r3, #0
 8000714:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
			for(uint8_t i = 0;i < buffer_len;i++)
 8000718:	2300      	movs	r3, #0
 800071a:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 800071e:	e012      	b.n	8000746 <HandleDeviceSendFrame+0x152>
				DATA[i] = buffer[i];
 8000720:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000724:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000728:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800072c:	6812      	ldr	r2, [r2, #0]
 800072e:	441a      	add	r2, r3
 8000730:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000734:	7811      	ldrb	r1, [r2, #0]
 8000736:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800073a:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0;i < buffer_len;i++)
 800073c:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000740:	3301      	adds	r3, #1
 8000742:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000746:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800074a:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800074e:	f897 211d 	ldrb.w	r2, [r7, #285]	@ 0x11d
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d3e3      	bcc.n	8000720 <HandleDeviceSendFrame+0x12c>

			//
			for(uint8_t i = 0;i < buffer_len;i++)
 8000758:	2300      	movs	r3, #0
 800075a:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 800075e:	e014      	b.n	800078a <HandleDeviceSendFrame+0x196>
			{
				//				(DATA & (0xFF << i)) >> i; // | DATA |
				pData[pIndex++] = DATA[i];
 8000760:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 8000764:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000768:	1c59      	adds	r1, r3, #1
 800076a:	f887 111e 	strb.w	r1, [r7, #286]	@ 0x11e
 800076e:	4619      	mov	r1, r3
 8000770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000774:	5c9a      	ldrb	r2, [r3, r2]
 8000776:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800077a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800077e:	545a      	strb	r2, [r3, r1]
			for(uint8_t i = 0;i < buffer_len;i++)
 8000780:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8000784:	3301      	adds	r3, #1
 8000786:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 800078a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800078e:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000792:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	429a      	cmp	r2, r3
 800079a:	d3e1      	bcc.n	8000760 <HandleDeviceSendFrame+0x16c>
			}

			//
			pData[pIndex++] = FP_T1; pData[pIndex++] = FP_T2; // | T1 | T2 |
 800079c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	f887 211e 	strb.w	r2, [r7, #286]	@ 0x11e
 80007a6:	461a      	mov	r2, r3
 80007a8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007ac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80007b0:	21e1      	movs	r1, #225	@ 0xe1
 80007b2:	5499      	strb	r1, [r3, r2]
 80007b4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	f887 211e 	strb.w	r2, [r7, #286]	@ 0x11e
 80007be:	461a      	mov	r2, r3
 80007c0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007c4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80007c8:	21e2      	movs	r1, #226	@ 0xe2
 80007ca:	5499      	strb	r1, [r3, r2]

			// | CRC |
			uint16_t *pCRC = (uint16_t*)(pData + pIndex);
 80007cc:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80007d0:	f107 0208 	add.w	r2, r7, #8
 80007d4:	4413      	add	r3, r2
 80007d6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
			*pCRC = Compute_CRC16(DATA, buffer_len);
 80007da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007de:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80007ea:	f7ff fd1b 	bl	8000224 <Compute_CRC16>
 80007ee:	4603      	mov	r3, r0
 80007f0:	461a      	mov	r2, r3
 80007f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80007f6:	801a      	strh	r2, [r3, #0]

			break;
 80007f8:	bf00      	nop
 80007fa:	46b5      	mov	sp, r6
//		default:
//			break;
	}

	//
	if(pLen)
 80007fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000800:	2b00      	cmp	r3, #0
 8000802:	d009      	beq.n	8000818 <HandleDeviceSendFrame+0x224>
	{
		HAL_UART_Transmit(&huart4, pData, pLen, 2000);
 8000804:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000808:	b29a      	uxth	r2, r3
 800080a:	f107 0108 	add.w	r1, r7, #8
 800080e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000812:	4804      	ldr	r0, [pc, #16]	@ (8000824 <HandleDeviceSendFrame+0x230>)
 8000814:	f004 f864 	bl	80048e0 <HAL_UART_Transmit>
	}
}
 8000818:	bf00      	nop
 800081a:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800081e:	46bd      	mov	sp, r7
 8000820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000824:	200002d4 	.word	0x200002d4

08000828 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	// huart 4
	//	if(*huart == &huart4)
	//	{
	uint8_t rx = huart->Instance->DR;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	73fb      	strb	r3, [r7, #15]

	// put new char into buffer from UART
	RxBuf[RxHead] = rx;
 8000838:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <HAL_UART_RxCpltCallback+0x48>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	490d      	ldr	r1, [pc, #52]	@ (8000874 <HAL_UART_RxCpltCallback+0x4c>)
 800083e:	7bfa      	ldrb	r2, [r7, #15]
 8000840:	54ca      	strb	r2, [r1, r3]

	if ((++RxHead) > (RXBUFSIZE-1))
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <HAL_UART_RxCpltCallback+0x48>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	3301      	adds	r3, #1
 8000848:	4a09      	ldr	r2, [pc, #36]	@ (8000870 <HAL_UART_RxCpltCallback+0x48>)
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <HAL_UART_RxCpltCallback+0x48>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000854:	db02      	blt.n	800085c <HAL_UART_RxCpltCallback+0x34>
	{
		RxHead = 0;
 8000856:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <HAL_UART_RxCpltCallback+0x48>)
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
	}

	//
	HAL_UART_Receive_IT(&huart4, &receive_data, 1);
 800085c:	2201      	movs	r2, #1
 800085e:	4906      	ldr	r1, [pc, #24]	@ (8000878 <HAL_UART_RxCpltCallback+0x50>)
 8000860:	4806      	ldr	r0, [pc, #24]	@ (800087c <HAL_UART_RxCpltCallback+0x54>)
 8000862:	f004 f8c8 	bl	80049f6 <HAL_UART_Receive_IT>
	//	    if(rx == 0xE2u)
	//	    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);

	//	}

}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000d78 	.word	0x20000d78
 8000874:	20000978 	.word	0x20000978
 8000878:	20000364 	.word	0x20000364
 800087c:	200002d4 	.word	0x200002d4

08000880 <Handle_UART_FP>:

void Handle_UART_FP()
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
	if(FrameParse.FP_MOD != DECT_COML)
 8000886:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <Handle_UART_FP+0x44>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b05      	cmp	r3, #5
 800088c:	d009      	beq.n	80008a2 <Handle_UART_FP+0x22>
	{
		uint8_t __char = _getchar();
 800088e:	f001 fe21 	bl	80024d4 <_getchar>
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
		ParseFrameHandler(&FrameParse, __char);
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	4619      	mov	r1, r3
 800089a:	480a      	ldr	r0, [pc, #40]	@ (80008c4 <Handle_UART_FP+0x44>)
 800089c:	f7ff fd62 	bl	8000364 <ParseFrameHandler>
		HandlerDeviceAction(FrameParse._CMD,
				FrameParse.buffer.len,
				FrameParse.buffer.data);
		FP_Init(&FrameParse);
	}
}
 80008a0:	e00b      	b.n	80008ba <Handle_UART_FP+0x3a>
		HandlerDeviceAction(FrameParse._CMD,
 80008a2:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <Handle_UART_FP+0x44>)
 80008a4:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80008a8:	4a06      	ldr	r2, [pc, #24]	@ (80008c4 <Handle_UART_FP+0x44>)
 80008aa:	7911      	ldrb	r1, [r2, #4]
 80008ac:	4a06      	ldr	r2, [pc, #24]	@ (80008c8 <Handle_UART_FP+0x48>)
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fe0c 	bl	80004cc <HandlerDeviceAction>
		FP_Init(&FrameParse);
 80008b4:	4803      	ldr	r0, [pc, #12]	@ (80008c4 <Handle_UART_FP+0x44>)
 80008b6:	f7ff fd0b 	bl	80002d0 <FP_Init>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000368 	.word	0x20000368
 80008c8:	2000036d 	.word	0x2000036d

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b08d      	sub	sp, #52	@ 0x34
 80008d0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d2:	f001 feb5 	bl	8002640 <HAL_Init>

  /* USER CODE BEGIN Init */
	FP_Init(&FrameParse);
 80008d6:	4893      	ldr	r0, [pc, #588]	@ (8000b24 <main+0x258>)
 80008d8:	f7ff fcfa 	bl	80002d0 <FP_Init>
	MAX30105_Init(&particleSensor, &hi2c2);
 80008dc:	4992      	ldr	r1, [pc, #584]	@ (8000b28 <main+0x25c>)
 80008de:	4893      	ldr	r0, [pc, #588]	@ (8000b2c <main+0x260>)
 80008e0:	f000 face 	bl	8000e80 <MAX30105_Init>
	USART_Init(&USART_handler, &huart1);
 80008e4:	4992      	ldr	r1, [pc, #584]	@ (8000b30 <main+0x264>)
 80008e6:	4893      	ldr	r0, [pc, #588]	@ (8000b34 <main+0x268>)
 80008e8:	f001 fe20 	bl	800252c <USART_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ec:	f000 f946 	bl	8000b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f0:	f000 fa0c 	bl	8000d0c <MX_GPIO_Init>
  MX_UART4_Init();
 80008f4:	f000 f9b6 	bl	8000c64 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80008f8:	f000 f9de 	bl	8000cb8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80008fc:	f000 f984 	bl	8000c08 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	// Initialize sensor
	if(!MAX30105_begin(&particleSensor, MAX30105_ADDRESS))
 8000900:	21ae      	movs	r1, #174	@ 0xae
 8000902:	488a      	ldr	r0, [pc, #552]	@ (8000b2c <main+0x260>)
 8000904:	f000 fad9 	bl	8000eba <MAX30105_begin>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d101      	bne.n	8000912 <main+0x46>
	{
		//MAX30105 was not found. Please check wiring/power.
		while(1);
 800090e:	bf00      	nop
 8000910:	e7fd      	b.n	800090e <main+0x42>
	}

	uint8_t ledBrightness = 60; // Options: 0=Off to 255=50mA
 8000912:	233c      	movs	r3, #60	@ 0x3c
 8000914:	77bb      	strb	r3, [r7, #30]
	uint8_t sampleAverage = 4;  // Options: 1, 2, 4, 8, 16, 32
 8000916:	2304      	movs	r3, #4
 8000918:	777b      	strb	r3, [r7, #29]
	uint8_t ledMode = 2;        // Options: 1 = Red only, 2 = Red + IR, 3 = Red + IR + Green
 800091a:	2302      	movs	r3, #2
 800091c:	773b      	strb	r3, [r7, #28]
	uint8_t sampleRate = 100;   // Options: 50, 100, 200, 400, 800, 1000, 1600, 3200
 800091e:	2364      	movs	r3, #100	@ 0x64
 8000920:	76fb      	strb	r3, [r7, #27]
	int pulseWidth = 411;    // Options: 69, 118, 215, 411
 8000922:	f240 139b 	movw	r3, #411	@ 0x19b
 8000926:	617b      	str	r3, [r7, #20]
	int adcRange = 4096;     // Options: 2048, 4096, 8192, 16384
 8000928:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800092c:	613b      	str	r3, [r7, #16]

	MAX30105_setup(&particleSensor, ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); // Configure sensor with these settings
 800092e:	7efb      	ldrb	r3, [r7, #27]
 8000930:	7f3c      	ldrb	r4, [r7, #28]
 8000932:	7f78      	ldrb	r0, [r7, #29]
 8000934:	7fb9      	ldrb	r1, [r7, #30]
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	9202      	str	r2, [sp, #8]
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	9201      	str	r2, [sp, #4]
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	4623      	mov	r3, r4
 8000942:	4602      	mov	r2, r0
 8000944:	4879      	ldr	r0, [pc, #484]	@ (8000b2c <main+0x260>)
 8000946:	f000 fe66 	bl	8001616 <MAX30105_setup>

	//
	HAL_UART_Receive_IT(&huart4, &receive_data, 1);
 800094a:	2201      	movs	r2, #1
 800094c:	497a      	ldr	r1, [pc, #488]	@ (8000b38 <main+0x26c>)
 800094e:	487b      	ldr	r0, [pc, #492]	@ (8000b3c <main+0x270>)
 8000950:	f004 f851 	bl	80049f6 <HAL_UART_Receive_IT>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(RxTail != RxHead || FrameParse.FP_MOD == DECT_COML)
 8000954:	4b7a      	ldr	r3, [pc, #488]	@ (8000b40 <main+0x274>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b7a      	ldr	r3, [pc, #488]	@ (8000b44 <main+0x278>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	429a      	cmp	r2, r3
 800095e:	d103      	bne.n	8000968 <main+0x9c>
 8000960:	4b70      	ldr	r3, [pc, #448]	@ (8000b24 <main+0x258>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b05      	cmp	r3, #5
 8000966:	d102      	bne.n	800096e <main+0xa2>
			Handle_UART_FP();
 8000968:	f7ff ff8a 	bl	8000880 <Handle_UART_FP>
 800096c:	e0d9      	b.n	8000b22 <main+0x256>
		else

			if(startToCalculate)
 800096e:	4b76      	ldr	r3, [pc, #472]	@ (8000b48 <main+0x27c>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d0ee      	beq.n	8000954 <main+0x88>
			{
				uint8_t pData[DEV_0_DT_LEN];
				//		bufferLength = 100; // buffer length of 100 stores 4 seconds of samples running at 25sps
				// read the first 100 samples, and determine the signal range
				for (uint8_t i = 0 ; i < (ledsBufferLength - 1); i++)
 8000976:	2300      	movs	r3, #0
 8000978:	77fb      	strb	r3, [r7, #31]
 800097a:	e048      	b.n	8000a0e <main+0x142>
				{
					while (!MAX30105_available(&particleSensor)) // do we have new data?
						MAX30105_check(&particleSensor);		// Check the sensor for new data
 800097c:	486b      	ldr	r0, [pc, #428]	@ (8000b2c <main+0x260>)
 800097e:	f000 fc17 	bl	80011b0 <MAX30105_check>
					while (!MAX30105_available(&particleSensor)) // do we have new data?
 8000982:	486a      	ldr	r0, [pc, #424]	@ (8000b2c <main+0x260>)
 8000984:	f000 fd48 	bl	8001418 <MAX30105_available>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d0f6      	beq.n	800097c <main+0xb0>

					redBuffer[i] = MAX30105_getRed(&particleSensor);
 800098e:	4867      	ldr	r0, [pc, #412]	@ (8000b2c <main+0x260>)
 8000990:	f000 faae 	bl	8000ef0 <MAX30105_getRed>
 8000994:	4602      	mov	r2, r0
 8000996:	7ffb      	ldrb	r3, [r7, #31]
 8000998:	b291      	uxth	r1, r2
 800099a:	4a6c      	ldr	r2, [pc, #432]	@ (8000b4c <main+0x280>)
 800099c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					irBuffer[i] = MAX30105_getIR(&particleSensor);
 80009a0:	4862      	ldr	r0, [pc, #392]	@ (8000b2c <main+0x260>)
 80009a2:	f000 fabe 	bl	8000f22 <MAX30105_getIR>
 80009a6:	4602      	mov	r2, r0
 80009a8:	7ffb      	ldrb	r3, [r7, #31]
 80009aa:	b291      	uxth	r1, r2
 80009ac:	4a68      	ldr	r2, [pc, #416]	@ (8000b50 <main+0x284>)
 80009ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					MAX30105_nextSample(&particleSensor); // We're finished with this sample so move to next sample
 80009b2:	485e      	ldr	r0, [pc, #376]	@ (8000b2c <main+0x260>)
 80009b4:	f000 fd4b 	bl	800144e <MAX30105_nextSample>
					USART_Transmit(&USART_handler, "\r\nred = %d, i = %d", redBuffer[i], i);
 80009b8:	7ffb      	ldrb	r3, [r7, #31]
 80009ba:	4a64      	ldr	r2, [pc, #400]	@ (8000b4c <main+0x280>)
 80009bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009c0:	461a      	mov	r2, r3
 80009c2:	7ffb      	ldrb	r3, [r7, #31]
 80009c4:	4963      	ldr	r1, [pc, #396]	@ (8000b54 <main+0x288>)
 80009c6:	485b      	ldr	r0, [pc, #364]	@ (8000b34 <main+0x268>)
 80009c8:	f001 fdf6 	bl	80025b8 <USART_Transmit>
					USART_Transmit(&USART_handler, ", ir = %d", irBuffer[i]);
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	4a60      	ldr	r2, [pc, #384]	@ (8000b50 <main+0x284>)
 80009d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4960      	ldr	r1, [pc, #384]	@ (8000b58 <main+0x28c>)
 80009d8:	4856      	ldr	r0, [pc, #344]	@ (8000b34 <main+0x268>)
 80009da:	f001 fded 	bl	80025b8 <USART_Transmit>

					//
					*((uint16_t*)pData + 0) = redBuffer[i];
 80009de:	7ffa      	ldrb	r2, [r7, #31]
 80009e0:	463b      	mov	r3, r7
 80009e2:	495a      	ldr	r1, [pc, #360]	@ (8000b4c <main+0x280>)
 80009e4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80009e8:	801a      	strh	r2, [r3, #0]
					*((uint16_t*)pData + 1) = irBuffer[i];
 80009ea:	7ffa      	ldrb	r2, [r7, #31]
 80009ec:	463b      	mov	r3, r7
 80009ee:	3302      	adds	r3, #2
 80009f0:	4957      	ldr	r1, [pc, #348]	@ (8000b50 <main+0x284>)
 80009f2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80009f6:	801a      	strh	r2, [r3, #0]
//					*((uint32_t*)pData + 1) = spo2;
//					*((uint32_t*)pData + 2) = heartRate;
					pData[5] = i; // sychronize, eliminate 8 bytes SPO2 and HR
 80009f8:	7ffb      	ldrb	r3, [r7, #31]
 80009fa:	717b      	strb	r3, [r7, #5]
					//				HandlerDeviceAction(0x00, DEV_0_DT_LEN, pData);
					HandleDeviceSendFrame(0x00, DEV_0_DT_LEN - 8, pData);
 80009fc:	463b      	mov	r3, r7
 80009fe:	461a      	mov	r2, r3
 8000a00:	2105      	movs	r1, #5
 8000a02:	2000      	movs	r0, #0
 8000a04:	f7ff fdf6 	bl	80005f4 <HandleDeviceSendFrame>
				for (uint8_t i = 0 ; i < (ledsBufferLength - 1); i++)
 8000a08:	7ffb      	ldrb	r3, [r7, #31]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	77fb      	strb	r3, [r7, #31]
 8000a0e:	7ffa      	ldrb	r2, [r7, #31]
 8000a10:	2364      	movs	r3, #100	@ 0x64
 8000a12:	3b01      	subs	r3, #1
 8000a14:	429a      	cmp	r2, r3
 8000a16:	dbb4      	blt.n	8000982 <main+0xb6>
				}

				// in 100th
				while (!MAX30105_available(&particleSensor)) // do we have new data?
 8000a18:	e002      	b.n	8000a20 <main+0x154>
					MAX30105_check(&particleSensor);		// Check the sensor for new data
 8000a1a:	4844      	ldr	r0, [pc, #272]	@ (8000b2c <main+0x260>)
 8000a1c:	f000 fbc8 	bl	80011b0 <MAX30105_check>
				while (!MAX30105_available(&particleSensor)) // do we have new data?
 8000a20:	4842      	ldr	r0, [pc, #264]	@ (8000b2c <main+0x260>)
 8000a22:	f000 fcf9 	bl	8001418 <MAX30105_available>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d0f6      	beq.n	8000a1a <main+0x14e>

				redBuffer[ledsBufferLength - 1] = MAX30105_getRed(&particleSensor);
 8000a2c:	483f      	ldr	r0, [pc, #252]	@ (8000b2c <main+0x260>)
 8000a2e:	f000 fa5f 	bl	8000ef0 <MAX30105_getRed>
 8000a32:	4602      	mov	r2, r0
 8000a34:	2364      	movs	r3, #100	@ 0x64
 8000a36:	3b01      	subs	r3, #1
 8000a38:	b291      	uxth	r1, r2
 8000a3a:	4a44      	ldr	r2, [pc, #272]	@ (8000b4c <main+0x280>)
 8000a3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				irBuffer[ledsBufferLength - 1] = MAX30105_getIR(&particleSensor);
 8000a40:	483a      	ldr	r0, [pc, #232]	@ (8000b2c <main+0x260>)
 8000a42:	f000 fa6e 	bl	8000f22 <MAX30105_getIR>
 8000a46:	4602      	mov	r2, r0
 8000a48:	2364      	movs	r3, #100	@ 0x64
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	b291      	uxth	r1, r2
 8000a4e:	4a40      	ldr	r2, [pc, #256]	@ (8000b50 <main+0x284>)
 8000a50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				MAX30105_nextSample(&particleSensor); // We're finished with this sample so move to next sample
 8000a54:	4835      	ldr	r0, [pc, #212]	@ (8000b2c <main+0x260>)
 8000a56:	f000 fcfa 	bl	800144e <MAX30105_nextSample>
				//calculate heart rate and SpO2 after first 100 samples (first 4 seconds of samples)
				maxim_heart_rate_and_oxygen_saturation(irBuffer, ledsBufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
 8000a5a:	2164      	movs	r1, #100	@ 0x64
 8000a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b5c <main+0x290>)
 8000a5e:	9302      	str	r3, [sp, #8]
 8000a60:	4b3f      	ldr	r3, [pc, #252]	@ (8000b60 <main+0x294>)
 8000a62:	9301      	str	r3, [sp, #4]
 8000a64:	4b3f      	ldr	r3, [pc, #252]	@ (8000b64 <main+0x298>)
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	4b3f      	ldr	r3, [pc, #252]	@ (8000b68 <main+0x29c>)
 8000a6a:	4a38      	ldr	r2, [pc, #224]	@ (8000b4c <main+0x280>)
 8000a6c:	4838      	ldr	r0, [pc, #224]	@ (8000b50 <main+0x284>)
 8000a6e:	f000 ff19 	bl	80018a4 <maxim_heart_rate_and_oxygen_saturation>

				USART_Transmit(&USART_handler, "\r\nred = %d, i = %d", redBuffer[ledsBufferLength - 1], ledsBufferLength - 1);
 8000a72:	2364      	movs	r3, #100	@ 0x64
 8000a74:	3b01      	subs	r3, #1
 8000a76:	4a35      	ldr	r2, [pc, #212]	@ (8000b4c <main+0x280>)
 8000a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	2364      	movs	r3, #100	@ 0x64
 8000a80:	3b01      	subs	r3, #1
 8000a82:	4934      	ldr	r1, [pc, #208]	@ (8000b54 <main+0x288>)
 8000a84:	482b      	ldr	r0, [pc, #172]	@ (8000b34 <main+0x268>)
 8000a86:	f001 fd97 	bl	80025b8 <USART_Transmit>
				USART_Transmit(&USART_handler, ", ir = %d", irBuffer[ledsBufferLength - 1]);
 8000a8a:	2364      	movs	r3, #100	@ 0x64
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	4a30      	ldr	r2, [pc, #192]	@ (8000b50 <main+0x284>)
 8000a90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4930      	ldr	r1, [pc, #192]	@ (8000b58 <main+0x28c>)
 8000a98:	4826      	ldr	r0, [pc, #152]	@ (8000b34 <main+0x268>)
 8000a9a:	f001 fd8d 	bl	80025b8 <USART_Transmit>
				USART_Transmit(&USART_handler, ", HR = %d", heartRate);
 8000a9e:	4b30      	ldr	r3, [pc, #192]	@ (8000b60 <main+0x294>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4931      	ldr	r1, [pc, #196]	@ (8000b6c <main+0x2a0>)
 8000aa6:	4823      	ldr	r0, [pc, #140]	@ (8000b34 <main+0x268>)
 8000aa8:	f001 fd86 	bl	80025b8 <USART_Transmit>
				USART_Transmit(&USART_handler, ", HRvalid = %d", validHeartRate);
 8000aac:	4b2b      	ldr	r3, [pc, #172]	@ (8000b5c <main+0x290>)
 8000aae:	f993 3000 	ldrsb.w	r3, [r3]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	492e      	ldr	r1, [pc, #184]	@ (8000b70 <main+0x2a4>)
 8000ab6:	481f      	ldr	r0, [pc, #124]	@ (8000b34 <main+0x268>)
 8000ab8:	f001 fd7e 	bl	80025b8 <USART_Transmit>
				USART_Transmit(&USART_handler, ", SPO2 = %d", spo2);
 8000abc:	4b2a      	ldr	r3, [pc, #168]	@ (8000b68 <main+0x29c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	492c      	ldr	r1, [pc, #176]	@ (8000b74 <main+0x2a8>)
 8000ac4:	481b      	ldr	r0, [pc, #108]	@ (8000b34 <main+0x268>)
 8000ac6:	f001 fd77 	bl	80025b8 <USART_Transmit>
				USART_Transmit(&USART_handler, ", SPO2Valid = %d", validSPO2);
 8000aca:	4b26      	ldr	r3, [pc, #152]	@ (8000b64 <main+0x298>)
 8000acc:	f993 3000 	ldrsb.w	r3, [r3]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4929      	ldr	r1, [pc, #164]	@ (8000b78 <main+0x2ac>)
 8000ad4:	4817      	ldr	r0, [pc, #92]	@ (8000b34 <main+0x268>)
 8000ad6:	f001 fd6f 	bl	80025b8 <USART_Transmit>

				//
				*((uint16_t*)pData + 0) = redBuffer[ledsBufferLength - 1];
 8000ada:	2364      	movs	r3, #100	@ 0x64
 8000adc:	1e5a      	subs	r2, r3, #1
 8000ade:	463b      	mov	r3, r7
 8000ae0:	491a      	ldr	r1, [pc, #104]	@ (8000b4c <main+0x280>)
 8000ae2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000ae6:	801a      	strh	r2, [r3, #0]
				*((uint16_t*)pData + 1) = irBuffer[ledsBufferLength - 1];
 8000ae8:	2364      	movs	r3, #100	@ 0x64
 8000aea:	1e5a      	subs	r2, r3, #1
 8000aec:	463b      	mov	r3, r7
 8000aee:	3302      	adds	r3, #2
 8000af0:	4917      	ldr	r1, [pc, #92]	@ (8000b50 <main+0x284>)
 8000af2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000af6:	801a      	strh	r2, [r3, #0]
				*((uint32_t*)pData + 1) = spo2;
 8000af8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b68 <main+0x29c>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	463b      	mov	r3, r7
 8000afe:	3304      	adds	r3, #4
 8000b00:	601a      	str	r2, [r3, #0]
				*((uint32_t*)pData + 2) = heartRate;
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <main+0x294>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	463b      	mov	r3, r7
 8000b08:	3308      	adds	r3, #8
 8000b0a:	601a      	str	r2, [r3, #0]
				pData[DEV_0_DT_LEN - 1] = ledsBufferLength - 1; // sychronize
 8000b0c:	2364      	movs	r3, #100	@ 0x64
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	3b01      	subs	r3, #1
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	733b      	strb	r3, [r7, #12]
				//			HandlerDeviceAction(0x00, DEV_0_DT_LEN, pData);
				HandleDeviceSendFrame(0x00, DEV_0_DT_LEN, pData);
 8000b16:	463b      	mov	r3, r7
 8000b18:	461a      	mov	r2, r3
 8000b1a:	210d      	movs	r1, #13
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fd69 	bl	80005f4 <HandleDeviceSendFrame>
		if(RxTail != RxHead || FrameParse.FP_MOD == DECT_COML)
 8000b22:	e717      	b.n	8000954 <main+0x88>
 8000b24:	20000368 	.word	0x20000368
 8000b28:	20000280 	.word	0x20000280
 8000b2c:	20000474 	.word	0x20000474
 8000b30:	2000031c 	.word	0x2000031c
 8000b34:	200004b0 	.word	0x200004b0
 8000b38:	20000364 	.word	0x20000364
 8000b3c:	200002d4 	.word	0x200002d4
 8000b40:	20000d7c 	.word	0x20000d7c
 8000b44:	20000d78 	.word	0x20000d78
 8000b48:	20000204 	.word	0x20000204
 8000b4c:	2000057c 	.word	0x2000057c
 8000b50:	200004b4 	.word	0x200004b4
 8000b54:	08005ed4 	.word	0x08005ed4
 8000b58:	08005ee8 	.word	0x08005ee8
 8000b5c:	20000650 	.word	0x20000650
 8000b60:	2000064c 	.word	0x2000064c
 8000b64:	20000648 	.word	0x20000648
 8000b68:	20000644 	.word	0x20000644
 8000b6c:	08005ef4 	.word	0x08005ef4
 8000b70:	08005f00 	.word	0x08005f00
 8000b74:	08005f10 	.word	0x08005f10
 8000b78:	08005f1c 	.word	0x08005f1c

08000b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b090      	sub	sp, #64	@ 0x40
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	f107 0318 	add.w	r3, r7, #24
 8000b86:	2228      	movs	r2, #40	@ 0x28
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f004 fcfc 	bl	8005588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ba6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bac:	2301      	movs	r3, #1
 8000bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bba:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc0:	f107 0318 	add.w	r3, r7, #24
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 fa2b 	bl	8004020 <HAL_RCC_OscConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000bd0:	f000 f90a 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000be4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2102      	movs	r1, #2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f003 fc98 	bl	8004524 <HAL_RCC_ClockConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bfa:	f000 f8f5 	bl	8000de8 <Error_Handler>
  }
}
 8000bfe:	bf00      	nop
 8000c00:	3740      	adds	r7, #64	@ 0x40
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <MX_I2C2_Init+0x50>)
 8000c0e:	4a13      	ldr	r2, [pc, #76]	@ (8000c5c <MX_I2C2_Init+0x54>)
 8000c10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000c12:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <MX_I2C2_Init+0x50>)
 8000c14:	4a12      	ldr	r2, [pc, #72]	@ (8000c60 <MX_I2C2_Init+0x58>)
 8000c16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <MX_I2C2_Init+0x50>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <MX_I2C2_Init+0x50>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <MX_I2C2_Init+0x50>)
 8000c26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c2a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <MX_I2C2_Init+0x50>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <MX_I2C2_Init+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c38:	4b07      	ldr	r3, [pc, #28]	@ (8000c58 <MX_I2C2_Init+0x50>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <MX_I2C2_Init+0x50>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	@ (8000c58 <MX_I2C2_Init+0x50>)
 8000c46:	f002 f99f 	bl	8002f88 <HAL_I2C_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c50:	f000 f8ca 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000280 	.word	0x20000280
 8000c5c:	40005800 	.word	0x40005800
 8000c60:	00061a80 	.word	0x00061a80

08000c64 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c68:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <MX_UART4_Init+0x4c>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	@ (8000cb4 <MX_UART4_Init+0x50>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <MX_UART4_Init+0x4c>)
 8000c70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c74:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <MX_UART4_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <MX_UART4_Init+0x4c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb0 <MX_UART4_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <MX_UART4_Init+0x4c>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <MX_UART4_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <MX_UART4_Init+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_UART4_Init+0x4c>)
 8000c9c:	f003 fdd0 	bl	8004840 <HAL_UART_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000ca6:	f000 f89f 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200002d4 	.word	0x200002d4
 8000cb4:	40004c00 	.word	0x40004c00

08000cb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	@ (8000d08 <MX_USART1_UART_Init+0x50>)
 8000cc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cc2:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cde:	220c      	movs	r2, #12
 8000ce0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <MX_USART1_UART_Init+0x4c>)
 8000cf0:	f003 fda6 	bl	8004840 <HAL_UART_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cfa:	f000 f875 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000031c 	.word	0x2000031c
 8000d08:	40013800 	.word	0x40013800

08000d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d12:	f107 0310 	add.w	r3, r7, #16
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d20:	4b2e      	ldr	r3, [pc, #184]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a2d      	ldr	r2, [pc, #180]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d26:	f043 0310 	orr.w	r3, r3, #16
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0310 	and.w	r3, r3, #16
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d38:	4b28      	ldr	r3, [pc, #160]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a27      	ldr	r2, [pc, #156]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d3e:	f043 0320 	orr.w	r3, r3, #32
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b25      	ldr	r3, [pc, #148]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0320 	and.w	r3, r3, #32
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d50:	4b22      	ldr	r3, [pc, #136]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a21      	ldr	r2, [pc, #132]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d56:	f043 0308 	orr.w	r3, r3, #8
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f003 0308 	and.w	r3, r3, #8
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d6e:	f043 0304 	orr.w	r3, r3, #4
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0304 	and.w	r3, r3, #4
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d86:	4816      	ldr	r0, [pc, #88]	@ (8000de0 <MX_GPIO_Init+0xd4>)
 8000d88:	f002 f8c4 	bl	8002f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <MX_GPIO_Init+0xd8>)
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480f      	ldr	r0, [pc, #60]	@ (8000de0 <MX_GPIO_Init+0xd4>)
 8000da2:	f001 ff23 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000da6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000daa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4808      	ldr	r0, [pc, #32]	@ (8000de0 <MX_GPIO_Init+0xd4>)
 8000dc0:	f001 ff14 	bl	8002bec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2028      	movs	r0, #40	@ 0x28
 8000dca:	f001 fd96 	bl	80028fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dce:	2028      	movs	r0, #40	@ 0x28
 8000dd0:	f001 fdaf 	bl	8002932 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010c00 	.word	0x40010c00
 8000de4:	10110000 	.word	0x10110000

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <Error_Handler+0x8>

08000df4 <I2C_WriteBuffer>:
static const uint8_t SLOT_GREEN_PILOT = 		0x07u;

//

void I2C_WriteBuffer(MAX30105_t *MAX30105_handler, uint8_t address, uint8_t *reg, uint8_t sizeBuf)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	460b      	mov	r3, r1
 8000e02:	72fb      	strb	r3, [r7, #11]
 8000e04:	4613      	mov	r3, r2
 8000e06:	72bb      	strb	r3, [r7, #10]
	while(HAL_I2C_Master_Transmit(MAX30105_handler->hi2c, address, reg, sizeBuf, 100))
 8000e08:	e004      	b.n	8000e14 <I2C_WriteBuffer+0x20>
	{
		if(HAL_I2C_GetError(MAX30105_handler->hi2c) != HAL_I2C_ERROR_AF)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f002 fd75 	bl	80038fe <HAL_I2C_GetError>
	while(HAL_I2C_Master_Transmit(MAX30105_handler->hi2c, address, reg, sizeBuf, 100))
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	6818      	ldr	r0, [r3, #0]
 8000e18:	7afb      	ldrb	r3, [r7, #11]
 8000e1a:	b299      	uxth	r1, r3
 8000e1c:	7abb      	ldrb	r3, [r7, #10]
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	2264      	movs	r2, #100	@ 0x64
 8000e22:	9200      	str	r2, [sp, #0]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	f002 f9f3 	bl	8003210 <HAL_I2C_Master_Transmit>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1ec      	bne.n	8000e0a <I2C_WriteBuffer+0x16>
		{

		}
	}
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <I2C_ReadBuffer>:

void I2C_ReadBuffer(MAX30105_t *MAX30105_handler, uint8_t address, uint8_t *pData, uint8_t sizeBuf)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af02      	add	r7, sp, #8
 8000e40:	60f8      	str	r0, [r7, #12]
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	461a      	mov	r2, r3
 8000e46:	460b      	mov	r3, r1
 8000e48:	72fb      	strb	r3, [r7, #11]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	72bb      	strb	r3, [r7, #10]
	while(HAL_I2C_Master_Receive(MAX30105_handler->hi2c, address, pData, sizeBuf, 100))
 8000e4e:	e004      	b.n	8000e5a <I2C_ReadBuffer+0x20>
	{
		if(HAL_I2C_GetError(MAX30105_handler->hi2c) != HAL_I2C_ERROR_AF)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f002 fd52 	bl	80038fe <HAL_I2C_GetError>
	while(HAL_I2C_Master_Receive(MAX30105_handler->hi2c, address, pData, sizeBuf, 100))
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	6818      	ldr	r0, [r3, #0]
 8000e5e:	7afb      	ldrb	r3, [r7, #11]
 8000e60:	b299      	uxth	r1, r3
 8000e62:	7abb      	ldrb	r3, [r7, #10]
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	2264      	movs	r2, #100	@ 0x64
 8000e68:	9200      	str	r2, [sp, #0]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	f002 face 	bl	800340c <HAL_I2C_Master_Receive>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1ec      	bne.n	8000e50 <I2C_ReadBuffer+0x16>
		{

		}
	}
}
 8000e76:	bf00      	nop
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <MAX30105_Init>:
void MAX30105_Init(MAX30105_t *MAX30105_handler, I2C_HandleTypeDef *hi2c)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
	MAX30105_handler->hi2c = hi2c;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	601a      	str	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr

08000e9a <MAX30105_readPartID>:

uint8_t MAX30105_readPartID(MAX30105_t *MAX30105_handler)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
	return MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_PARTID);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	791b      	ldrb	r3, [r3, #4]
 8000ea6:	22ff      	movs	r2, #255	@ 0xff
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 fb2b 	bl	8001506 <MAX30105_readRegister8>
 8000eb0:	4603      	mov	r3, r0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <MAX30105_begin>:

uint8_t MAX30105_begin(MAX30105_t *MAX30105_handler, uint8_t i2caddr)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	70fb      	strb	r3, [r7, #3]
	MAX30105_handler->_i2caddr = i2caddr;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	78fa      	ldrb	r2, [r7, #3]
 8000eca:	711a      	strb	r2, [r3, #4]

	// Step 1: Initial Communication and Verification
	// Check that a MAX30105 is connected
	if(MAX30105_readPartID(MAX30105_handler) != MAX_30105_EXPECTEDPARTID)
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ffe4 	bl	8000e9a <MAX30105_readPartID>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	2315      	movs	r3, #21
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d001      	beq.n	8000ee0 <MAX30105_begin+0x26>
		// Error -- Part ID read from MAX30105 does not match expected part ID.
		// This may mean there is a physical connectivity problem (broken wire, unpowered, etc).
		return MAX30105_FAIL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	e003      	b.n	8000ee8 <MAX30105_begin+0x2e>

	// Populate revision ID
	MAX30105_readRevisionID(MAX30105_handler);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 fb54 	bl	800158e <MAX30105_readRevisionID>

	return MAX30105_OK;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <MAX30105_getRed>:

// Report the most recent red value
uint32_t MAX30105_getRed(MAX30105_t *MAX30105_handler)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	// Check the sensor for new data for 250ms
	if (MAX30105_safeCheck(MAX30105_handler, 250))
 8000ef8:	21fa      	movs	r1, #250	@ 0xfa
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 f82a 	bl	8000f54 <MAX30105_safeCheck>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d008      	beq.n	8000f18 <MAX30105_getRed+0x28>
		return (MAX30105_handler->sense.red[MAX30105_handler->sense.head]);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3202      	adds	r2, #2
 8000f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f16:	e000      	b.n	8000f1a <MAX30105_getRed+0x2a>
	else
		return (0); // Sensor failed to find new data
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <MAX30105_getIR>:

// Report the most recent IR value
int32_t MAX30105_getIR(MAX30105_t *MAX30105_handler)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	// Check the sensor for new data for 250ms
	if (MAX30105_safeCheck(MAX30105_handler, 250))
 8000f2a:	21fa      	movs	r1, #250	@ 0xfa
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f811 	bl	8000f54 <MAX30105_safeCheck>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d008      	beq.n	8000f4a <MAX30105_getIR+0x28>
		return (MAX30105_handler->sense.IR[MAX30105_handler->sense.head]);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000f3e:	461a      	mov	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3206      	adds	r2, #6
 8000f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f48:	e000      	b.n	8000f4c <MAX30105_getIR+0x2a>
	else
		return (0); // Sensor failed to find new data
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <MAX30105_safeCheck>:

// Check for new data but give up after a certain amount of time
// Returns true if new data was found
// Returns false if new data was not found
uint8_t MAX30105_safeCheck(MAX30105_t *MAX30105_handler, uint8_t maxTimeToCheck)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	70fb      	strb	r3, [r7, #3]
	uint32_t markTime = HAL_GetTick();
 8000f60:	f001 fbc6 	bl	80026f0 <HAL_GetTick>
 8000f64:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if(HAL_GetTick() - markTime > maxTimeToCheck)
 8000f66:	f001 fbc3 	bl	80026f0 <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	1ad2      	subs	r2, r2, r3
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d901      	bls.n	8000f7a <MAX30105_safeCheck+0x26>
			return 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e00b      	b.n	8000f92 <MAX30105_safeCheck+0x3e>
		if(MAX30105_check(MAX30105_handler) == 1) // We found new data!
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f918 	bl	80011b0 <MAX30105_check>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d101      	bne.n	8000f8a <MAX30105_safeCheck+0x36>
			return 1;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e003      	b.n	8000f92 <MAX30105_safeCheck+0x3e>

		HAL_Delay(1);
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f001 fbba 	bl	8002704 <HAL_Delay>
		if(HAL_GetTick() - markTime > maxTimeToCheck)
 8000f90:	e7e9      	b.n	8000f66 <MAX30105_safeCheck+0x12>
	}
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <MAX30105_softReset>:

//End Interrupt configuration
void MAX30105_softReset(MAX30105_t *MAX30105_handler)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
	MAX30105_bitMask(MAX30105_handler, MAX30105_MODECONFIG, MAX30105_RESET_MASK, MAX30105_RESET);
 8000fa2:	2109      	movs	r1, #9
 8000fa4:	22bf      	movs	r2, #191	@ 0xbf
 8000fa6:	2340      	movs	r3, #64	@ 0x40
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 fb03 	bl	80015b4 <MAX30105_bitMask>

	// Poll for bit to clear, reset is then complete
	// Timeout after 100ms
	for(uint8_t i = 0;i < 100;i++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	73fb      	strb	r3, [r7, #15]
 8000fb2:	e014      	b.n	8000fde <MAX30105_softReset+0x44>
	{
		uint8_t response = MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_MODECONFIG);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	791b      	ldrb	r3, [r3, #4]
 8000fb8:	2209      	movs	r2, #9
 8000fba:	4619      	mov	r1, r3
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 faa2 	bl	8001506 <MAX30105_readRegister8>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	73bb      	strb	r3, [r7, #14]
		if ((response & MAX30105_RESET) == 0)
 8000fc6:	2240      	movs	r2, #64	@ 0x40
 8000fc8:	7bbb      	ldrb	r3, [r7, #14]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d009      	beq.n	8000fe6 <MAX30105_softReset+0x4c>
			break; //We're done!
		HAL_Delay(1); //Let's not over burden the I2C bus
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f001 fb96 	bl	8002704 <HAL_Delay>
	for(uint8_t i = 0;i < 100;i++)
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	2b63      	cmp	r3, #99	@ 0x63
 8000fe2:	d9e7      	bls.n	8000fb4 <MAX30105_softReset+0x1a>
	}
}
 8000fe4:	e000      	b.n	8000fe8 <MAX30105_softReset+0x4e>
			break; //We're done!
 8000fe6:	bf00      	nop
}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <MAX30105_setLEDMode>:

void MAX30105_setLEDMode(MAX30105_t *MAX30105_handler, uint8_t mode)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
	// Set which LEDs are used for sampling -- Red only, RED+IR only, or custom.
	// See datasheet, page 19
	MAX30105_bitMask(MAX30105_handler, MAX30105_MODECONFIG, MAX30105_MODE_MASK, mode);
 8000ffc:	2109      	movs	r1, #9
 8000ffe:	22f8      	movs	r2, #248	@ 0xf8
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 fad6 	bl	80015b4 <MAX30105_bitMask>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <MAX30105_setADCRange>:

void MAX30105_setADCRange(MAX30105_t *MAX30105_handler, uint8_t adcRange)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	70fb      	strb	r3, [r7, #3]
	// adcRange: one of MAX30105_ADCRANGE_2048, _4096, _8192, _16384
	MAX30105_bitMask(MAX30105_handler, MAX30105_PARTICLECONFIG, MAX30105_ADCRANGE_MASK, adcRange);
 800101c:	210a      	movs	r1, #10
 800101e:	229f      	movs	r2, #159	@ 0x9f
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 fac6 	bl	80015b4 <MAX30105_bitMask>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <MAX30105_setSampleRate>:

void MAX30105_setSampleRate(MAX30105_t *MAX30105_handler, uint8_t sampleRate)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	70fb      	strb	r3, [r7, #3]
	// sampleRate: one of MAX30105_SAMPLERATE_50, _100, _200, _400, _800, _1000, _1600, _3200
	MAX30105_bitMask(MAX30105_handler, MAX30105_PARTICLECONFIG, MAX30105_SAMPLERATE_MASK, sampleRate);
 800103c:	210a      	movs	r1, #10
 800103e:	22e3      	movs	r2, #227	@ 0xe3
 8001040:	78fb      	ldrb	r3, [r7, #3]
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 fab6 	bl	80015b4 <MAX30105_bitMask>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <MAX30105_setPulseWidth>:

void MAX30105_setPulseWidth(MAX30105_t *MAX30105_handler, uint8_t pulseWidth)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	70fb      	strb	r3, [r7, #3]
	// pulseWidth: one of MAX30105_PULSEWIDTH_69, _188, _215, _411
	MAX30105_bitMask(MAX30105_handler, MAX30105_PARTICLECONFIG, MAX30105_PULSEWIDTH_MASK, pulseWidth);
 800105c:	210a      	movs	r1, #10
 800105e:	22fc      	movs	r2, #252	@ 0xfc
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 faa6 	bl	80015b4 <MAX30105_bitMask>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <MAX30105_setPulseAmplitudeRed>:

// NOTE: Amplitude values: 0x00 = 0mA, 0x7F = 25.4mA, 0xFF = 50mA (typical)
// See datasheet, page 21
void MAX30105_setPulseAmplitudeRed(MAX30105_t *MAX30105_handler, uint8_t value)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	70fb      	strb	r3, [r7, #3]
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_LED1_PULSEAMP, value);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7919      	ldrb	r1, [r3, #4]
 8001080:	220c      	movs	r2, #12
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 fa66 	bl	8001556 <MAX30105_writeRegister8>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <MAX30105_setPulseAmplitudeIR>:

void MAX30105_setPulseAmplitudeIR(MAX30105_t *MAX30105_handler, uint8_t value)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	460b      	mov	r3, r1
 800109c:	70fb      	strb	r3, [r7, #3]
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_LED2_PULSEAMP, value);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	7919      	ldrb	r1, [r3, #4]
 80010a2:	220d      	movs	r2, #13
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 fa55 	bl	8001556 <MAX30105_writeRegister8>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <MAX30105_setPulseAmplitudeGreen>:

void MAX30105_setPulseAmplitudeGreen(MAX30105_t *MAX30105_handler, uint8_t value)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_LED3_PULSEAMP, value);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	7919      	ldrb	r1, [r3, #4]
 80010c4:	220e      	movs	r2, #14
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 fa44 	bl	8001556 <MAX30105_writeRegister8>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <MAX30105_setPulseAmplitudeProximity>:

void MAX30105_setPulseAmplitudeProximity(MAX30105_t *MAX30105_handler, uint8_t value)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	460b      	mov	r3, r1
 80010e0:	70fb      	strb	r3, [r7, #3]
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_LED_PROX_AMP, value);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7919      	ldrb	r1, [r3, #4]
 80010e6:	2210      	movs	r2, #16
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 fa33 	bl	8001556 <MAX30105_writeRegister8>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <MAX30105_enableSlot>:

void MAX30105_enableSlot(MAX30105_t *MAX30105_handler, uint8_t slotNumber, uint8_t device)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	70fb      	strb	r3, [r7, #3]
 8001104:	4613      	mov	r3, r2
 8001106:	70bb      	strb	r3, [r7, #2]
//	uint8_t originalContents;

	switch (slotNumber) {
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	3b01      	subs	r3, #1
 800110c:	2b03      	cmp	r3, #3
 800110e:	d82b      	bhi.n	8001168 <MAX30105_enableSlot+0x70>
 8001110:	a201      	add	r2, pc, #4	@ (adr r2, 8001118 <MAX30105_enableSlot+0x20>)
 8001112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001116:	bf00      	nop
 8001118:	08001129 	.word	0x08001129
 800111c:	08001137 	.word	0x08001137
 8001120:	08001149 	.word	0x08001149
 8001124:	08001157 	.word	0x08001157
	case 1:
		MAX30105_bitMask(MAX30105_handler, MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
 8001128:	2111      	movs	r1, #17
 800112a:	22f8      	movs	r2, #248	@ 0xf8
 800112c:	78bb      	ldrb	r3, [r7, #2]
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 fa40 	bl	80015b4 <MAX30105_bitMask>
		break;
 8001134:	e019      	b.n	800116a <MAX30105_enableSlot+0x72>
	case 2:
		MAX30105_bitMask(MAX30105_handler, MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
 8001136:	2111      	movs	r1, #17
 8001138:	228f      	movs	r2, #143	@ 0x8f
 800113a:	78bb      	ldrb	r3, [r7, #2]
 800113c:	011b      	lsls	r3, r3, #4
 800113e:	b2db      	uxtb	r3, r3
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 fa37 	bl	80015b4 <MAX30105_bitMask>
		break;
 8001146:	e010      	b.n	800116a <MAX30105_enableSlot+0x72>
	case 3:
		MAX30105_bitMask(MAX30105_handler, MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
 8001148:	2112      	movs	r1, #18
 800114a:	22f8      	movs	r2, #248	@ 0xf8
 800114c:	78bb      	ldrb	r3, [r7, #2]
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 fa30 	bl	80015b4 <MAX30105_bitMask>
		break;
 8001154:	e009      	b.n	800116a <MAX30105_enableSlot+0x72>
	case 4:
		MAX30105_bitMask(MAX30105_handler, MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
 8001156:	2112      	movs	r1, #18
 8001158:	228f      	movs	r2, #143	@ 0x8f
 800115a:	78bb      	ldrb	r3, [r7, #2]
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	b2db      	uxtb	r3, r3
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 fa27 	bl	80015b4 <MAX30105_bitMask>
		break;
 8001166:	e000      	b.n	800116a <MAX30105_enableSlot+0x72>
	default:
		//Shouldn't be here!
		break;
 8001168:	bf00      	nop
	}
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop

08001174 <MAX30105_setFIFOAverage>:
// FIFO Configuration
//

//Set sample average (Table 3, Page 18)
void MAX30105_setFIFOAverage(MAX30105_t *MAX30105_handler, uint8_t samples)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	70fb      	strb	r3, [r7, #3]
	MAX30105_bitMask(MAX30105_handler, MAX30105_FIFOCONFIG, MAX30105_SAMPLEAVG_MASK, samples);
 8001180:	2108      	movs	r1, #8
 8001182:	221f      	movs	r2, #31
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 fa14 	bl	80015b4 <MAX30105_bitMask>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <MAX30105_enableFIFORollover>:

//Enable roll over if FIFO over flows
void MAX30105_enableFIFORollover(MAX30105_t *MAX30105_handler)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	MAX30105_bitMask(MAX30105_handler, MAX30105_FIFOCONFIG, MAX30105_ROLLOVER_MASK, MAX30105_ROLLOVER_ENABLE);
 800119c:	2108      	movs	r1, #8
 800119e:	22ef      	movs	r2, #239	@ 0xef
 80011a0:	2310      	movs	r3, #16
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 fa06 	bl	80015b4 <MAX30105_bitMask>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <MAX30105_check>:
//Polls the sensor for new data
//Call regularly
//If new data is available, it updates the head and tail in the main struct
//Returns number of new samples obtained
uint16_t MAX30105_check(MAX30105_t *MAX30105_handler)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b090      	sub	sp, #64	@ 0x40
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	//Read register FIDO_DATA in (3-byte * number of active LED) chunks
	//Until FIFO_RD_PTR = FIFO_WR_PTR
	uint8_t readPointer = MAX30105_getReadPointer(MAX30105_handler);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f977 	bl	80014ac <MAX30105_getReadPointer>
 80011be:	4603      	mov	r3, r0
 80011c0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t writePointer = MAX30105_getWritePointer(MAX30105_handler);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 f961 	bl	800148c <MAX30105_getWritePointer>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

	int numberOfSamples = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	63fb      	str	r3, [r7, #60]	@ 0x3c

	//Do we have new data?
	if (readPointer != writePointer)
 80011d4:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80011d8:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80011dc:	429a      	cmp	r2, r3
 80011de:	f000 8115 	beq.w	800140c <MAX30105_check+0x25c>
	{
		//Calculate the number of readings we need to get from sensor
		numberOfSamples = writePointer - readPointer;
 80011e2:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 80011e6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 80011ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	da02      	bge.n	80011fa <MAX30105_check+0x4a>
 80011f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011f6:	3320      	adds	r3, #32
 80011f8:	63fb      	str	r3, [r7, #60]	@ 0x3c

		//We now have the number of readings, now calc bytes to read
		//For this example we are just doing Red and IR (3 bytes each)
		int bytesLeftToRead = numberOfSamples * MAX30105_handler->activeLEDs * 3;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	795b      	ldrb	r3, [r3, #5]
 80011fe:	461a      	mov	r2, r3
 8001200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001202:	fb03 f202 	mul.w	r2, r3, r2
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	63bb      	str	r3, [r7, #56]	@ 0x38

		//Get ready to read a burst of data from the FIFO register
		uint8_t reg = MAX30105_FIFODATA;
 800120e:	2307      	movs	r3, #7
 8001210:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
		I2C_WriteBuffer(MAX30105_handler, MAX30105_handler->_i2caddr, &reg, 1);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7919      	ldrb	r1, [r3, #4]
 8001218:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800121c:	2301      	movs	r3, #1
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fde8 	bl	8000df4 <I2C_WriteBuffer>

		//We may need to read as many as 288 bytes so we read in blocks no larger than I2C_BUFFER_LENGTH
		//I2C_BUFFER_LENGTH changes based on the platform. 64 bytes for SAMD21, 32 bytes for Uno.
		//Wire.requestFrom() is limited to BUFFER_LENGTH which is 32 on the Uno
		while (bytesLeftToRead > 0)
 8001224:	e0ee      	b.n	8001404 <MAX30105_check+0x254>
		{
			int toGet = bytesLeftToRead;
 8001226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001228:	637b      	str	r3, [r7, #52]	@ 0x34
			if (toGet > I2C_BUFFER_LENGTH)
 800122a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800122c:	2b20      	cmp	r3, #32
 800122e:	dd0e      	ble.n	800124e <MAX30105_check+0x9e>
			{
				//If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
				//32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
				//32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

				toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (MAX30105_handler->activeLEDs * 3)); //Trim toGet to be a multiple of the samples we need to read
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	795b      	ldrb	r3, [r3, #5]
 8001234:	461a      	mov	r2, r3
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	2220      	movs	r2, #32
 800123e:	fb92 f1f3 	sdiv	r1, r2, r3
 8001242:	fb01 f303 	mul.w	r3, r1, r3
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	f1c3 0320 	rsb	r3, r3, #32
 800124c:	637b      	str	r3, [r7, #52]	@ 0x34
			}

			bytesLeftToRead -= toGet;
 800124e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	63bb      	str	r3, [r7, #56]	@ 0x38

			uint8_t pData[I2C_BUFFER_LENGTH] = {0};
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
 800126a:	615a      	str	r2, [r3, #20]
 800126c:	619a      	str	r2, [r3, #24]
			I2C_ReadBuffer(MAX30105_handler, MAX30105_handler->_i2caddr, pData, (uint8_t)toGet);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7919      	ldrb	r1, [r3, #4]
 8001272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001274:	b2db      	uxtb	r3, r3
 8001276:	f107 0208 	add.w	r2, r7, #8
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fddd 	bl	8000e3a <I2C_ReadBuffer>

			while (toGet > 0)
 8001280:	e0bc      	b.n	80013fc <MAX30105_check+0x24c>
			{
				MAX30105_handler->sense.head++; //Advance the head of the storage struct
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001288:	3301      	adds	r3, #1
 800128a:	b2da      	uxtb	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
				MAX30105_handler->sense.head %= STORAGE_SIZE; //Wrap condition
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	b2da      	uxtb	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

				uint8_t temp[sizeof(uint32_t)]; //Array of 4 bytes that we will convert into long
				uint32_t tempLong;

				uint8_t pIndex = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
				//Burst read three bytes - RED
				temp[3] = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				temp[2] = pData[pIndex++];
 80012b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 80012ba:	3340      	adds	r3, #64	@ 0x40
 80012bc:	443b      	add	r3, r7
 80012be:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80012c2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				temp[1] = pData[pIndex++];
 80012c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 80012d0:	3340      	adds	r3, #64	@ 0x40
 80012d2:	443b      	add	r3, r7
 80012d4:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80012d8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
				temp[0] = pData[pIndex++];
 80012dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 80012e6:	3340      	adds	r3, #64	@ 0x40
 80012e8:	443b      	add	r3, r7
 80012ea:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80012ee:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

				// Convert array to long
				memcpy(&tempLong, temp, sizeof(tempLong));
 80012f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012f4:	62bb      	str	r3, [r7, #40]	@ 0x28

				tempLong &= 0x3FFFFu; // Zero out all but 18 bits
 80012f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012f8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80012fc:	62bb      	str	r3, [r7, #40]	@ 0x28

				MAX30105_handler->sense.red[MAX30105_handler->sense.head] = tempLong; // Store this reading into the sense array
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001304:	461a      	mov	r2, r3
 8001306:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3202      	adds	r2, #2
 800130c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				if (MAX30105_handler->activeLEDs > 1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	795b      	ldrb	r3, [r3, #5]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d932      	bls.n	800137e <MAX30105_check+0x1ce>
				{
					// Burst read three more bytes - IR
					temp[3] = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					temp[2] = pData[pIndex++];
 800131e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 8001328:	3340      	adds	r3, #64	@ 0x40
 800132a:	443b      	add	r3, r7
 800132c:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001330:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
					temp[1] = pData[pIndex++];
 8001334:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 800133e:	3340      	adds	r3, #64	@ 0x40
 8001340:	443b      	add	r3, r7
 8001342:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001346:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
					temp[0] = pData[pIndex++];
 800134a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 8001354:	3340      	adds	r3, #64	@ 0x40
 8001356:	443b      	add	r3, r7
 8001358:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800135c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

					// Convert array to long
					memcpy(&tempLong, temp, sizeof(tempLong));
 8001360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001362:	62bb      	str	r3, [r7, #40]	@ 0x28

					tempLong &= 0x3FFFF; // Zero out all but 18 bits
 8001364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001366:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800136a:	62bb      	str	r3, [r7, #40]	@ 0x28

					MAX30105_handler->sense.IR[MAX30105_handler->sense.head] = tempLong;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001372:	461a      	mov	r2, r3
 8001374:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3206      	adds	r2, #6
 800137a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				}

				if (MAX30105_handler->activeLEDs > 2)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	795b      	ldrb	r3, [r3, #5]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d932      	bls.n	80013ec <MAX30105_check+0x23c>
				{
					// Burst read three more bytes - Green
					temp[3] = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					temp[2] = pData[pIndex++];
 800138c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 8001396:	3340      	adds	r3, #64	@ 0x40
 8001398:	443b      	add	r3, r7
 800139a:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800139e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
					temp[1] = pData[pIndex++];
 80013a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 80013ac:	3340      	adds	r3, #64	@ 0x40
 80013ae:	443b      	add	r3, r7
 80013b0:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80013b4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
					temp[0] = pData[pIndex++];
 80013b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	f887 2033 	strb.w	r2, [r7, #51]	@ 0x33
 80013c2:	3340      	adds	r3, #64	@ 0x40
 80013c4:	443b      	add	r3, r7
 80013c6:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80013ca:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

					// Convert array to long
					memcpy(&tempLong, temp, sizeof(tempLong));
 80013ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013d0:	62bb      	str	r3, [r7, #40]	@ 0x28

					tempLong &= 0x3FFFF; // Zero out all but 18 bits
 80013d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80013d8:	62bb      	str	r3, [r7, #40]	@ 0x28

					MAX30105_handler->sense.green[MAX30105_handler->sense.head] = tempLong;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80013e0:	461a      	mov	r2, r3
 80013e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	320a      	adds	r2, #10
 80013e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				}

				toGet -= MAX30105_handler->activeLEDs * 3;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	795b      	ldrb	r3, [r3, #5]
 80013f0:	461a      	mov	r2, r3
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80013f8:	4413      	add	r3, r2
 80013fa:	637b      	str	r3, [r7, #52]	@ 0x34
			while (toGet > 0)
 80013fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f73f af3f 	bgt.w	8001282 <MAX30105_check+0xd2>
		while (bytesLeftToRead > 0)
 8001404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001406:	2b00      	cmp	r3, #0
 8001408:	f73f af0d 	bgt.w	8001226 <MAX30105_check+0x76>
			}
		}// End while (bytesLeftToRead > 0)

	}// End readPtr != writePtr

	return (numberOfSamples); // Let the world know how much new data we found
 800140c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800140e:	b29b      	uxth	r3, r3
}
 8001410:	4618      	mov	r0, r3
 8001412:	3740      	adds	r7, #64	@ 0x40
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <MAX30105_available>:

//Tell caller how many samples are available
uint8_t MAX30105_available(MAX30105_t *MAX30105_handler)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	int8_t numberOfSamples = MAX30105_handler->sense.head - MAX30105_handler->sense.tail;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	73fb      	strb	r3, [r7, #15]
	if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	2b00      	cmp	r3, #0
 8001438:	da03      	bge.n	8001442 <MAX30105_available+0x2a>
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	3304      	adds	r3, #4
 800143e:	b2db      	uxtb	r3, r3
 8001440:	73fb      	strb	r3, [r7, #15]

	return (numberOfSamples);
 8001442:	7bfb      	ldrb	r3, [r7, #15]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <MAX30105_nextSample>:

// Advance the tail
void MAX30105_nextSample(MAX30105_t *MAX30105_handler)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	if (MAX30105_available(MAX30105_handler)) // Only advance the tail if new data is available
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff ffde 	bl	8001418 <MAX30105_available>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d010      	beq.n	8001484 <MAX30105_nextSample+0x36>
	  {
	    MAX30105_handler->sense.tail++;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001468:	3301      	adds	r3, #1
 800146a:	b2da      	uxtb	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	    MAX30105_handler->sense.tail %= STORAGE_SIZE; // Wrap condition
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	b2da      	uxtb	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	  }
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <MAX30105_getWritePointer>:

//Read the FIFO Write Pointer
uint8_t MAX30105_getWritePointer(MAX30105_t *MAX30105_handler)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	return (MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_FIFOWRITEPTR));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	791b      	ldrb	r3, [r3, #4]
 8001498:	2204      	movs	r2, #4
 800149a:	4619      	mov	r1, r3
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f832 	bl	8001506 <MAX30105_readRegister8>
 80014a2:	4603      	mov	r3, r0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <MAX30105_getReadPointer>:

//Read the FIFO Read Pointer
uint8_t MAX30105_getReadPointer(MAX30105_t *MAX30105_handler)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	return (MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_FIFOREADPTR));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	791b      	ldrb	r3, [r3, #4]
 80014b8:	2206      	movs	r2, #6
 80014ba:	4619      	mov	r1, r3
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 f822 	bl	8001506 <MAX30105_readRegister8>
 80014c2:	4603      	mov	r3, r0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <MAX30105_clearFIFO>:

void MAX30105_clearFIFO(MAX30105_t *MAX30105_handler)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	//Resets all points to start in a known state
	//Page 15 recommends clearing FIFO before beginning a read
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_FIFOWRITEPTR, 0);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7919      	ldrb	r1, [r3, #4]
 80014d8:	2204      	movs	r2, #4
 80014da:	2300      	movs	r3, #0
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f83a 	bl	8001556 <MAX30105_writeRegister8>
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_FIFOOVERFLOW, 0);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	7919      	ldrb	r1, [r3, #4]
 80014e6:	2205      	movs	r2, #5
 80014e8:	2300      	movs	r3, #0
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f833 	bl	8001556 <MAX30105_writeRegister8>
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_FIFOREADPTR, 0);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7919      	ldrb	r1, [r3, #4]
 80014f4:	2206      	movs	r2, #6
 80014f6:	2300      	movs	r3, #0
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f82c 	bl	8001556 <MAX30105_writeRegister8>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <MAX30105_readRegister8>:

//
// Low-level I2C Communication
//
uint8_t MAX30105_readRegister8(MAX30105_t *MAX30105_handler, uint8_t address, uint8_t reg)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	460b      	mov	r3, r1
 8001510:	70fb      	strb	r3, [r7, #3]
 8001512:	4613      	mov	r3, r2
 8001514:	70bb      	strb	r3, [r7, #2]
//	HAL_I2C_Master_Transmit(MAX30105_handler->hi2c, address, &reg, 1, 100);
	I2C_WriteBuffer(MAX30105_handler, address | 0x01, &reg, 1);
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	b2d9      	uxtb	r1, r3
 800151e:	1cba      	adds	r2, r7, #2
 8001520:	2301      	movs	r3, #1
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff fc66 	bl	8000df4 <I2C_WriteBuffer>
	//
	while(HAL_I2C_GetState(MAX30105_handler->hi2c) != HAL_I2C_STATE_READY);
 8001528:	bf00      	nop
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f002 f9d8 	bl	80038e4 <HAL_I2C_GetState>
 8001534:	4603      	mov	r3, r0
 8001536:	2b20      	cmp	r3, #32
 8001538:	d1f7      	bne.n	800152a <MAX30105_readRegister8+0x24>
	uint8_t pData = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	73fb      	strb	r3, [r7, #15]
//	HAL_I2C_Master_Receive(MAX30105_handler->hi2c, address, &pData, 1, 100);
	I2C_ReadBuffer(MAX30105_handler, address, &pData, 1);
 800153e:	f107 020f 	add.w	r2, r7, #15
 8001542:	78f9      	ldrb	r1, [r7, #3]
 8001544:	2301      	movs	r3, #1
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff fc77 	bl	8000e3a <I2C_ReadBuffer>

	return pData;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <MAX30105_writeRegister8>:

void MAX30105_writeRegister8(MAX30105_t *MAX30105_handler, uint8_t address, uint8_t reg, uint8_t value)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	4608      	mov	r0, r1
 8001560:	4611      	mov	r1, r2
 8001562:	461a      	mov	r2, r3
 8001564:	4603      	mov	r3, r0
 8001566:	70fb      	strb	r3, [r7, #3]
 8001568:	460b      	mov	r3, r1
 800156a:	70bb      	strb	r3, [r7, #2]
 800156c:	4613      	mov	r3, r2
 800156e:	707b      	strb	r3, [r7, #1]
	uint8_t pData[] = {reg, value};
 8001570:	78bb      	ldrb	r3, [r7, #2]
 8001572:	733b      	strb	r3, [r7, #12]
 8001574:	787b      	ldrb	r3, [r7, #1]
 8001576:	737b      	strb	r3, [r7, #13]
	I2C_WriteBuffer(MAX30105_handler, address, pData, 2);
 8001578:	f107 020c 	add.w	r2, r7, #12
 800157c:	78f9      	ldrb	r1, [r7, #3]
 800157e:	2302      	movs	r3, #2
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff fc37 	bl	8000df4 <I2C_WriteBuffer>
//	I2C_WriteBuffer(MAX30105_handler, address, value, 1);
//	HAL_I2C_Master_Transmit(MAX30105_handler->hi2c, address, &reg, 1, 100);
//	HAL_I2C_Master_Transmit(MAX30105_handler->hi2c, address, &value, 1, 100);
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <MAX30105_readRevisionID>:

void MAX30105_readRevisionID(MAX30105_t *MAX30105_handler)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
	MAX30105_handler->revisionID = MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, MAX30105_REVISIONID);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	791b      	ldrb	r3, [r3, #4]
 800159a:	22fe      	movs	r2, #254	@ 0xfe
 800159c:	4619      	mov	r1, r3
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ffb1 	bl	8001506 <MAX30105_readRegister8>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	719a      	strb	r2, [r3, #6]
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <MAX30105_bitMask>:

//Given a register, read it, mask it, and then set the thing
void MAX30105_bitMask(MAX30105_t *MAX30105_handler, uint8_t reg, uint8_t mask, uint8_t thing)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	4608      	mov	r0, r1
 80015be:	4611      	mov	r1, r2
 80015c0:	461a      	mov	r2, r3
 80015c2:	4603      	mov	r3, r0
 80015c4:	70fb      	strb	r3, [r7, #3]
 80015c6:	460b      	mov	r3, r1
 80015c8:	70bb      	strb	r3, [r7, #2]
 80015ca:	4613      	mov	r3, r2
 80015cc:	707b      	strb	r3, [r7, #1]
	// Grab current register context
	uint8_t originalContents = MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, reg);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	791b      	ldrb	r3, [r3, #4]
 80015d2:	78fa      	ldrb	r2, [r7, #3]
 80015d4:	4619      	mov	r1, r3
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ff95 	bl	8001506 <MAX30105_readRegister8>
 80015dc:	4603      	mov	r3, r0
 80015de:	73fb      	strb	r3, [r7, #15]

	// Zero-out the portions of the register we're interested in
	originalContents = originalContents & mask;
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	78bb      	ldrb	r3, [r7, #2]
 80015e4:	4013      	ands	r3, r2
 80015e6:	73fb      	strb	r3, [r7, #15]

	// Change contents
	MAX30105_writeRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, reg, originalContents | thing);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7919      	ldrb	r1, [r3, #4]
 80015ec:	7bfa      	ldrb	r2, [r7, #15]
 80015ee:	787b      	ldrb	r3, [r7, #1]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	78fa      	ldrb	r2, [r7, #3]
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ffad 	bl	8001556 <MAX30105_writeRegister8>

	uint8_t response = MAX30105_readRegister8(MAX30105_handler, MAX30105_handler->_i2caddr, reg);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	791b      	ldrb	r3, [r3, #4]
 8001600:	78fa      	ldrb	r2, [r7, #3]
 8001602:	4619      	mov	r1, r3
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff7e 	bl	8001506 <MAX30105_readRegister8>
 800160a:	4603      	mov	r3, r0
 800160c:	73bb      	strb	r3, [r7, #14]
}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <MAX30105_setup>:
// Mode = MultiLED
// ADC Range = 16384 (62.5pA per LSB)
// Sample rate = 50
//Use the default setup if you are just getting started with the MAX30105 sensor
void MAX30105_setup(MAX30105_t *MAX30105_handler, uint8_t powerLevel, uint8_t sampleAverage, uint8_t ledMode, int sampleRate, int pulseWidth, int adcRange)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	4608      	mov	r0, r1
 8001620:	4611      	mov	r1, r2
 8001622:	461a      	mov	r2, r3
 8001624:	4603      	mov	r3, r0
 8001626:	70fb      	strb	r3, [r7, #3]
 8001628:	460b      	mov	r3, r1
 800162a:	70bb      	strb	r3, [r7, #2]
 800162c:	4613      	mov	r3, r2
 800162e:	707b      	strb	r3, [r7, #1]
	MAX30105_softReset(MAX30105_handler); //Reset all configuration, threshold, and data registers to POR values
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff fcb2 	bl	8000f9a <MAX30105_softReset>

	//FIFO Configuration
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	//The chip will average multiple samples of same type together if you wish
	if (sampleAverage == 1) MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
 8001636:	78bb      	ldrb	r3, [r7, #2]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d105      	bne.n	8001648 <MAX30105_setup+0x32>
 800163c:	2300      	movs	r3, #0
 800163e:	4619      	mov	r1, r3
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff fd97 	bl	8001174 <MAX30105_setFIFOAverage>
 8001646:	e031      	b.n	80016ac <MAX30105_setup+0x96>
	else if (sampleAverage == 2) MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_2);
 8001648:	78bb      	ldrb	r3, [r7, #2]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d105      	bne.n	800165a <MAX30105_setup+0x44>
 800164e:	2320      	movs	r3, #32
 8001650:	4619      	mov	r1, r3
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff fd8e 	bl	8001174 <MAX30105_setFIFOAverage>
 8001658:	e028      	b.n	80016ac <MAX30105_setup+0x96>
	else if (sampleAverage == 4) MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_4);
 800165a:	78bb      	ldrb	r3, [r7, #2]
 800165c:	2b04      	cmp	r3, #4
 800165e:	d105      	bne.n	800166c <MAX30105_setup+0x56>
 8001660:	2340      	movs	r3, #64	@ 0x40
 8001662:	4619      	mov	r1, r3
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff fd85 	bl	8001174 <MAX30105_setFIFOAverage>
 800166a:	e01f      	b.n	80016ac <MAX30105_setup+0x96>
	else if (sampleAverage == 8) MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_8);
 800166c:	78bb      	ldrb	r3, [r7, #2]
 800166e:	2b08      	cmp	r3, #8
 8001670:	d105      	bne.n	800167e <MAX30105_setup+0x68>
 8001672:	2360      	movs	r3, #96	@ 0x60
 8001674:	4619      	mov	r1, r3
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff fd7c 	bl	8001174 <MAX30105_setFIFOAverage>
 800167c:	e016      	b.n	80016ac <MAX30105_setup+0x96>
	else if (sampleAverage == 16) MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_16);
 800167e:	78bb      	ldrb	r3, [r7, #2]
 8001680:	2b10      	cmp	r3, #16
 8001682:	d105      	bne.n	8001690 <MAX30105_setup+0x7a>
 8001684:	2380      	movs	r3, #128	@ 0x80
 8001686:	4619      	mov	r1, r3
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff fd73 	bl	8001174 <MAX30105_setFIFOAverage>
 800168e:	e00d      	b.n	80016ac <MAX30105_setup+0x96>
	else if (sampleAverage == 32) MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_32);
 8001690:	78bb      	ldrb	r3, [r7, #2]
 8001692:	2b20      	cmp	r3, #32
 8001694:	d105      	bne.n	80016a2 <MAX30105_setup+0x8c>
 8001696:	23a0      	movs	r3, #160	@ 0xa0
 8001698:	4619      	mov	r1, r3
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff fd6a 	bl	8001174 <MAX30105_setFIFOAverage>
 80016a0:	e004      	b.n	80016ac <MAX30105_setup+0x96>
	else MAX30105_setFIFOAverage(MAX30105_handler, MAX30105_SAMPLEAVG_4);
 80016a2:	2340      	movs	r3, #64	@ 0x40
 80016a4:	4619      	mov	r1, r3
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff fd64 	bl	8001174 <MAX30105_setFIFOAverage>

	//setFIFOAlmostFull(2); //Set to 30 samples to trigger an 'Almost Full' interrupt
	MAX30105_enableFIFORollover(MAX30105_handler); //Allow FIFO to wrap/roll over
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff fd71 	bl	8001194 <MAX30105_enableFIFORollover>
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	//Mode Configuration
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	if (ledMode == 3) MAX30105_setLEDMode(MAX30105_handler, MAX30105_MODE_MULTILED); //Watch all three LED channels
 80016b2:	787b      	ldrb	r3, [r7, #1]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d105      	bne.n	80016c4 <MAX30105_setup+0xae>
 80016b8:	2307      	movs	r3, #7
 80016ba:	4619      	mov	r1, r3
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff fc97 	bl	8000ff0 <MAX30105_setLEDMode>
 80016c2:	e00d      	b.n	80016e0 <MAX30105_setup+0xca>
	else if (ledMode == 2) MAX30105_setLEDMode(MAX30105_handler, MAX30105_MODE_REDIRONLY); //Red and IR
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d105      	bne.n	80016d6 <MAX30105_setup+0xc0>
 80016ca:	2303      	movs	r3, #3
 80016cc:	4619      	mov	r1, r3
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fc8e 	bl	8000ff0 <MAX30105_setLEDMode>
 80016d4:	e004      	b.n	80016e0 <MAX30105_setup+0xca>
	else MAX30105_setLEDMode(MAX30105_handler, MAX30105_MODE_REDONLY); //Red only
 80016d6:	2302      	movs	r3, #2
 80016d8:	4619      	mov	r1, r3
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fc88 	bl	8000ff0 <MAX30105_setLEDMode>

	MAX30105_handler->activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	787a      	ldrb	r2, [r7, #1]
 80016e4:	715a      	strb	r2, [r3, #5]
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	//Particle Sensing Configuration
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	if(adcRange < 4096) MAX30105_setADCRange(MAX30105_handler, MAX30105_ADCRANGE_2048); //7.81pA per LSB
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016ec:	da05      	bge.n	80016fa <MAX30105_setup+0xe4>
 80016ee:	2300      	movs	r3, #0
 80016f0:	4619      	mov	r1, r3
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff fc8c 	bl	8001010 <MAX30105_setADCRange>
 80016f8:	e022      	b.n	8001740 <MAX30105_setup+0x12a>
	else if(adcRange < 8192) MAX30105_setADCRange(MAX30105_handler, MAX30105_ADCRANGE_4096); //15.63pA per LSB
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001700:	da05      	bge.n	800170e <MAX30105_setup+0xf8>
 8001702:	2320      	movs	r3, #32
 8001704:	4619      	mov	r1, r3
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fc82 	bl	8001010 <MAX30105_setADCRange>
 800170c:	e018      	b.n	8001740 <MAX30105_setup+0x12a>
	else if(adcRange < 16384) MAX30105_setADCRange(MAX30105_handler, MAX30105_ADCRANGE_8192); //31.25pA per LSB
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001714:	da05      	bge.n	8001722 <MAX30105_setup+0x10c>
 8001716:	2340      	movs	r3, #64	@ 0x40
 8001718:	4619      	mov	r1, r3
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff fc78 	bl	8001010 <MAX30105_setADCRange>
 8001720:	e00e      	b.n	8001740 <MAX30105_setup+0x12a>
	else if(adcRange == 16384) MAX30105_setADCRange(MAX30105_handler, MAX30105_ADCRANGE_16384); //62.5pA per LSB
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001728:	d105      	bne.n	8001736 <MAX30105_setup+0x120>
 800172a:	2360      	movs	r3, #96	@ 0x60
 800172c:	4619      	mov	r1, r3
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fc6e 	bl	8001010 <MAX30105_setADCRange>
 8001734:	e004      	b.n	8001740 <MAX30105_setup+0x12a>
	else MAX30105_setADCRange(MAX30105_handler, MAX30105_ADCRANGE_2048);
 8001736:	2300      	movs	r3, #0
 8001738:	4619      	mov	r1, r3
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff fc68 	bl	8001010 <MAX30105_setADCRange>

	if (sampleRate < 100) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_50); //Take 50 samples per second
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	2b63      	cmp	r3, #99	@ 0x63
 8001744:	dc05      	bgt.n	8001752 <MAX30105_setup+0x13c>
 8001746:	2300      	movs	r3, #0
 8001748:	4619      	mov	r1, r3
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff fc70 	bl	8001030 <MAX30105_setSampleRate>
 8001750:	e049      	b.n	80017e6 <MAX30105_setup+0x1d0>
	else if (sampleRate < 200) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_100);
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	2bc7      	cmp	r3, #199	@ 0xc7
 8001756:	dc05      	bgt.n	8001764 <MAX30105_setup+0x14e>
 8001758:	2304      	movs	r3, #4
 800175a:	4619      	mov	r1, r3
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff fc67 	bl	8001030 <MAX30105_setSampleRate>
 8001762:	e040      	b.n	80017e6 <MAX30105_setup+0x1d0>
	else if (sampleRate < 400) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_200);
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800176a:	da05      	bge.n	8001778 <MAX30105_setup+0x162>
 800176c:	2308      	movs	r3, #8
 800176e:	4619      	mov	r1, r3
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff fc5d 	bl	8001030 <MAX30105_setSampleRate>
 8001776:	e036      	b.n	80017e6 <MAX30105_setup+0x1d0>
	else if (sampleRate < 800) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_400);
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800177e:	da05      	bge.n	800178c <MAX30105_setup+0x176>
 8001780:	230c      	movs	r3, #12
 8001782:	4619      	mov	r1, r3
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff fc53 	bl	8001030 <MAX30105_setSampleRate>
 800178a:	e02c      	b.n	80017e6 <MAX30105_setup+0x1d0>
	else if (sampleRate < 1000) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_800);
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001792:	da05      	bge.n	80017a0 <MAX30105_setup+0x18a>
 8001794:	2310      	movs	r3, #16
 8001796:	4619      	mov	r1, r3
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fc49 	bl	8001030 <MAX30105_setSampleRate>
 800179e:	e022      	b.n	80017e6 <MAX30105_setup+0x1d0>
	else if (sampleRate < 1600) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_1000);
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80017a6:	da05      	bge.n	80017b4 <MAX30105_setup+0x19e>
 80017a8:	2314      	movs	r3, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fc3f 	bl	8001030 <MAX30105_setSampleRate>
 80017b2:	e018      	b.n	80017e6 <MAX30105_setup+0x1d0>
	else if (sampleRate < 3200) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_1600);
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 80017ba:	da05      	bge.n	80017c8 <MAX30105_setup+0x1b2>
 80017bc:	2318      	movs	r3, #24
 80017be:	4619      	mov	r1, r3
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff fc35 	bl	8001030 <MAX30105_setSampleRate>
 80017c6:	e00e      	b.n	80017e6 <MAX30105_setup+0x1d0>
	else if (sampleRate == 3200) MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_3200);
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 80017ce:	d105      	bne.n	80017dc <MAX30105_setup+0x1c6>
 80017d0:	231c      	movs	r3, #28
 80017d2:	4619      	mov	r1, r3
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fc2b 	bl	8001030 <MAX30105_setSampleRate>
 80017da:	e004      	b.n	80017e6 <MAX30105_setup+0x1d0>
	else MAX30105_setSampleRate(MAX30105_handler, MAX30105_SAMPLERATE_50);
 80017dc:	2300      	movs	r3, #0
 80017de:	4619      	mov	r1, r3
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff fc25 	bl	8001030 <MAX30105_setSampleRate>

	//The longer the pulse width the longer range of detection you'll have
	//At 69us and 0.4mA it's about 2 inches
	//At 411us and 0.4mA it's about 6 inches
	if (pulseWidth < 118) MAX30105_setPulseWidth(MAX30105_handler, MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2b75      	cmp	r3, #117	@ 0x75
 80017ea:	dc05      	bgt.n	80017f8 <MAX30105_setup+0x1e2>
 80017ec:	2300      	movs	r3, #0
 80017ee:	4619      	mov	r1, r3
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff fc2d 	bl	8001050 <MAX30105_setPulseWidth>
 80017f6:	e022      	b.n	800183e <MAX30105_setup+0x228>
	else if (pulseWidth < 215) MAX30105_setPulseWidth(MAX30105_handler, MAX30105_PULSEWIDTH_118); //16 bit resolution
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2bd6      	cmp	r3, #214	@ 0xd6
 80017fc:	dc05      	bgt.n	800180a <MAX30105_setup+0x1f4>
 80017fe:	2301      	movs	r3, #1
 8001800:	4619      	mov	r1, r3
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff fc24 	bl	8001050 <MAX30105_setPulseWidth>
 8001808:	e019      	b.n	800183e <MAX30105_setup+0x228>
	else if (pulseWidth < 411) MAX30105_setPulseWidth(MAX30105_handler, MAX30105_PULSEWIDTH_215); //17 bit resolution
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f5b3 7fcd 	cmp.w	r3, #410	@ 0x19a
 8001810:	dc05      	bgt.n	800181e <MAX30105_setup+0x208>
 8001812:	2302      	movs	r3, #2
 8001814:	4619      	mov	r1, r3
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fc1a 	bl	8001050 <MAX30105_setPulseWidth>
 800181c:	e00f      	b.n	800183e <MAX30105_setup+0x228>
	else if (pulseWidth == 411) MAX30105_setPulseWidth(MAX30105_handler, MAX30105_PULSEWIDTH_411); //18 bit resolution
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f240 129b 	movw	r2, #411	@ 0x19b
 8001824:	4293      	cmp	r3, r2
 8001826:	d105      	bne.n	8001834 <MAX30105_setup+0x21e>
 8001828:	2303      	movs	r3, #3
 800182a:	4619      	mov	r1, r3
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff fc0f 	bl	8001050 <MAX30105_setPulseWidth>
 8001832:	e004      	b.n	800183e <MAX30105_setup+0x228>
	else MAX30105_setPulseWidth(MAX30105_handler, MAX30105_PULSEWIDTH_69);
 8001834:	2300      	movs	r3, #0
 8001836:	4619      	mov	r1, r3
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff fc09 	bl	8001050 <MAX30105_setPulseWidth>
	//powerLevel = 0x02, 0.4mA - Presence detection of ~4 inch
	//powerLevel = 0x1F, 6.4mA - Presence detection of ~8 inch
	//powerLevel = 0x7F, 25.4mA - Presence detection of ~8 inch
	//powerLevel = 0xFF, 50.0mA - Presence detection of ~12 inch

	MAX30105_setPulseAmplitudeRed(MAX30105_handler, powerLevel);
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	4619      	mov	r1, r3
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff fc14 	bl	8001070 <MAX30105_setPulseAmplitudeRed>
	MAX30105_setPulseAmplitudeIR(MAX30105_handler, powerLevel);
 8001848:	78fb      	ldrb	r3, [r7, #3]
 800184a:	4619      	mov	r1, r3
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff fc20 	bl	8001092 <MAX30105_setPulseAmplitudeIR>
	MAX30105_setPulseAmplitudeGreen(MAX30105_handler, powerLevel);
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	4619      	mov	r1, r3
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff fc2c 	bl	80010b4 <MAX30105_setPulseAmplitudeGreen>
	MAX30105_setPulseAmplitudeProximity(MAX30105_handler, powerLevel);
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	4619      	mov	r1, r3
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff fc38 	bl	80010d6 <MAX30105_setPulseAmplitudeProximity>

	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	//Multi-LED Mode Configuration, Enable the reading of the three LEDs
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	MAX30105_enableSlot(MAX30105_handler, 1, SLOT_RED_LED);
 8001866:	2301      	movs	r3, #1
 8001868:	461a      	mov	r2, r3
 800186a:	2101      	movs	r1, #1
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff fc43 	bl	80010f8 <MAX30105_enableSlot>
	if (ledMode > 1) MAX30105_enableSlot(MAX30105_handler, 2, SLOT_IR_LED);
 8001872:	787b      	ldrb	r3, [r7, #1]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d905      	bls.n	8001884 <MAX30105_setup+0x26e>
 8001878:	2302      	movs	r3, #2
 800187a:	461a      	mov	r2, r3
 800187c:	2102      	movs	r1, #2
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fc3a 	bl	80010f8 <MAX30105_enableSlot>
	if (ledMode > 2) MAX30105_enableSlot(MAX30105_handler, 3, SLOT_GREEN_LED);
 8001884:	787b      	ldrb	r3, [r7, #1]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d905      	bls.n	8001896 <MAX30105_setup+0x280>
 800188a:	2303      	movs	r3, #3
 800188c:	461a      	mov	r2, r3
 800188e:	2103      	movs	r1, #3
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fc31 	bl	80010f8 <MAX30105_enableSlot>
	//enableSlot(1, SLOT_RED_PILOT);
	//enableSlot(2, SLOT_IR_PILOT);
	//enableSlot(3, SLOT_GREEN_PILOT);
	//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

	MAX30105_clearFIFO(MAX30105_handler);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff fe18 	bl	80014cc <MAX30105_clearFIFO>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b0b0      	sub	sp, #192	@ 0xc0
 80018a8:	af04      	add	r7, sp, #16
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	603b      	str	r3, [r7, #0]
  int32_t n_peak_interval_sum;
  
  int32_t n_y_ac, n_x_ac;
  int32_t n_spo2_calc; 
  int32_t n_y_dc_max, n_x_dc_max; 
  int32_t n_y_dc_max_idx = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int32_t n_x_dc_max_idx = 0; 
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  int32_t an_ratio[5], n_ratio_average; 
  int32_t n_nume, n_denom ;

  // calculates DC mean and subtract DC from ir
  un_ir_mean =0; 
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80018ca:	e010      	b.n	80018ee <maxim_heart_rate_and_oxygen_saturation+0x4a>
 80018cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	4413      	add	r3, r2
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018de:	4413      	add	r3, r2
 80018e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80018e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018e8:	3301      	adds	r3, #1
 80018ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80018ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbe9      	blt.n	80018cc <maxim_heart_rate_and_oxygen_saturation+0x28>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    
  // remove DC and invert signal so that we can use peak detector as valley detector
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
 8001906:	2300      	movs	r3, #0
 8001908:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800190c:	e014      	b.n	8001938 <maxim_heart_rate_and_oxygen_saturation+0x94>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ; 
 800190e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001920:	1a9b      	subs	r3, r3, r2
 8001922:	4619      	mov	r1, r3
 8001924:	4ab4      	ldr	r2, [pc, #720]	@ (8001bf8 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 8001926:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800192a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  
 800192e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001932:	3301      	adds	r3, #1
 8001934:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001938:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	429a      	cmp	r2, r3
 8001940:	dbe5      	blt.n	800190e <maxim_heart_rate_and_oxygen_saturation+0x6a>
    
  // 4 pt Moving Average
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8001942:	2300      	movs	r3, #0
 8001944:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001948:	e028      	b.n	800199c <maxim_heart_rate_and_oxygen_saturation+0xf8>
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;        
 800194a:	4aab      	ldr	r2, [pc, #684]	@ (8001bf8 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 800194c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001950:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001954:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001958:	3301      	adds	r3, #1
 800195a:	49a7      	ldr	r1, [pc, #668]	@ (8001bf8 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 800195c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001960:	441a      	add	r2, r3
 8001962:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001966:	3302      	adds	r3, #2
 8001968:	49a3      	ldr	r1, [pc, #652]	@ (8001bf8 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 800196a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800196e:	441a      	add	r2, r3
 8001970:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001974:	3303      	adds	r3, #3
 8001976:	49a0      	ldr	r1, [pc, #640]	@ (8001bf8 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 8001978:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800197c:	4413      	add	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	da00      	bge.n	8001984 <maxim_heart_rate_and_oxygen_saturation+0xe0>
 8001982:	3303      	adds	r3, #3
 8001984:	109b      	asrs	r3, r3, #2
 8001986:	4619      	mov	r1, r3
 8001988:	4a9b      	ldr	r2, [pc, #620]	@ (8001bf8 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 800198a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800198e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8001992:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001996:	3301      	adds	r3, #1
 8001998:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800199c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019a0:	2b5f      	cmp	r3, #95	@ 0x5f
 80019a2:	ddd2      	ble.n	800194a <maxim_heart_rate_and_oxygen_saturation+0xa6>
  }
  // calculate threshold  
  n_th1=0; 
 80019a4:	2300      	movs	r3, #0
 80019a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80019aa:	2300      	movs	r3, #0
 80019ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80019b0:	e00e      	b.n	80019d0 <maxim_heart_rate_and_oxygen_saturation+0x12c>
    n_th1 +=  an_x[k];
 80019b2:	4a91      	ldr	r2, [pc, #580]	@ (8001bf8 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 80019b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019bc:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80019c0:	4413      	add	r3, r2
 80019c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 80019c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019ca:	3301      	adds	r3, #1
 80019cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80019d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019d4:	2b63      	cmp	r3, #99	@ 0x63
 80019d6:	ddec      	ble.n	80019b2 <maxim_heart_rate_and_oxygen_saturation+0x10e>
  }
  n_th1=  n_th1/ ( BUFFER_SIZE);
 80019d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019dc:	4a87      	ldr	r2, [pc, #540]	@ (8001bfc <maxim_heart_rate_and_oxygen_saturation+0x358>)
 80019de:	fb82 1203 	smull	r1, r2, r2, r3
 80019e2:	1152      	asrs	r2, r2, #5
 80019e4:	17db      	asrs	r3, r3, #31
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if( n_th1<30) n_th1=30; // min allowed
 80019ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019f0:	2b1d      	cmp	r3, #29
 80019f2:	dc02      	bgt.n	80019fa <maxim_heart_rate_and_oxygen_saturation+0x156>
 80019f4:	231e      	movs	r3, #30
 80019f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if( n_th1>60) n_th1=60; // max allowed
 80019fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019fe:	2b3c      	cmp	r3, #60	@ 0x3c
 8001a00:	dd02      	ble.n	8001a08 <maxim_heart_rate_and_oxygen_saturation+0x164>
 8001a02:	233c      	movs	r3, #60	@ 0x3c
 8001a04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a0e:	e00c      	b.n	8001a2a <maxim_heart_rate_and_oxygen_saturation+0x186>
 8001a10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	33b0      	adds	r3, #176	@ 0xb0
 8001a18:	443b      	add	r3, r7
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f843 2c88 	str.w	r2, [r3, #-136]
 8001a20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a24:	3301      	adds	r3, #1
 8001a26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a2e:	2b0e      	cmp	r3, #14
 8001a30:	ddee      	ble.n	8001a10 <maxim_heart_rate_and_oxygen_saturation+0x16c>
  // since we flipped signal, we use peak detector as valley detector
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks 
 8001a32:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8001a36:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001a3a:	230f      	movs	r3, #15
 8001a3c:	9302      	str	r3, [sp, #8]
 8001a3e:	2304      	movs	r3, #4
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2364      	movs	r3, #100	@ 0x64
 8001a4a:	4a6b      	ldr	r2, [pc, #428]	@ (8001bf8 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 8001a4c:	f000 fa36 	bl	8001ebc <maxim_find_peaks>
  n_peak_interval_sum =0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (n_npks>=2){
 8001a56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	dd38      	ble.n	8001ace <maxim_heart_rate_and_oxygen_saturation+0x22a>
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a62:	e019      	b.n	8001a98 <maxim_heart_rate_and_oxygen_saturation+0x1f4>
 8001a64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	33b0      	adds	r3, #176	@ 0xb0
 8001a6c:	443b      	add	r3, r7
 8001a6e:	f853 2c88 	ldr.w	r2, [r3, #-136]
 8001a72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a76:	3b01      	subs	r3, #1
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	33b0      	adds	r3, #176	@ 0xb0
 8001a7c:	443b      	add	r3, r7
 8001a7e:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001a88:	4413      	add	r3, r2
 8001a8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001a8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a92:	3301      	adds	r3, #1
 8001a94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	dbe0      	blt.n	8001a64 <maxim_heart_rate_and_oxygen_saturation+0x1c0>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
 8001aa2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001aaa:	fb92 f3f3 	sdiv	r3, r2, r3
 8001aae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
 8001ab2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001ab6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001aba:	fb92 f2f3 	sdiv	r2, r2, r3
 8001abe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ac2:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 1;
 8001ac4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	e007      	b.n	8001ade <maxim_heart_rate_and_oxygen_saturation+0x23a>
  }
  else  { 
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
 8001ace:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ad2:	4a4b      	ldr	r2, [pc, #300]	@ (8001c00 <maxim_heart_rate_and_oxygen_saturation+0x35c>)
 8001ad4:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 0;
 8001ad6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
  }

  //  load raw value again for SPO2 calculation : RED(=y) and IR(=X)
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001ae4:	e01c      	b.n	8001b20 <maxim_heart_rate_and_oxygen_saturation+0x27c>
      an_x[k] =  pun_ir_buffer[k] ; 
 8001ae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	4413      	add	r3, r2
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	4619      	mov	r1, r3
 8001af4:	4a40      	ldr	r2, [pc, #256]	@ (8001bf8 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 8001af6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001afa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      an_y[k] =  pun_red_buffer[k] ; 
 8001afe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	4413      	add	r3, r2
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4a3d      	ldr	r2, [pc, #244]	@ (8001c04 <maxim_heart_rate_and_oxygen_saturation+0x360>)
 8001b0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 8001b16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b20:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	dbdd      	blt.n	8001ae6 <maxim_heart_rate_and_oxygen_saturation+0x242>
  }

  // find precise min near an_ir_valley_locs
  n_exact_ir_valley_locs_count =n_npks; 
 8001b2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  
  //using exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration an_ratio
  //finding AC/DC maximum of raw

  n_ratio_average =0; 
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  n_i_ratio_count = 0; 
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  for(k=0; k< 5; k++) an_ratio[k]=0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b42:	e00c      	b.n	8001b5e <maxim_heart_rate_and_oxygen_saturation+0x2ba>
 8001b44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	33b0      	adds	r3, #176	@ 0xb0
 8001b4c:	443b      	add	r3, r7
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f843 2c9c 	str.w	r2, [r3, #-156]
 8001b54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b58:	3301      	adds	r3, #1
 8001b5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	ddee      	ble.n	8001b44 <maxim_heart_rate_and_oxygen_saturation+0x2a0>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b6c:	e015      	b.n	8001b9a <maxim_heart_rate_and_oxygen_saturation+0x2f6>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
 8001b6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	33b0      	adds	r3, #176	@ 0xb0
 8001b76:	443b      	add	r3, r7
 8001b78:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001b7c:	2b64      	cmp	r3, #100	@ 0x64
 8001b7e:	dd07      	ble.n	8001b90 <maxim_heart_rate_and_oxygen_saturation+0x2ec>
      *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	4a1f      	ldr	r2, [pc, #124]	@ (8001c00 <maxim_heart_rate_and_oxygen_saturation+0x35c>)
 8001b84:	601a      	str	r2, [r3, #0]
      *pch_spo2_valid  = 0; 
 8001b86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
 8001b8e:	e189      	b.n	8001ea4 <maxim_heart_rate_and_oxygen_saturation+0x600>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8001b90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b94:	3301      	adds	r3, #1
 8001b96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001b9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	dbe3      	blt.n	8001b6e <maxim_heart_rate_and_oxygen_saturation+0x2ca>
      return;
    }
  }
  // find max between two valley locations 
  // and use an_ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2 
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001bac:	e129      	b.n	8001e02 <maxim_heart_rate_and_oxygen_saturation+0x55e>
    n_y_dc_max= -16777216 ; 
 8001bae:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8001bb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    n_x_dc_max= -16777216; 
 8001bb6:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8001bba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
 8001bbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	33b0      	adds	r3, #176	@ 0xb0
 8001bc8:	443b      	add	r3, r7
 8001bca:	f853 2c88 	ldr.w	r2, [r3, #-136]
 8001bce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	33b0      	adds	r3, #176	@ 0xb0
 8001bd6:	443b      	add	r3, r7
 8001bd8:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	f340 810a 	ble.w	8001df8 <maxim_heart_rate_and_oxygen_saturation+0x554>
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 8001be4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	33b0      	adds	r3, #176	@ 0xb0
 8001bec:	443b      	add	r3, r7
 8001bee:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001bf6:	e034      	b.n	8001c62 <maxim_heart_rate_and_oxygen_saturation+0x3be>
 8001bf8:	20000654 	.word	0x20000654
 8001bfc:	51eb851f 	.word	0x51eb851f
 8001c00:	fffffc19 	.word	0xfffffc19
 8001c04:	200007e4 	.word	0x200007e4
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 8001c08:	4aa8      	ldr	r2, [pc, #672]	@ (8001eac <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8001c0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c12:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001c16:	429a      	cmp	r2, r3
 8001c18:	da0a      	bge.n	8001c30 <maxim_heart_rate_and_oxygen_saturation+0x38c>
 8001c1a:	4aa4      	ldr	r2, [pc, #656]	@ (8001eac <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8001c1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001c28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 8001c30:	4a9f      	ldr	r2, [pc, #636]	@ (8001eb0 <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8001c32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	da0a      	bge.n	8001c58 <maxim_heart_rate_and_oxygen_saturation+0x3b4>
 8001c42:	4a9b      	ldr	r2, [pc, #620]	@ (8001eb0 <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8001c44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 8001c58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001c62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c66:	3301      	adds	r3, #1
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	33b0      	adds	r3, #176	@ 0xb0
 8001c6c:	443b      	add	r3, r7
 8001c6e:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001c72:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001c76:	429a      	cmp	r2, r3
 8001c78:	dbc6      	blt.n	8001c08 <maxim_heart_rate_and_oxygen_saturation+0x364>
      }
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
 8001c7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c7e:	3301      	adds	r3, #1
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	33b0      	adds	r3, #176	@ 0xb0
 8001c84:	443b      	add	r3, r7
 8001c86:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001c8a:	4a89      	ldr	r2, [pc, #548]	@ (8001eb0 <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8001c8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	33b0      	adds	r3, #176	@ 0xb0
 8001c98:	443b      	add	r3, r7
 8001c9a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001c9e:	4984      	ldr	r1, [pc, #528]	@ (8001eb0 <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8001ca0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ca4:	1ad2      	subs	r2, r2, r3
 8001ca6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	33b0      	adds	r3, #176	@ 0xb0
 8001cae:	443b      	add	r3, r7
 8001cb0:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001cb4:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001cb8:	1acb      	subs	r3, r1, r3
 8001cba:	fb02 f303 	mul.w	r3, r2, r3
 8001cbe:	677b      	str	r3, [r7, #116]	@ 0x74
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ; 
 8001cc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	33b0      	adds	r3, #176	@ 0xb0
 8001cc8:	443b      	add	r3, r7
 8001cca:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001cce:	4a78      	ldr	r2, [pc, #480]	@ (8001eb0 <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8001cd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001cd8:	3301      	adds	r3, #1
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	33b0      	adds	r3, #176	@ 0xb0
 8001cde:	443b      	add	r3, r7
 8001ce0:	f853 1c88 	ldr.w	r1, [r3, #-136]
 8001ce4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	33b0      	adds	r3, #176	@ 0xb0
 8001cec:	443b      	add	r3, r7
 8001cee:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001cf2:	1acb      	subs	r3, r1, r3
 8001cf4:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001cf6:	fb91 f3f3 	sdiv	r3, r1, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	677b      	str	r3, [r7, #116]	@ 0x74
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw 
 8001cfe:	4a6c      	ldr	r2, [pc, #432]	@ (8001eb0 <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8001d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	677b      	str	r3, [r7, #116]	@ 0x74
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
 8001d0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d12:	3301      	adds	r3, #1
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	33b0      	adds	r3, #176	@ 0xb0
 8001d18:	443b      	add	r3, r7
 8001d1a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001d1e:	4a63      	ldr	r2, [pc, #396]	@ (8001eac <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8001d20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	33b0      	adds	r3, #176	@ 0xb0
 8001d2c:	443b      	add	r3, r7
 8001d2e:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001d32:	495e      	ldr	r1, [pc, #376]	@ (8001eac <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8001d34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d38:	1ad2      	subs	r2, r2, r3
 8001d3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	33b0      	adds	r3, #176	@ 0xb0
 8001d42:	443b      	add	r3, r7
 8001d44:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001d48:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8001d4c:	1acb      	subs	r3, r1, r3
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	673b      	str	r3, [r7, #112]	@ 0x70
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]); 
 8001d54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	33b0      	adds	r3, #176	@ 0xb0
 8001d5c:	443b      	add	r3, r7
 8001d5e:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001d62:	4a52      	ldr	r2, [pc, #328]	@ (8001eac <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8001d64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	33b0      	adds	r3, #176	@ 0xb0
 8001d72:	443b      	add	r3, r7
 8001d74:	f853 1c88 	ldr.w	r1, [r3, #-136]
 8001d78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	33b0      	adds	r3, #176	@ 0xb0
 8001d80:	443b      	add	r3, r7
 8001d82:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8001d86:	1acb      	subs	r3, r1, r3
 8001d88:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001d8a:	fb91 f3f3 	sdiv	r3, r1, r3
 8001d8e:	4413      	add	r3, r2
 8001d90:	673b      	str	r3, [r7, #112]	@ 0x70
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw 
 8001d92:	4a46      	ldr	r2, [pc, #280]	@ (8001eac <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8001d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	673b      	str	r3, [r7, #112]	@ 0x70
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 8001da2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001da4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001da8:	fb02 f303 	mul.w	r3, r2, r3
 8001dac:	11db      	asrs	r3, r3, #7
 8001dae:	66fb      	str	r3, [r7, #108]	@ 0x6c
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
 8001db0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001db2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001db6:	fb02 f303 	mul.w	r3, r2, r3
 8001dba:	11db      	asrs	r3, r3, #7
 8001dbc:	66bb      	str	r3, [r7, #104]	@ 0x68
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 8001dbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	dd19      	ble.n	8001df8 <maxim_heart_rate_and_oxygen_saturation+0x554>
 8001dc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	dc15      	bgt.n	8001df8 <maxim_heart_rate_and_oxygen_saturation+0x554>
 8001dcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d012      	beq.n	8001df8 <maxim_heart_rate_and_oxygen_saturation+0x554>
      {   
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 8001dd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001dd4:	2264      	movs	r2, #100	@ 0x64
 8001dd6:	fb03 f202 	mul.w	r2, r3, r2
 8001dda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ddc:	fb92 f2f3 	sdiv	r2, r2, r3
 8001de0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	33b0      	adds	r3, #176	@ 0xb0
 8001de8:	443b      	add	r3, r7
 8001dea:	f843 2c9c 	str.w	r2, [r3, #-156]
        n_i_ratio_count++;
 8001dee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001df2:	3301      	adds	r3, #1
 8001df4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8001df8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001e02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e06:	3b01      	subs	r3, #1
 8001e08:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	f6ff aece 	blt.w	8001bae <maxim_heart_rate_and_oxygen_saturation+0x30a>
      }
    }
  }
  // choose median value since PPG signal may varies from beat to beat
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f942 	bl	80020a4 <maxim_sort_ascend>
  n_middle_idx= n_i_ratio_count/2;
 8001e20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e24:	0fda      	lsrs	r2, r3, #31
 8001e26:	4413      	add	r3, r2
 8001e28:	105b      	asrs	r3, r3, #1
 8001e2a:	67fb      	str	r3, [r7, #124]	@ 0x7c

  if (n_middle_idx >1)
 8001e2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	dd13      	ble.n	8001e5a <maxim_heart_rate_and_oxygen_saturation+0x5b6>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 8001e32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e34:	3b01      	subs	r3, #1
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	33b0      	adds	r3, #176	@ 0xb0
 8001e3a:	443b      	add	r3, r7
 8001e3c:	f853 2c9c 	ldr.w	r2, [r3, #-156]
 8001e40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	33b0      	adds	r3, #176	@ 0xb0
 8001e46:	443b      	add	r3, r7
 8001e48:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	0fda      	lsrs	r2, r3, #31
 8001e50:	4413      	add	r3, r2
 8001e52:	105b      	asrs	r3, r3, #1
 8001e54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001e58:	e007      	b.n	8001e6a <maxim_heart_rate_and_oxygen_saturation+0x5c6>
  else
    n_ratio_average = an_ratio[n_middle_idx ];
 8001e5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	33b0      	adds	r3, #176	@ 0xb0
 8001e60:	443b      	add	r3, r7
 8001e62:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001e66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  if( n_ratio_average>2 && n_ratio_average <184){
 8001e6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	dd11      	ble.n	8001e96 <maxim_heart_rate_and_oxygen_saturation+0x5f2>
 8001e72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e76:	2bb7      	cmp	r3, #183	@ 0xb7
 8001e78:	dc0d      	bgt.n	8001e96 <maxim_heart_rate_and_oxygen_saturation+0x5f2>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 8001e7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001eb4 <maxim_heart_rate_and_oxygen_saturation+0x610>)
 8001e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e80:	4413      	add	r3, r2
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	67bb      	str	r3, [r7, #120]	@ 0x78
    *pn_spo2 = n_spo2_calc ;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001e8a:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 8001e8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
 8001e94:	e006      	b.n	8001ea4 <maxim_heart_rate_and_oxygen_saturation+0x600>
  }
  else{
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	4a07      	ldr	r2, [pc, #28]	@ (8001eb8 <maxim_heart_rate_and_oxygen_saturation+0x614>)
 8001e9a:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0; 
 8001e9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
  }
}
 8001ea4:	37b0      	adds	r7, #176	@ 0xb0
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000654 	.word	0x20000654
 8001eb0:	200007e4 	.word	0x200007e4
 8001eb4:	08005f30 	.word	0x08005f30
 8001eb8:	fffffc19 	.word	0xfffffc19

08001ebc <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af02      	add	r7, sp, #8
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	68b9      	ldr	r1, [r7, #8]
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 f812 	bl	8001efe <maxim_peaks_above_min_height>
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 f87f 	bl	8001fe4 <maxim_remove_close_peaks>
  *n_npks = min( *n_npks, n_max_num );
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	bfa8      	it	ge
 8001ef0:	461a      	movge	r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	601a      	str	r2, [r3, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 8001efe:	b480      	push	{r7}
 8001f00:	b087      	sub	sp, #28
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	603b      	str	r3, [r7, #0]
  int32_t i = 1, n_width;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	617b      	str	r3, [r7, #20]
  *n_npks = 0;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
  
  while (i < n_size-1){
 8001f16:	e05a      	b.n	8001fce <maxim_peaks_above_min_height+0xd0>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6a3a      	ldr	r2, [r7, #32]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	da4f      	bge.n	8001fc8 <maxim_peaks_above_min_height+0xca>
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	440b      	add	r3, r1
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	dd40      	ble.n	8001fc8 <maxim_peaks_above_min_height+0xca>
      n_width = 1;
 8001f46:	2301      	movs	r3, #1
 8001f48:	613b      	str	r3, [r7, #16]
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 8001f4a:	e002      	b.n	8001f52 <maxim_peaks_above_min_height+0x54>
        n_width++;
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	613b      	str	r3, [r7, #16]
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4413      	add	r3, r2
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	dd0d      	ble.n	8001f7a <maxim_peaks_above_min_height+0x7c>
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	6979      	ldr	r1, [r7, #20]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	440b      	add	r3, r1
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	440b      	add	r3, r1
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d0e8      	beq.n	8001f4c <maxim_peaks_above_min_height+0x4e>
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	6979      	ldr	r1, [r7, #20]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	440b      	add	r3, r1
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	440b      	add	r3, r1
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	dd13      	ble.n	8001fbe <maxim_peaks_above_min_height+0xc0>
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b0e      	cmp	r3, #14
 8001f9c:	dc0f      	bgt.n	8001fbe <maxim_peaks_above_min_height+0xc0>
        pn_locs[(*n_npks)++] = i;    
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	1c59      	adds	r1, r3, #1
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	6011      	str	r1, [r2, #0]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4413      	add	r3, r2
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	601a      	str	r2, [r3, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4413      	add	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8001fbc:	e007      	b.n	8001fce <maxim_peaks_above_min_height+0xd0>
      }
      else
        i += n_width;
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8001fc6:	e002      	b.n	8001fce <maxim_peaks_above_min_height+0xd0>
    }
    else
      i++;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
  while (i < n_size-1){
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	db9f      	blt.n	8001f18 <maxim_peaks_above_min_height+0x1a>
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	371c      	adds	r7, #28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
    
  int32_t i, j, n_old_npks, n_dist;
    
  /* Order peaks from large to small */
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68f9      	ldr	r1, [r7, #12]
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f894 	bl	8002128 <maxim_sort_indices_descend>

  for ( i = -1; i < *pn_npks; i++ ){
 8002000:	f04f 33ff 	mov.w	r3, #4294967295
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	e03e      	b.n	8002086 <maxim_remove_close_peaks+0xa2>
    n_old_npks = *pn_npks;
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	617b      	str	r3, [r7, #20]
    *pn_npks = i+1;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	601a      	str	r2, [r3, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3301      	adds	r3, #1
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	e02c      	b.n	8002078 <maxim_remove_close_peaks+0x94>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4413      	add	r3, r2
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202e:	d005      	beq.n	800203c <maxim_remove_close_peaks+0x58>
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	68f9      	ldr	r1, [r7, #12]
 8002036:	440b      	add	r3, r1
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	e001      	b.n	8002040 <maxim_remove_close_peaks+0x5c>
 800203c:	f04f 33ff 	mov.w	r3, #4294967295
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	613b      	str	r3, [r7, #16]
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	dc04      	bgt.n	8002056 <maxim_remove_close_peaks+0x72>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	425b      	negs	r3, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	429a      	cmp	r2, r3
 8002054:	da0d      	bge.n	8002072 <maxim_remove_close_peaks+0x8e>
        pn_locs[(*pn_npks)++] = pn_locs[j];
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	441a      	add	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	1c58      	adds	r0, r3, #1
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	6008      	str	r0, [r1, #0]
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	68f9      	ldr	r1, [r7, #12]
 800206c:	440b      	add	r3, r1
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	601a      	str	r2, [r3, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	3301      	adds	r3, #1
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	429a      	cmp	r2, r3
 800207e:	dbce      	blt.n	800201e <maxim_remove_close_peaks+0x3a>
  for ( i = -1; i < *pn_npks; i++ ){
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	3301      	adds	r3, #1
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	429a      	cmp	r2, r3
 800208e:	dbbb      	blt.n	8002008 <maxim_remove_close_peaks+0x24>
    }
  }

  // Resort indices int32_to ascending order
  maxim_sort_ascend( pn_locs, *pn_npks );
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4619      	mov	r1, r3
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f804 	bl	80020a4 <maxim_sort_ascend>
}
 800209c:	bf00      	nop
 800209e:	3720      	adds	r7, #32
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 80020ae:	2301      	movs	r3, #1
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	e02f      	b.n	8002114 <maxim_sort_ascend+0x70>
    n_temp = pn_x[i];
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	4413      	add	r3, r2
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	60fb      	str	r3, [r7, #12]
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	e00f      	b.n	80020e6 <maxim_sort_ascend+0x42>
        pn_x[j] = pn_x[j-1];
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80020cc:	3b01      	subs	r3, #1
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	441a      	add	r2, r3
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	440b      	add	r3, r1
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	601a      	str	r2, [r3, #0]
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	dd0a      	ble.n	8002102 <maxim_sort_ascend+0x5e>
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80020f2:	3b01      	subs	r3, #1
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	429a      	cmp	r2, r3
 8002100:	dbe1      	blt.n	80020c6 <maxim_sort_ascend+0x22>
    pn_x[j] = n_temp;
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	601a      	str	r2, [r3, #0]
  for (i = 1; i < n_size; i++) {
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	3301      	adds	r3, #1
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	dbcb      	blt.n	80020b4 <maxim_sort_ascend+0x10>
  }
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
 8002128:	b480      	push	{r7}
 800212a:	b089      	sub	sp, #36	@ 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 8002134:	2301      	movs	r3, #1
 8002136:	61fb      	str	r3, [r7, #28]
 8002138:	e037      	b.n	80021aa <maxim_sort_indices_descend+0x82>
    n_temp = pn_indx[i];
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	4413      	add	r3, r2
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	617b      	str	r3, [r7, #20]
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	e00f      	b.n	800216c <maxim_sort_indices_descend+0x44>
      pn_indx[j] = pn_indx[j-1];
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002152:	3b01      	subs	r3, #1
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	441a      	add	r2, r3
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	68b9      	ldr	r1, [r7, #8]
 8002160:	440b      	add	r3, r1
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	601a      	str	r2, [r3, #0]
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	3b01      	subs	r3, #1
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	2b00      	cmp	r3, #0
 8002170:	dd12      	ble.n	8002198 <maxim_sort_indices_descend+0x70>
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4413      	add	r3, r2
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002182:	3b01      	subs	r3, #1
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	68b9      	ldr	r1, [r7, #8]
 8002188:	440b      	add	r3, r1
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	68f9      	ldr	r1, [r7, #12]
 8002190:	440b      	add	r3, r1
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	dcd9      	bgt.n	800214c <maxim_sort_indices_descend+0x24>
    pn_indx[j] = n_temp;
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	4413      	add	r3, r2
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	601a      	str	r2, [r3, #0]
  for (i = 1; i < n_size; i++) {
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	3301      	adds	r3, #1
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	dbc3      	blt.n	800213a <maxim_sort_indices_descend+0x12>
  }
}
 80021b2:	bf00      	nop
 80021b4:	bf00      	nop
 80021b6:	3724      	adds	r7, #36	@ 0x24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr
	...

080021c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021c6:	4b15      	ldr	r3, [pc, #84]	@ (800221c <HAL_MspInit+0x5c>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	4a14      	ldr	r2, [pc, #80]	@ (800221c <HAL_MspInit+0x5c>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6193      	str	r3, [r2, #24]
 80021d2:	4b12      	ldr	r3, [pc, #72]	@ (800221c <HAL_MspInit+0x5c>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	4b0f      	ldr	r3, [pc, #60]	@ (800221c <HAL_MspInit+0x5c>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	4a0e      	ldr	r2, [pc, #56]	@ (800221c <HAL_MspInit+0x5c>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021e8:	61d3      	str	r3, [r2, #28]
 80021ea:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <HAL_MspInit+0x5c>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <HAL_MspInit+0x60>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	4a04      	ldr	r2, [pc, #16]	@ (8002220 <HAL_MspInit+0x60>)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002212:	bf00      	nop
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	40021000 	.word	0x40021000
 8002220:	40010000 	.word	0x40010000

08002224 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0310 	add.w	r3, r7, #16
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a16      	ldr	r2, [pc, #88]	@ (8002298 <HAL_I2C_MspInit+0x74>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d124      	bne.n	800228e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002244:	4b15      	ldr	r3, [pc, #84]	@ (800229c <HAL_I2C_MspInit+0x78>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	4a14      	ldr	r2, [pc, #80]	@ (800229c <HAL_I2C_MspInit+0x78>)
 800224a:	f043 0308 	orr.w	r3, r3, #8
 800224e:	6193      	str	r3, [r2, #24]
 8002250:	4b12      	ldr	r3, [pc, #72]	@ (800229c <HAL_I2C_MspInit+0x78>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800225c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002260:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002262:	2312      	movs	r3, #18
 8002264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226a:	f107 0310 	add.w	r3, r7, #16
 800226e:	4619      	mov	r1, r3
 8002270:	480b      	ldr	r0, [pc, #44]	@ (80022a0 <HAL_I2C_MspInit+0x7c>)
 8002272:	f000 fcbb 	bl	8002bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002276:	4b09      	ldr	r3, [pc, #36]	@ (800229c <HAL_I2C_MspInit+0x78>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4a08      	ldr	r2, [pc, #32]	@ (800229c <HAL_I2C_MspInit+0x78>)
 800227c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002280:	61d3      	str	r3, [r2, #28]
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <HAL_I2C_MspInit+0x78>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800228e:	bf00      	nop
 8002290:	3720      	adds	r7, #32
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40005800 	.word	0x40005800
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010c00 	.word	0x40010c00

080022a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08c      	sub	sp, #48	@ 0x30
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 031c 	add.w	r3, r7, #28
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a42      	ldr	r2, [pc, #264]	@ (80023c8 <HAL_UART_MspInit+0x124>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d13a      	bne.n	800233a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022c4:	4b41      	ldr	r3, [pc, #260]	@ (80023cc <HAL_UART_MspInit+0x128>)
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	4a40      	ldr	r2, [pc, #256]	@ (80023cc <HAL_UART_MspInit+0x128>)
 80022ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80022ce:	61d3      	str	r3, [r2, #28]
 80022d0:	4b3e      	ldr	r3, [pc, #248]	@ (80023cc <HAL_UART_MspInit+0x128>)
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022d8:	61bb      	str	r3, [r7, #24]
 80022da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022dc:	4b3b      	ldr	r3, [pc, #236]	@ (80023cc <HAL_UART_MspInit+0x128>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	4a3a      	ldr	r2, [pc, #232]	@ (80023cc <HAL_UART_MspInit+0x128>)
 80022e2:	f043 0310 	orr.w	r3, r3, #16
 80022e6:	6193      	str	r3, [r2, #24]
 80022e8:	4b38      	ldr	r3, [pc, #224]	@ (80023cc <HAL_UART_MspInit+0x128>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022fe:	2303      	movs	r3, #3
 8002300:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002302:	f107 031c 	add.w	r3, r7, #28
 8002306:	4619      	mov	r1, r3
 8002308:	4831      	ldr	r0, [pc, #196]	@ (80023d0 <HAL_UART_MspInit+0x12c>)
 800230a:	f000 fc6f 	bl	8002bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800230e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002314:	2300      	movs	r3, #0
 8002316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	4619      	mov	r1, r3
 8002322:	482b      	ldr	r0, [pc, #172]	@ (80023d0 <HAL_UART_MspInit+0x12c>)
 8002324:	f000 fc62 	bl	8002bec <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002328:	2200      	movs	r2, #0
 800232a:	2100      	movs	r1, #0
 800232c:	2034      	movs	r0, #52	@ 0x34
 800232e:	f000 fae4 	bl	80028fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002332:	2034      	movs	r0, #52	@ 0x34
 8002334:	f000 fafd 	bl	8002932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002338:	e042      	b.n	80023c0 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a25      	ldr	r2, [pc, #148]	@ (80023d4 <HAL_UART_MspInit+0x130>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d13d      	bne.n	80023c0 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002344:	4b21      	ldr	r3, [pc, #132]	@ (80023cc <HAL_UART_MspInit+0x128>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4a20      	ldr	r2, [pc, #128]	@ (80023cc <HAL_UART_MspInit+0x128>)
 800234a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800234e:	6193      	str	r3, [r2, #24]
 8002350:	4b1e      	ldr	r3, [pc, #120]	@ (80023cc <HAL_UART_MspInit+0x128>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235c:	4b1b      	ldr	r3, [pc, #108]	@ (80023cc <HAL_UART_MspInit+0x128>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	4a1a      	ldr	r2, [pc, #104]	@ (80023cc <HAL_UART_MspInit+0x128>)
 8002362:	f043 0308 	orr.w	r3, r3, #8
 8002366:	6193      	str	r3, [r2, #24]
 8002368:	4b18      	ldr	r3, [pc, #96]	@ (80023cc <HAL_UART_MspInit+0x128>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002374:	2340      	movs	r3, #64	@ 0x40
 8002376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800237c:	2303      	movs	r3, #3
 800237e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002380:	f107 031c 	add.w	r3, r7, #28
 8002384:	4619      	mov	r1, r3
 8002386:	4814      	ldr	r0, [pc, #80]	@ (80023d8 <HAL_UART_MspInit+0x134>)
 8002388:	f000 fc30 	bl	8002bec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800238c:	2380      	movs	r3, #128	@ 0x80
 800238e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002390:	2300      	movs	r3, #0
 8002392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002398:	f107 031c 	add.w	r3, r7, #28
 800239c:	4619      	mov	r1, r3
 800239e:	480e      	ldr	r0, [pc, #56]	@ (80023d8 <HAL_UART_MspInit+0x134>)
 80023a0:	f000 fc24 	bl	8002bec <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 80023a4:	4b0d      	ldr	r3, [pc, #52]	@ (80023dc <HAL_UART_MspInit+0x138>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ac:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80023b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b4:	f043 0304 	orr.w	r3, r3, #4
 80023b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023ba:	4a08      	ldr	r2, [pc, #32]	@ (80023dc <HAL_UART_MspInit+0x138>)
 80023bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023be:	6053      	str	r3, [r2, #4]
}
 80023c0:	bf00      	nop
 80023c2:	3730      	adds	r7, #48	@ 0x30
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40004c00 	.word	0x40004c00
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40011000 	.word	0x40011000
 80023d4:	40013800 	.word	0x40013800
 80023d8:	40010c00 	.word	0x40010c00
 80023dc:	40010000 	.word	0x40010000

080023e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <NMI_Handler+0x4>

080023e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <HardFault_Handler+0x4>

080023f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f4:	bf00      	nop
 80023f6:	e7fd      	b.n	80023f4 <MemManage_Handler+0x4>

080023f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fc:	bf00      	nop
 80023fe:	e7fd      	b.n	80023fc <BusFault_Handler+0x4>

08002400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002404:	bf00      	nop
 8002406:	e7fd      	b.n	8002404 <UsageFault_Handler+0x4>

08002408 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002430:	f000 f94c 	bl	80026cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}

08002438 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800243c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002440:	f000 fd80 	bl	8002f44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}

08002448 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
//		RxHead = 0;
//	}
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800244c:	4802      	ldr	r0, [pc, #8]	@ (8002458 <UART4_IRQHandler+0x10>)
 800244e:	f002 faf7 	bl	8004a40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200002d4 	.word	0x200002d4

0800245c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002464:	4a14      	ldr	r2, [pc, #80]	@ (80024b8 <_sbrk+0x5c>)
 8002466:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <_sbrk+0x60>)
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002470:	4b13      	ldr	r3, [pc, #76]	@ (80024c0 <_sbrk+0x64>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002478:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <_sbrk+0x64>)
 800247a:	4a12      	ldr	r2, [pc, #72]	@ (80024c4 <_sbrk+0x68>)
 800247c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800247e:	4b10      	ldr	r3, [pc, #64]	@ (80024c0 <_sbrk+0x64>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	429a      	cmp	r2, r3
 800248a:	d207      	bcs.n	800249c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800248c:	f003 f884 	bl	8005598 <__errno>
 8002490:	4603      	mov	r3, r0
 8002492:	220c      	movs	r2, #12
 8002494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
 800249a:	e009      	b.n	80024b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800249c:	4b08      	ldr	r3, [pc, #32]	@ (80024c0 <_sbrk+0x64>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024a2:	4b07      	ldr	r3, [pc, #28]	@ (80024c0 <_sbrk+0x64>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	4a05      	ldr	r2, [pc, #20]	@ (80024c0 <_sbrk+0x64>)
 80024ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ae:	68fb      	ldr	r3, [r7, #12]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	2000c000 	.word	0x2000c000
 80024bc:	00000400 	.word	0x00000400
 80024c0:	20000974 	.word	0x20000974
 80024c4:	20000fd0 	.word	0x20000fd0

080024c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <_getchar>:
unsigned char TxBuf[TXBUFSIZE];// transmit buffer
int TxHead =0; // circular buffer index
int TxTail =0; // circular buffer index

unsigned char _getchar()
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
	unsigned char temp;
	while (RxTail == RxHead)
 80024da:	e003      	b.n	80024e4 <_getchar+0x10>
	{
		HAL_Delay(1000);
 80024dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024e0:	f000 f910 	bl	8002704 <HAL_Delay>
	while (RxTail == RxHead)
 80024e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002520 <_getchar+0x4c>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002524 <_getchar+0x50>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d0f5      	beq.n	80024dc <_getchar+0x8>
	}
	temp = RxBuf[RxTail];
 80024f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002520 <_getchar+0x4c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002528 <_getchar+0x54>)
 80024f6:	5cd3      	ldrb	r3, [r2, r3]
 80024f8:	71fb      	strb	r3, [r7, #7]
	if (++RxTail > (RXBUFSIZE -1))
 80024fa:	4b09      	ldr	r3, [pc, #36]	@ (8002520 <_getchar+0x4c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3301      	adds	r3, #1
 8002500:	4a07      	ldr	r2, [pc, #28]	@ (8002520 <_getchar+0x4c>)
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <_getchar+0x4c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800250c:	db02      	blt.n	8002514 <_getchar+0x40>
	{
		RxTail = 0;
 800250e:	4b04      	ldr	r3, [pc, #16]	@ (8002520 <_getchar+0x4c>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
	}
	return(temp);
 8002514:	79fb      	ldrb	r3, [r7, #7]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000d7c 	.word	0x20000d7c
 8002524:	20000d78 	.word	0x20000d78
 8002528:	20000978 	.word	0x20000978

0800252c <USART_Init>:
 *      Author: ADMIN
 */
#include "uart_print.h"

void USART_Init(USART_H_t *USART_handler, UART_HandleTypeDef *huart)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
	USART_handler->_huart = huart;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	601a      	str	r2, [r3, #0]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <UART_sendByte>:

void UART_sendByte(USART_H_t *USART_handler, uint8_t data)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	460b      	mov	r3, r1
 8002550:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(USART_handler->_huart, &data, 1, 100);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	1cf9      	adds	r1, r7, #3
 8002558:	2364      	movs	r3, #100	@ 0x64
 800255a:	2201      	movs	r2, #1
 800255c:	f002 f9c0 	bl	80048e0 <HAL_UART_Transmit>
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <USART_sendChar>:

void USART_sendChar(USART_H_t *USART_handler, uint8_t data)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	70fb      	strb	r3, [r7, #3]
    UART_sendByte(USART_handler, data);
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	4619      	mov	r1, r3
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff ffe4 	bl	8002546 <UART_sendByte>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <USART_put>:

void USART_put(USART_H_t *USART_handler, char *data)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
	while (data[0] != '\0')
 8002590:	e008      	b.n	80025a4 <USART_put+0x1e>
	{
		USART_sendChar(USART_handler, data[0]);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	4619      	mov	r1, r3
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ffe5 	bl	8002568 <USART_sendChar>
		data++;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	3301      	adds	r3, #1
 80025a2:	603b      	str	r3, [r7, #0]
	while (data[0] != '\0')
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f2      	bne.n	8002592 <USART_put+0xc>
	}
}
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <USART_Transmit>:

int USART_Transmit(USART_H_t *USART_handler, const char *fmt, ...)
{
 80025b8:	b40e      	push	{r1, r2, r3}
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
	int done;
	va_list args;
	static char buffer[256];
	va_start(args, fmt);
 80025c2:	f107 0320 	add.w	r3, r7, #32
 80025c6:	60bb      	str	r3, [r7, #8]

	done = vsnprintf(buffer, 256, fmt, args);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	69fa      	ldr	r2, [r7, #28]
 80025cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025d0:	4807      	ldr	r0, [pc, #28]	@ (80025f0 <USART_Transmit+0x38>)
 80025d2:	f002 ffcb 	bl	800556c <vsniprintf>
 80025d6:	60f8      	str	r0, [r7, #12]

	USART_put(USART_handler, buffer);
 80025d8:	4905      	ldr	r1, [pc, #20]	@ (80025f0 <USART_Transmit+0x38>)
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ffd3 	bl	8002586 <USART_put>

	va_end(args);
	return done;
 80025e0:	68fb      	ldr	r3, [r7, #12]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025ec:	b003      	add	sp, #12
 80025ee:	4770      	bx	lr
 80025f0:	20000d80 	.word	0x20000d80

080025f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025f4:	480c      	ldr	r0, [pc, #48]	@ (8002628 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025f6:	490d      	ldr	r1, [pc, #52]	@ (800262c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002630 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025fc:	e002      	b.n	8002604 <LoopCopyDataInit>

080025fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002602:	3304      	adds	r3, #4

08002604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002608:	d3f9      	bcc.n	80025fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800260a:	4a0a      	ldr	r2, [pc, #40]	@ (8002634 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800260c:	4c0a      	ldr	r4, [pc, #40]	@ (8002638 <LoopFillZerobss+0x22>)
  movs r3, #0
 800260e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002610:	e001      	b.n	8002616 <LoopFillZerobss>

08002612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002614:	3204      	adds	r2, #4

08002616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002618:	d3fb      	bcc.n	8002612 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800261a:	f7ff ff55 	bl	80024c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800261e:	f002 ffc1 	bl	80055a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002622:	f7fe f953 	bl	80008cc <main>
  bx lr
 8002626:	4770      	bx	lr
  ldr r0, =_sdata
 8002628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800262c:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8002630:	08006050 	.word	0x08006050
  ldr r2, =_sbss
 8002634:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 8002638:	20000fcc 	.word	0x20000fcc

0800263c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800263c:	e7fe      	b.n	800263c <ADC1_2_IRQHandler>
	...

08002640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002644:	4b08      	ldr	r3, [pc, #32]	@ (8002668 <HAL_Init+0x28>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a07      	ldr	r2, [pc, #28]	@ (8002668 <HAL_Init+0x28>)
 800264a:	f043 0310 	orr.w	r3, r3, #16
 800264e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002650:	2003      	movs	r0, #3
 8002652:	f000 f947 	bl	80028e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002656:	200f      	movs	r0, #15
 8002658:	f000 f808 	bl	800266c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800265c:	f7ff fdb0 	bl	80021c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40022000 	.word	0x40022000

0800266c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002674:	4b12      	ldr	r3, [pc, #72]	@ (80026c0 <HAL_InitTick+0x54>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b12      	ldr	r3, [pc, #72]	@ (80026c4 <HAL_InitTick+0x58>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	4619      	mov	r1, r3
 800267e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002682:	fbb3 f3f1 	udiv	r3, r3, r1
 8002686:	fbb2 f3f3 	udiv	r3, r2, r3
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f95f 	bl	800294e <HAL_SYSTICK_Config>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e00e      	b.n	80026b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b0f      	cmp	r3, #15
 800269e:	d80a      	bhi.n	80026b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a0:	2200      	movs	r2, #0
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295
 80026a8:	f000 f927 	bl	80028fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026ac:	4a06      	ldr	r2, [pc, #24]	@ (80026c8 <HAL_InitTick+0x5c>)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e000      	b.n	80026b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000208 	.word	0x20000208
 80026c4:	20000210 	.word	0x20000210
 80026c8:	2000020c 	.word	0x2000020c

080026cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026d0:	4b05      	ldr	r3, [pc, #20]	@ (80026e8 <HAL_IncTick+0x1c>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <HAL_IncTick+0x20>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4413      	add	r3, r2
 80026dc:	4a03      	ldr	r2, [pc, #12]	@ (80026ec <HAL_IncTick+0x20>)
 80026de:	6013      	str	r3, [r2, #0]
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	20000210 	.word	0x20000210
 80026ec:	20000e80 	.word	0x20000e80

080026f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return uwTick;
 80026f4:	4b02      	ldr	r3, [pc, #8]	@ (8002700 <HAL_GetTick+0x10>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	20000e80 	.word	0x20000e80

08002704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800270c:	f7ff fff0 	bl	80026f0 <HAL_GetTick>
 8002710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d005      	beq.n	800272a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800271e:	4b0a      	ldr	r3, [pc, #40]	@ (8002748 <HAL_Delay+0x44>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4413      	add	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800272a:	bf00      	nop
 800272c:	f7ff ffe0 	bl	80026f0 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	429a      	cmp	r2, r3
 800273a:	d8f7      	bhi.n	800272c <HAL_Delay+0x28>
  {
  }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000210 	.word	0x20000210

0800274c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800275c:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <__NVIC_SetPriorityGrouping+0x44>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002768:	4013      	ands	r3, r2
 800276a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002774:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800277c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800277e:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <__NVIC_SetPriorityGrouping+0x44>)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	60d3      	str	r3, [r2, #12]
}
 8002784:	bf00      	nop
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002798:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <__NVIC_GetPriorityGrouping+0x18>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	f003 0307 	and.w	r3, r3, #7
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	db0b      	blt.n	80027da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	f003 021f 	and.w	r2, r3, #31
 80027c8:	4906      	ldr	r1, [pc, #24]	@ (80027e4 <__NVIC_EnableIRQ+0x34>)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	2001      	movs	r0, #1
 80027d2:	fa00 f202 	lsl.w	r2, r0, r2
 80027d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr
 80027e4:	e000e100 	.word	0xe000e100

080027e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	6039      	str	r1, [r7, #0]
 80027f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	db0a      	blt.n	8002812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	490c      	ldr	r1, [pc, #48]	@ (8002834 <__NVIC_SetPriority+0x4c>)
 8002802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002806:	0112      	lsls	r2, r2, #4
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	440b      	add	r3, r1
 800280c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002810:	e00a      	b.n	8002828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	4908      	ldr	r1, [pc, #32]	@ (8002838 <__NVIC_SetPriority+0x50>)
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	3b04      	subs	r3, #4
 8002820:	0112      	lsls	r2, r2, #4
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	440b      	add	r3, r1
 8002826:	761a      	strb	r2, [r3, #24]
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	e000e100 	.word	0xe000e100
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800283c:	b480      	push	{r7}
 800283e:	b089      	sub	sp, #36	@ 0x24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f1c3 0307 	rsb	r3, r3, #7
 8002856:	2b04      	cmp	r3, #4
 8002858:	bf28      	it	cs
 800285a:	2304      	movcs	r3, #4
 800285c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3304      	adds	r3, #4
 8002862:	2b06      	cmp	r3, #6
 8002864:	d902      	bls.n	800286c <NVIC_EncodePriority+0x30>
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3b03      	subs	r3, #3
 800286a:	e000      	b.n	800286e <NVIC_EncodePriority+0x32>
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002870:	f04f 32ff 	mov.w	r2, #4294967295
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43da      	mvns	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	401a      	ands	r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002884:	f04f 31ff 	mov.w	r1, #4294967295
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	fa01 f303 	lsl.w	r3, r1, r3
 800288e:	43d9      	mvns	r1, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002894:	4313      	orrs	r3, r2
         );
}
 8002896:	4618      	mov	r0, r3
 8002898:	3724      	adds	r7, #36	@ 0x24
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028b0:	d301      	bcc.n	80028b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028b2:	2301      	movs	r3, #1
 80028b4:	e00f      	b.n	80028d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b6:	4a0a      	ldr	r2, [pc, #40]	@ (80028e0 <SysTick_Config+0x40>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028be:	210f      	movs	r1, #15
 80028c0:	f04f 30ff 	mov.w	r0, #4294967295
 80028c4:	f7ff ff90 	bl	80027e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c8:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <SysTick_Config+0x40>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ce:	4b04      	ldr	r3, [pc, #16]	@ (80028e0 <SysTick_Config+0x40>)
 80028d0:	2207      	movs	r2, #7
 80028d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	e000e010 	.word	0xe000e010

080028e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff ff2d 	bl	800274c <__NVIC_SetPriorityGrouping>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800290c:	f7ff ff42 	bl	8002794 <__NVIC_GetPriorityGrouping>
 8002910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	6978      	ldr	r0, [r7, #20]
 8002918:	f7ff ff90 	bl	800283c <NVIC_EncodePriority>
 800291c:	4602      	mov	r2, r0
 800291e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff5f 	bl	80027e8 <__NVIC_SetPriority>
}
 800292a:	bf00      	nop
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800293c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff35 	bl	80027b0 <__NVIC_EnableIRQ>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff ffa2 	bl	80028a0 <SysTick_Config>
 800295c:	4603      	mov	r3, r0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002966:	b480      	push	{r7}
 8002968:	b085      	sub	sp, #20
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d008      	beq.n	8002990 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2204      	movs	r2, #4
 8002982:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e020      	b.n	80029d2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 020e 	bic.w	r2, r2, #14
 800299e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0201 	bic.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b8:	2101      	movs	r1, #1
 80029ba:	fa01 f202 	lsl.w	r2, r1, r2
 80029be:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d005      	beq.n	8002a00 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2204      	movs	r2, #4
 80029f8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	73fb      	strb	r3, [r7, #15]
 80029fe:	e0d6      	b.n	8002bae <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 020e 	bic.w	r2, r2, #14
 8002a0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0201 	bic.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	4b64      	ldr	r3, [pc, #400]	@ (8002bb8 <HAL_DMA_Abort_IT+0x1dc>)
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d958      	bls.n	8002ade <HAL_DMA_Abort_IT+0x102>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a62      	ldr	r2, [pc, #392]	@ (8002bbc <HAL_DMA_Abort_IT+0x1e0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d04f      	beq.n	8002ad6 <HAL_DMA_Abort_IT+0xfa>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a61      	ldr	r2, [pc, #388]	@ (8002bc0 <HAL_DMA_Abort_IT+0x1e4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d048      	beq.n	8002ad2 <HAL_DMA_Abort_IT+0xf6>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a5f      	ldr	r2, [pc, #380]	@ (8002bc4 <HAL_DMA_Abort_IT+0x1e8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d040      	beq.n	8002acc <HAL_DMA_Abort_IT+0xf0>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a5e      	ldr	r2, [pc, #376]	@ (8002bc8 <HAL_DMA_Abort_IT+0x1ec>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d038      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0xea>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a5c      	ldr	r2, [pc, #368]	@ (8002bcc <HAL_DMA_Abort_IT+0x1f0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d030      	beq.n	8002ac0 <HAL_DMA_Abort_IT+0xe4>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a5b      	ldr	r2, [pc, #364]	@ (8002bd0 <HAL_DMA_Abort_IT+0x1f4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d028      	beq.n	8002aba <HAL_DMA_Abort_IT+0xde>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a52      	ldr	r2, [pc, #328]	@ (8002bb8 <HAL_DMA_Abort_IT+0x1dc>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d020      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0xd8>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a57      	ldr	r2, [pc, #348]	@ (8002bd4 <HAL_DMA_Abort_IT+0x1f8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d019      	beq.n	8002ab0 <HAL_DMA_Abort_IT+0xd4>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a55      	ldr	r2, [pc, #340]	@ (8002bd8 <HAL_DMA_Abort_IT+0x1fc>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d012      	beq.n	8002aac <HAL_DMA_Abort_IT+0xd0>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a54      	ldr	r2, [pc, #336]	@ (8002bdc <HAL_DMA_Abort_IT+0x200>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d00a      	beq.n	8002aa6 <HAL_DMA_Abort_IT+0xca>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a52      	ldr	r2, [pc, #328]	@ (8002be0 <HAL_DMA_Abort_IT+0x204>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d102      	bne.n	8002aa0 <HAL_DMA_Abort_IT+0xc4>
 8002a9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a9e:	e01b      	b.n	8002ad8 <HAL_DMA_Abort_IT+0xfc>
 8002aa0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002aa4:	e018      	b.n	8002ad8 <HAL_DMA_Abort_IT+0xfc>
 8002aa6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002aaa:	e015      	b.n	8002ad8 <HAL_DMA_Abort_IT+0xfc>
 8002aac:	2310      	movs	r3, #16
 8002aae:	e013      	b.n	8002ad8 <HAL_DMA_Abort_IT+0xfc>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e011      	b.n	8002ad8 <HAL_DMA_Abort_IT+0xfc>
 8002ab4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ab8:	e00e      	b.n	8002ad8 <HAL_DMA_Abort_IT+0xfc>
 8002aba:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002abe:	e00b      	b.n	8002ad8 <HAL_DMA_Abort_IT+0xfc>
 8002ac0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ac4:	e008      	b.n	8002ad8 <HAL_DMA_Abort_IT+0xfc>
 8002ac6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002aca:	e005      	b.n	8002ad8 <HAL_DMA_Abort_IT+0xfc>
 8002acc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ad0:	e002      	b.n	8002ad8 <HAL_DMA_Abort_IT+0xfc>
 8002ad2:	2310      	movs	r3, #16
 8002ad4:	e000      	b.n	8002ad8 <HAL_DMA_Abort_IT+0xfc>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	4a42      	ldr	r2, [pc, #264]	@ (8002be4 <HAL_DMA_Abort_IT+0x208>)
 8002ada:	6053      	str	r3, [r2, #4]
 8002adc:	e057      	b.n	8002b8e <HAL_DMA_Abort_IT+0x1b2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a36      	ldr	r2, [pc, #216]	@ (8002bbc <HAL_DMA_Abort_IT+0x1e0>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d04f      	beq.n	8002b88 <HAL_DMA_Abort_IT+0x1ac>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a34      	ldr	r2, [pc, #208]	@ (8002bc0 <HAL_DMA_Abort_IT+0x1e4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d048      	beq.n	8002b84 <HAL_DMA_Abort_IT+0x1a8>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a33      	ldr	r2, [pc, #204]	@ (8002bc4 <HAL_DMA_Abort_IT+0x1e8>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d040      	beq.n	8002b7e <HAL_DMA_Abort_IT+0x1a2>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a31      	ldr	r2, [pc, #196]	@ (8002bc8 <HAL_DMA_Abort_IT+0x1ec>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d038      	beq.n	8002b78 <HAL_DMA_Abort_IT+0x19c>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a30      	ldr	r2, [pc, #192]	@ (8002bcc <HAL_DMA_Abort_IT+0x1f0>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d030      	beq.n	8002b72 <HAL_DMA_Abort_IT+0x196>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a2e      	ldr	r2, [pc, #184]	@ (8002bd0 <HAL_DMA_Abort_IT+0x1f4>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d028      	beq.n	8002b6c <HAL_DMA_Abort_IT+0x190>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a26      	ldr	r2, [pc, #152]	@ (8002bb8 <HAL_DMA_Abort_IT+0x1dc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d020      	beq.n	8002b66 <HAL_DMA_Abort_IT+0x18a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a2a      	ldr	r2, [pc, #168]	@ (8002bd4 <HAL_DMA_Abort_IT+0x1f8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d019      	beq.n	8002b62 <HAL_DMA_Abort_IT+0x186>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a29      	ldr	r2, [pc, #164]	@ (8002bd8 <HAL_DMA_Abort_IT+0x1fc>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d012      	beq.n	8002b5e <HAL_DMA_Abort_IT+0x182>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a27      	ldr	r2, [pc, #156]	@ (8002bdc <HAL_DMA_Abort_IT+0x200>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00a      	beq.n	8002b58 <HAL_DMA_Abort_IT+0x17c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a26      	ldr	r2, [pc, #152]	@ (8002be0 <HAL_DMA_Abort_IT+0x204>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d102      	bne.n	8002b52 <HAL_DMA_Abort_IT+0x176>
 8002b4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b50:	e01b      	b.n	8002b8a <HAL_DMA_Abort_IT+0x1ae>
 8002b52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b56:	e018      	b.n	8002b8a <HAL_DMA_Abort_IT+0x1ae>
 8002b58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b5c:	e015      	b.n	8002b8a <HAL_DMA_Abort_IT+0x1ae>
 8002b5e:	2310      	movs	r3, #16
 8002b60:	e013      	b.n	8002b8a <HAL_DMA_Abort_IT+0x1ae>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e011      	b.n	8002b8a <HAL_DMA_Abort_IT+0x1ae>
 8002b66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b6a:	e00e      	b.n	8002b8a <HAL_DMA_Abort_IT+0x1ae>
 8002b6c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b70:	e00b      	b.n	8002b8a <HAL_DMA_Abort_IT+0x1ae>
 8002b72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b76:	e008      	b.n	8002b8a <HAL_DMA_Abort_IT+0x1ae>
 8002b78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b7c:	e005      	b.n	8002b8a <HAL_DMA_Abort_IT+0x1ae>
 8002b7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b82:	e002      	b.n	8002b8a <HAL_DMA_Abort_IT+0x1ae>
 8002b84:	2310      	movs	r3, #16
 8002b86:	e000      	b.n	8002b8a <HAL_DMA_Abort_IT+0x1ae>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	4a17      	ldr	r2, [pc, #92]	@ (8002be8 <HAL_DMA_Abort_IT+0x20c>)
 8002b8c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	4798      	blx	r3
    } 
  }
  return status;
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40020080 	.word	0x40020080
 8002bbc:	40020008 	.word	0x40020008
 8002bc0:	4002001c 	.word	0x4002001c
 8002bc4:	40020030 	.word	0x40020030
 8002bc8:	40020044 	.word	0x40020044
 8002bcc:	40020058 	.word	0x40020058
 8002bd0:	4002006c 	.word	0x4002006c
 8002bd4:	40020408 	.word	0x40020408
 8002bd8:	4002041c 	.word	0x4002041c
 8002bdc:	40020430 	.word	0x40020430
 8002be0:	40020444 	.word	0x40020444
 8002be4:	40020400 	.word	0x40020400
 8002be8:	40020000 	.word	0x40020000

08002bec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b08b      	sub	sp, #44	@ 0x2c
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bfe:	e179      	b.n	8002ef4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c00:	2201      	movs	r2, #1
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	f040 8168 	bne.w	8002eee <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4a96      	ldr	r2, [pc, #600]	@ (8002e7c <HAL_GPIO_Init+0x290>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d05e      	beq.n	8002ce6 <HAL_GPIO_Init+0xfa>
 8002c28:	4a94      	ldr	r2, [pc, #592]	@ (8002e7c <HAL_GPIO_Init+0x290>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d875      	bhi.n	8002d1a <HAL_GPIO_Init+0x12e>
 8002c2e:	4a94      	ldr	r2, [pc, #592]	@ (8002e80 <HAL_GPIO_Init+0x294>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d058      	beq.n	8002ce6 <HAL_GPIO_Init+0xfa>
 8002c34:	4a92      	ldr	r2, [pc, #584]	@ (8002e80 <HAL_GPIO_Init+0x294>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d86f      	bhi.n	8002d1a <HAL_GPIO_Init+0x12e>
 8002c3a:	4a92      	ldr	r2, [pc, #584]	@ (8002e84 <HAL_GPIO_Init+0x298>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d052      	beq.n	8002ce6 <HAL_GPIO_Init+0xfa>
 8002c40:	4a90      	ldr	r2, [pc, #576]	@ (8002e84 <HAL_GPIO_Init+0x298>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d869      	bhi.n	8002d1a <HAL_GPIO_Init+0x12e>
 8002c46:	4a90      	ldr	r2, [pc, #576]	@ (8002e88 <HAL_GPIO_Init+0x29c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d04c      	beq.n	8002ce6 <HAL_GPIO_Init+0xfa>
 8002c4c:	4a8e      	ldr	r2, [pc, #568]	@ (8002e88 <HAL_GPIO_Init+0x29c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d863      	bhi.n	8002d1a <HAL_GPIO_Init+0x12e>
 8002c52:	4a8e      	ldr	r2, [pc, #568]	@ (8002e8c <HAL_GPIO_Init+0x2a0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d046      	beq.n	8002ce6 <HAL_GPIO_Init+0xfa>
 8002c58:	4a8c      	ldr	r2, [pc, #560]	@ (8002e8c <HAL_GPIO_Init+0x2a0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d85d      	bhi.n	8002d1a <HAL_GPIO_Init+0x12e>
 8002c5e:	2b12      	cmp	r3, #18
 8002c60:	d82a      	bhi.n	8002cb8 <HAL_GPIO_Init+0xcc>
 8002c62:	2b12      	cmp	r3, #18
 8002c64:	d859      	bhi.n	8002d1a <HAL_GPIO_Init+0x12e>
 8002c66:	a201      	add	r2, pc, #4	@ (adr r2, 8002c6c <HAL_GPIO_Init+0x80>)
 8002c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6c:	08002ce7 	.word	0x08002ce7
 8002c70:	08002cc1 	.word	0x08002cc1
 8002c74:	08002cd3 	.word	0x08002cd3
 8002c78:	08002d15 	.word	0x08002d15
 8002c7c:	08002d1b 	.word	0x08002d1b
 8002c80:	08002d1b 	.word	0x08002d1b
 8002c84:	08002d1b 	.word	0x08002d1b
 8002c88:	08002d1b 	.word	0x08002d1b
 8002c8c:	08002d1b 	.word	0x08002d1b
 8002c90:	08002d1b 	.word	0x08002d1b
 8002c94:	08002d1b 	.word	0x08002d1b
 8002c98:	08002d1b 	.word	0x08002d1b
 8002c9c:	08002d1b 	.word	0x08002d1b
 8002ca0:	08002d1b 	.word	0x08002d1b
 8002ca4:	08002d1b 	.word	0x08002d1b
 8002ca8:	08002d1b 	.word	0x08002d1b
 8002cac:	08002d1b 	.word	0x08002d1b
 8002cb0:	08002cc9 	.word	0x08002cc9
 8002cb4:	08002cdd 	.word	0x08002cdd
 8002cb8:	4a75      	ldr	r2, [pc, #468]	@ (8002e90 <HAL_GPIO_Init+0x2a4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cbe:	e02c      	b.n	8002d1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	623b      	str	r3, [r7, #32]
          break;
 8002cc6:	e029      	b.n	8002d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	623b      	str	r3, [r7, #32]
          break;
 8002cd0:	e024      	b.n	8002d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	3308      	adds	r3, #8
 8002cd8:	623b      	str	r3, [r7, #32]
          break;
 8002cda:	e01f      	b.n	8002d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	623b      	str	r3, [r7, #32]
          break;
 8002ce4:	e01a      	b.n	8002d1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cee:	2304      	movs	r3, #4
 8002cf0:	623b      	str	r3, [r7, #32]
          break;
 8002cf2:	e013      	b.n	8002d1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d105      	bne.n	8002d08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cfc:	2308      	movs	r3, #8
 8002cfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	611a      	str	r2, [r3, #16]
          break;
 8002d06:	e009      	b.n	8002d1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d08:	2308      	movs	r3, #8
 8002d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	615a      	str	r2, [r3, #20]
          break;
 8002d12:	e003      	b.n	8002d1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d14:	2300      	movs	r3, #0
 8002d16:	623b      	str	r3, [r7, #32]
          break;
 8002d18:	e000      	b.n	8002d1c <HAL_GPIO_Init+0x130>
          break;
 8002d1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	2bff      	cmp	r3, #255	@ 0xff
 8002d20:	d801      	bhi.n	8002d26 <HAL_GPIO_Init+0x13a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	e001      	b.n	8002d2a <HAL_GPIO_Init+0x13e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2bff      	cmp	r3, #255	@ 0xff
 8002d30:	d802      	bhi.n	8002d38 <HAL_GPIO_Init+0x14c>
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	e002      	b.n	8002d3e <HAL_GPIO_Init+0x152>
 8002d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3a:	3b08      	subs	r3, #8
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	210f      	movs	r1, #15
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	401a      	ands	r2, r3
 8002d50:	6a39      	ldr	r1, [r7, #32]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	fa01 f303 	lsl.w	r3, r1, r3
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 80c1 	beq.w	8002eee <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d6c:	4b49      	ldr	r3, [pc, #292]	@ (8002e94 <HAL_GPIO_Init+0x2a8>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	4a48      	ldr	r2, [pc, #288]	@ (8002e94 <HAL_GPIO_Init+0x2a8>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6193      	str	r3, [r2, #24]
 8002d78:	4b46      	ldr	r3, [pc, #280]	@ (8002e94 <HAL_GPIO_Init+0x2a8>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	60bb      	str	r3, [r7, #8]
 8002d82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d84:	4a44      	ldr	r2, [pc, #272]	@ (8002e98 <HAL_GPIO_Init+0x2ac>)
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	220f      	movs	r2, #15
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4013      	ands	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a3c      	ldr	r2, [pc, #240]	@ (8002e9c <HAL_GPIO_Init+0x2b0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d01f      	beq.n	8002df0 <HAL_GPIO_Init+0x204>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a3b      	ldr	r2, [pc, #236]	@ (8002ea0 <HAL_GPIO_Init+0x2b4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d019      	beq.n	8002dec <HAL_GPIO_Init+0x200>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a3a      	ldr	r2, [pc, #232]	@ (8002ea4 <HAL_GPIO_Init+0x2b8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d013      	beq.n	8002de8 <HAL_GPIO_Init+0x1fc>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a39      	ldr	r2, [pc, #228]	@ (8002ea8 <HAL_GPIO_Init+0x2bc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d00d      	beq.n	8002de4 <HAL_GPIO_Init+0x1f8>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a38      	ldr	r2, [pc, #224]	@ (8002eac <HAL_GPIO_Init+0x2c0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d007      	beq.n	8002de0 <HAL_GPIO_Init+0x1f4>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a37      	ldr	r2, [pc, #220]	@ (8002eb0 <HAL_GPIO_Init+0x2c4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d101      	bne.n	8002ddc <HAL_GPIO_Init+0x1f0>
 8002dd8:	2305      	movs	r3, #5
 8002dda:	e00a      	b.n	8002df2 <HAL_GPIO_Init+0x206>
 8002ddc:	2306      	movs	r3, #6
 8002dde:	e008      	b.n	8002df2 <HAL_GPIO_Init+0x206>
 8002de0:	2304      	movs	r3, #4
 8002de2:	e006      	b.n	8002df2 <HAL_GPIO_Init+0x206>
 8002de4:	2303      	movs	r3, #3
 8002de6:	e004      	b.n	8002df2 <HAL_GPIO_Init+0x206>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e002      	b.n	8002df2 <HAL_GPIO_Init+0x206>
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <HAL_GPIO_Init+0x206>
 8002df0:	2300      	movs	r3, #0
 8002df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df4:	f002 0203 	and.w	r2, r2, #3
 8002df8:	0092      	lsls	r2, r2, #2
 8002dfa:	4093      	lsls	r3, r2
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e02:	4925      	ldr	r1, [pc, #148]	@ (8002e98 <HAL_GPIO_Init+0x2ac>)
 8002e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e06:	089b      	lsrs	r3, r3, #2
 8002e08:	3302      	adds	r3, #2
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d006      	beq.n	8002e2a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e1c:	4b25      	ldr	r3, [pc, #148]	@ (8002eb4 <HAL_GPIO_Init+0x2c8>)
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	4924      	ldr	r1, [pc, #144]	@ (8002eb4 <HAL_GPIO_Init+0x2c8>)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	608b      	str	r3, [r1, #8]
 8002e28:	e006      	b.n	8002e38 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e2a:	4b22      	ldr	r3, [pc, #136]	@ (8002eb4 <HAL_GPIO_Init+0x2c8>)
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	4920      	ldr	r1, [pc, #128]	@ (8002eb4 <HAL_GPIO_Init+0x2c8>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d006      	beq.n	8002e52 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e44:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb4 <HAL_GPIO_Init+0x2c8>)
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	491a      	ldr	r1, [pc, #104]	@ (8002eb4 <HAL_GPIO_Init+0x2c8>)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60cb      	str	r3, [r1, #12]
 8002e50:	e006      	b.n	8002e60 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e52:	4b18      	ldr	r3, [pc, #96]	@ (8002eb4 <HAL_GPIO_Init+0x2c8>)
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	4916      	ldr	r1, [pc, #88]	@ (8002eb4 <HAL_GPIO_Init+0x2c8>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d025      	beq.n	8002eb8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e6c:	4b11      	ldr	r3, [pc, #68]	@ (8002eb4 <HAL_GPIO_Init+0x2c8>)
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	4910      	ldr	r1, [pc, #64]	@ (8002eb4 <HAL_GPIO_Init+0x2c8>)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
 8002e78:	e025      	b.n	8002ec6 <HAL_GPIO_Init+0x2da>
 8002e7a:	bf00      	nop
 8002e7c:	10320000 	.word	0x10320000
 8002e80:	10310000 	.word	0x10310000
 8002e84:	10220000 	.word	0x10220000
 8002e88:	10210000 	.word	0x10210000
 8002e8c:	10120000 	.word	0x10120000
 8002e90:	10110000 	.word	0x10110000
 8002e94:	40021000 	.word	0x40021000
 8002e98:	40010000 	.word	0x40010000
 8002e9c:	40010800 	.word	0x40010800
 8002ea0:	40010c00 	.word	0x40010c00
 8002ea4:	40011000 	.word	0x40011000
 8002ea8:	40011400 	.word	0x40011400
 8002eac:	40011800 	.word	0x40011800
 8002eb0:	40011c00 	.word	0x40011c00
 8002eb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eb8:	4b15      	ldr	r3, [pc, #84]	@ (8002f10 <HAL_GPIO_Init+0x324>)
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	4913      	ldr	r1, [pc, #76]	@ (8002f10 <HAL_GPIO_Init+0x324>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d006      	beq.n	8002ee0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8002f10 <HAL_GPIO_Init+0x324>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	490e      	ldr	r1, [pc, #56]	@ (8002f10 <HAL_GPIO_Init+0x324>)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
 8002ede:	e006      	b.n	8002eee <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <HAL_GPIO_Init+0x324>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	4909      	ldr	r1, [pc, #36]	@ (8002f10 <HAL_GPIO_Init+0x324>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efa:	fa22 f303 	lsr.w	r3, r2, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f47f ae7e 	bne.w	8002c00 <HAL_GPIO_Init+0x14>
  }
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	372c      	adds	r7, #44	@ 0x2c
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	40010400 	.word	0x40010400

08002f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	807b      	strh	r3, [r7, #2]
 8002f20:	4613      	mov	r3, r2
 8002f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f24:	787b      	ldrb	r3, [r7, #1]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f2a:	887a      	ldrh	r2, [r7, #2]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f30:	e003      	b.n	8002f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f32:	887b      	ldrh	r3, [r7, #2]
 8002f34:	041a      	lsls	r2, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	611a      	str	r2, [r3, #16]
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr

08002f44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f4e:	4b08      	ldr	r3, [pc, #32]	@ (8002f70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d006      	beq.n	8002f68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f5a:	4a05      	ldr	r2, [pc, #20]	@ (8002f70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f806 	bl	8002f74 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40010400 	.word	0x40010400

08002f74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e12b      	b.n	80031f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff f938 	bl	8002224 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2224      	movs	r2, #36	@ 0x24
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fec:	f001 fbe2 	bl	80047b4 <HAL_RCC_GetPCLK1Freq>
 8002ff0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4a81      	ldr	r2, [pc, #516]	@ (80031fc <HAL_I2C_Init+0x274>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d807      	bhi.n	800300c <HAL_I2C_Init+0x84>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4a80      	ldr	r2, [pc, #512]	@ (8003200 <HAL_I2C_Init+0x278>)
 8003000:	4293      	cmp	r3, r2
 8003002:	bf94      	ite	ls
 8003004:	2301      	movls	r3, #1
 8003006:	2300      	movhi	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	e006      	b.n	800301a <HAL_I2C_Init+0x92>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a7d      	ldr	r2, [pc, #500]	@ (8003204 <HAL_I2C_Init+0x27c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	bf94      	ite	ls
 8003014:	2301      	movls	r3, #1
 8003016:	2300      	movhi	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e0e7      	b.n	80031f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4a78      	ldr	r2, [pc, #480]	@ (8003208 <HAL_I2C_Init+0x280>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	0c9b      	lsrs	r3, r3, #18
 800302c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	430a      	orrs	r2, r1
 8003040:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4a6a      	ldr	r2, [pc, #424]	@ (80031fc <HAL_I2C_Init+0x274>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d802      	bhi.n	800305c <HAL_I2C_Init+0xd4>
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	3301      	adds	r3, #1
 800305a:	e009      	b.n	8003070 <HAL_I2C_Init+0xe8>
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003062:	fb02 f303 	mul.w	r3, r2, r3
 8003066:	4a69      	ldr	r2, [pc, #420]	@ (800320c <HAL_I2C_Init+0x284>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	099b      	lsrs	r3, r3, #6
 800306e:	3301      	adds	r3, #1
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	430b      	orrs	r3, r1
 8003076:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003082:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	495c      	ldr	r1, [pc, #368]	@ (80031fc <HAL_I2C_Init+0x274>)
 800308c:	428b      	cmp	r3, r1
 800308e:	d819      	bhi.n	80030c4 <HAL_I2C_Init+0x13c>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1e59      	subs	r1, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	fbb1 f3f3 	udiv	r3, r1, r3
 800309e:	1c59      	adds	r1, r3, #1
 80030a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030a4:	400b      	ands	r3, r1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <HAL_I2C_Init+0x138>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1e59      	subs	r1, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030b8:	3301      	adds	r3, #1
 80030ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030be:	e051      	b.n	8003164 <HAL_I2C_Init+0x1dc>
 80030c0:	2304      	movs	r3, #4
 80030c2:	e04f      	b.n	8003164 <HAL_I2C_Init+0x1dc>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d111      	bne.n	80030f0 <HAL_I2C_Init+0x168>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1e58      	subs	r0, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6859      	ldr	r1, [r3, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	440b      	add	r3, r1
 80030da:	fbb0 f3f3 	udiv	r3, r0, r3
 80030de:	3301      	adds	r3, #1
 80030e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	e012      	b.n	8003116 <HAL_I2C_Init+0x18e>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	1e58      	subs	r0, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6859      	ldr	r1, [r3, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	0099      	lsls	r1, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	fbb0 f3f3 	udiv	r3, r0, r3
 8003106:	3301      	adds	r3, #1
 8003108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_I2C_Init+0x196>
 800311a:	2301      	movs	r3, #1
 800311c:	e022      	b.n	8003164 <HAL_I2C_Init+0x1dc>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10e      	bne.n	8003144 <HAL_I2C_Init+0x1bc>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1e58      	subs	r0, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6859      	ldr	r1, [r3, #4]
 800312e:	460b      	mov	r3, r1
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	440b      	add	r3, r1
 8003134:	fbb0 f3f3 	udiv	r3, r0, r3
 8003138:	3301      	adds	r3, #1
 800313a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003142:	e00f      	b.n	8003164 <HAL_I2C_Init+0x1dc>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1e58      	subs	r0, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	0099      	lsls	r1, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	fbb0 f3f3 	udiv	r3, r0, r3
 800315a:	3301      	adds	r3, #1
 800315c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003160:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	6809      	ldr	r1, [r1, #0]
 8003168:	4313      	orrs	r3, r2
 800316a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69da      	ldr	r2, [r3, #28]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003192:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6911      	ldr	r1, [r2, #16]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68d2      	ldr	r2, [r2, #12]
 800319e:	4311      	orrs	r1, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	430b      	orrs	r3, r1
 80031a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	000186a0 	.word	0x000186a0
 8003200:	001e847f 	.word	0x001e847f
 8003204:	003d08ff 	.word	0x003d08ff
 8003208:	431bde83 	.word	0x431bde83
 800320c:	10624dd3 	.word	0x10624dd3

08003210 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	607a      	str	r2, [r7, #4]
 800321a:	461a      	mov	r2, r3
 800321c:	460b      	mov	r3, r1
 800321e:	817b      	strh	r3, [r7, #10]
 8003220:	4613      	mov	r3, r2
 8003222:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003224:	f7ff fa64 	bl	80026f0 <HAL_GetTick>
 8003228:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b20      	cmp	r3, #32
 8003234:	f040 80e0 	bne.w	80033f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	2319      	movs	r3, #25
 800323e:	2201      	movs	r2, #1
 8003240:	4970      	ldr	r1, [pc, #448]	@ (8003404 <HAL_I2C_Master_Transmit+0x1f4>)
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fcb6 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800324e:	2302      	movs	r3, #2
 8003250:	e0d3      	b.n	80033fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_I2C_Master_Transmit+0x50>
 800325c:	2302      	movs	r3, #2
 800325e:	e0cc      	b.n	80033fa <HAL_I2C_Master_Transmit+0x1ea>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b01      	cmp	r3, #1
 8003274:	d007      	beq.n	8003286 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0201 	orr.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003294:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2221      	movs	r2, #33	@ 0x21
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2210      	movs	r2, #16
 80032a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	893a      	ldrh	r2, [r7, #8]
 80032b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4a50      	ldr	r2, [pc, #320]	@ (8003408 <HAL_I2C_Master_Transmit+0x1f8>)
 80032c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032c8:	8979      	ldrh	r1, [r7, #10]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	6a3a      	ldr	r2, [r7, #32]
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 fb20 	bl	8003914 <I2C_MasterRequestWrite>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e08d      	b.n	80033fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032de:	2300      	movs	r3, #0
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032f4:	e066      	b.n	80033c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	6a39      	ldr	r1, [r7, #32]
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 fd74 	bl	8003de8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00d      	beq.n	8003322 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	2b04      	cmp	r3, #4
 800330c:	d107      	bne.n	800331e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800331c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e06b      	b.n	80033fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003326:	781a      	ldrb	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b04      	cmp	r3, #4
 800335e:	d11b      	bne.n	8003398 <HAL_I2C_Master_Transmit+0x188>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003364:	2b00      	cmp	r3, #0
 8003366:	d017      	beq.n	8003398 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336c:	781a      	ldrb	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	6a39      	ldr	r1, [r7, #32]
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 fd6b 	bl	8003e78 <I2C_WaitOnBTFFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00d      	beq.n	80033c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d107      	bne.n	80033c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e01a      	b.n	80033fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d194      	bne.n	80032f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	e000      	b.n	80033fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033f8:	2302      	movs	r3, #2
  }
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	00100002 	.word	0x00100002
 8003408:	ffff0000 	.word	0xffff0000

0800340c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08c      	sub	sp, #48	@ 0x30
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	607a      	str	r2, [r7, #4]
 8003416:	461a      	mov	r2, r3
 8003418:	460b      	mov	r3, r1
 800341a:	817b      	strh	r3, [r7, #10]
 800341c:	4613      	mov	r3, r2
 800341e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003424:	f7ff f964 	bl	80026f0 <HAL_GetTick>
 8003428:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b20      	cmp	r3, #32
 8003434:	f040 824b 	bne.w	80038ce <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	2319      	movs	r3, #25
 800343e:	2201      	movs	r2, #1
 8003440:	497f      	ldr	r1, [pc, #508]	@ (8003640 <HAL_I2C_Master_Receive+0x234>)
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 fbb6 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800344e:	2302      	movs	r3, #2
 8003450:	e23e      	b.n	80038d0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_I2C_Master_Receive+0x54>
 800345c:	2302      	movs	r3, #2
 800345e:	e237      	b.n	80038d0 <HAL_I2C_Master_Receive+0x4c4>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b01      	cmp	r3, #1
 8003474:	d007      	beq.n	8003486 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003494:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2222      	movs	r2, #34	@ 0x22
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2210      	movs	r2, #16
 80034a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	893a      	ldrh	r2, [r7, #8]
 80034b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4a5f      	ldr	r2, [pc, #380]	@ (8003644 <HAL_I2C_Master_Receive+0x238>)
 80034c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034c8:	8979      	ldrh	r1, [r7, #10]
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 faa2 	bl	8003a18 <I2C_MasterRequestRead>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e1f8      	b.n	80038d0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d113      	bne.n	800350e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	61fb      	str	r3, [r7, #28]
 80034fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	e1cc      	b.n	80038a8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003512:	2b01      	cmp	r3, #1
 8003514:	d11e      	bne.n	8003554 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003524:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003526:	b672      	cpsid	i
}
 8003528:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	61bb      	str	r3, [r7, #24]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	61bb      	str	r3, [r7, #24]
 800353e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800354e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003550:	b662      	cpsie	i
}
 8003552:	e035      	b.n	80035c0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003558:	2b02      	cmp	r3, #2
 800355a:	d11e      	bne.n	800359a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800356a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800356c:	b672      	cpsid	i
}
 800356e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003594:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003596:	b662      	cpsie	i
}
 8003598:	e012      	b.n	80035c0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035aa:	2300      	movs	r3, #0
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80035c0:	e172      	b.n	80038a8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	f200 811f 	bhi.w	800380a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d123      	bne.n	800361c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 fc95 	bl	8003f08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e173      	b.n	80038d0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800361a:	e145      	b.n	80038a8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003620:	2b02      	cmp	r3, #2
 8003622:	d152      	bne.n	80036ca <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362a:	2200      	movs	r2, #0
 800362c:	4906      	ldr	r1, [pc, #24]	@ (8003648 <HAL_I2C_Master_Receive+0x23c>)
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fac0 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d008      	beq.n	800364c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e148      	b.n	80038d0 <HAL_I2C_Master_Receive+0x4c4>
 800363e:	bf00      	nop
 8003640:	00100002 	.word	0x00100002
 8003644:	ffff0000 	.word	0xffff0000
 8003648:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800364c:	b672      	cpsid	i
}
 800364e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800365e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003692:	b662      	cpsie	i
}
 8003694:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036c8:	e0ee      	b.n	80038a8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d0:	2200      	movs	r2, #0
 80036d2:	4981      	ldr	r1, [pc, #516]	@ (80038d8 <HAL_I2C_Master_Receive+0x4cc>)
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 fa6d 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0f5      	b.n	80038d0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80036f4:	b672      	cpsid	i
}
 80036f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800372a:	4b6c      	ldr	r3, [pc, #432]	@ (80038dc <HAL_I2C_Master_Receive+0x4d0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	08db      	lsrs	r3, r3, #3
 8003730:	4a6b      	ldr	r2, [pc, #428]	@ (80038e0 <HAL_I2C_Master_Receive+0x4d4>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	0a1a      	lsrs	r2, r3, #8
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	00da      	lsls	r2, r3, #3
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	3b01      	subs	r3, #1
 8003748:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d118      	bne.n	8003782 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	f043 0220 	orr.w	r2, r3, #32
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003772:	b662      	cpsie	i
}
 8003774:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e0a6      	b.n	80038d0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b04      	cmp	r3, #4
 800378e:	d1d9      	bne.n	8003744 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800379e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80037d2:	b662      	cpsie	i
}
 80037d4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003808:	e04e      	b.n	80038a8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800380a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800380c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 fb7a 	bl	8003f08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e058      	b.n	80038d0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b04      	cmp	r3, #4
 800385c:	d124      	bne.n	80038a8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003862:	2b03      	cmp	r3, #3
 8003864:	d107      	bne.n	8003876 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003874:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f47f ae88 	bne.w	80035c2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	e000      	b.n	80038d0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80038ce:	2302      	movs	r3, #2
  }
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3728      	adds	r7, #40	@ 0x28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	00010004 	.word	0x00010004
 80038dc:	20000208 	.word	0x20000208
 80038e0:	14f8b589 	.word	0x14f8b589

080038e4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f2:	b2db      	uxtb	r3, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr

080038fe <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800390a:	4618      	mov	r0, r3
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	607a      	str	r2, [r7, #4]
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	460b      	mov	r3, r1
 8003922:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003928:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b08      	cmp	r3, #8
 800392e:	d006      	beq.n	800393e <I2C_MasterRequestWrite+0x2a>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d003      	beq.n	800393e <I2C_MasterRequestWrite+0x2a>
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800393c:	d108      	bne.n	8003950 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	e00b      	b.n	8003968 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003954:	2b12      	cmp	r3, #18
 8003956:	d107      	bne.n	8003968 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003966:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 f91d 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00d      	beq.n	800399c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800398e:	d103      	bne.n	8003998 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003996:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e035      	b.n	8003a08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039a4:	d108      	bne.n	80039b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039a6:	897b      	ldrh	r3, [r7, #10]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039b4:	611a      	str	r2, [r3, #16]
 80039b6:	e01b      	b.n	80039f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039b8:	897b      	ldrh	r3, [r7, #10]
 80039ba:	11db      	asrs	r3, r3, #7
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	f003 0306 	and.w	r3, r3, #6
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f063 030f 	orn	r3, r3, #15
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	490e      	ldr	r1, [pc, #56]	@ (8003a10 <I2C_MasterRequestWrite+0xfc>)
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f966 	bl	8003ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e010      	b.n	8003a08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039e6:	897b      	ldrh	r3, [r7, #10]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	4907      	ldr	r1, [pc, #28]	@ (8003a14 <I2C_MasterRequestWrite+0x100>)
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f956 	bl	8003ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	00010008 	.word	0x00010008
 8003a14:	00010002 	.word	0x00010002

08003a18 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	460b      	mov	r3, r1
 8003a26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a3c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d006      	beq.n	8003a52 <I2C_MasterRequestRead+0x3a>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d003      	beq.n	8003a52 <I2C_MasterRequestRead+0x3a>
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a50:	d108      	bne.n	8003a64 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	e00b      	b.n	8003a7c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a68:	2b11      	cmp	r3, #17
 8003a6a:	d107      	bne.n	8003a7c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 f893 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00d      	beq.n	8003ab0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aa2:	d103      	bne.n	8003aac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003aaa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e079      	b.n	8003ba4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ab8:	d108      	bne.n	8003acc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003aba:	897b      	ldrh	r3, [r7, #10]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	611a      	str	r2, [r3, #16]
 8003aca:	e05f      	b.n	8003b8c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003acc:	897b      	ldrh	r3, [r7, #10]
 8003ace:	11db      	asrs	r3, r3, #7
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	f003 0306 	and.w	r3, r3, #6
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f063 030f 	orn	r3, r3, #15
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	4930      	ldr	r1, [pc, #192]	@ (8003bac <I2C_MasterRequestRead+0x194>)
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f8dc 	bl	8003ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e054      	b.n	8003ba4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003afa:	897b      	ldrh	r3, [r7, #10]
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	4929      	ldr	r1, [pc, #164]	@ (8003bb0 <I2C_MasterRequestRead+0x198>)
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f8cc 	bl	8003ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e044      	b.n	8003ba4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b3e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f831 	bl	8003bb4 <I2C_WaitOnFlagUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00d      	beq.n	8003b74 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b66:	d103      	bne.n	8003b70 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b6e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e017      	b.n	8003ba4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003b74:	897b      	ldrh	r3, [r7, #10]
 8003b76:	11db      	asrs	r3, r3, #7
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f003 0306 	and.w	r3, r3, #6
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	f063 030e 	orn	r3, r3, #14
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	4907      	ldr	r1, [pc, #28]	@ (8003bb0 <I2C_MasterRequestRead+0x198>)
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f888 	bl	8003ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	00010008 	.word	0x00010008
 8003bb0:	00010002 	.word	0x00010002

08003bb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bc4:	e048      	b.n	8003c58 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bcc:	d044      	beq.n	8003c58 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bce:	f7fe fd8f 	bl	80026f0 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d302      	bcc.n	8003be4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d139      	bne.n	8003c58 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	0c1b      	lsrs	r3, r3, #16
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d10d      	bne.n	8003c0a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	43da      	mvns	r2, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	461a      	mov	r2, r3
 8003c08:	e00c      	b.n	8003c24 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	43da      	mvns	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	4013      	ands	r3, r2
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf0c      	ite	eq
 8003c1c:	2301      	moveq	r3, #1
 8003c1e:	2300      	movne	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d116      	bne.n	8003c58 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c44:	f043 0220 	orr.w	r2, r3, #32
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e023      	b.n	8003ca0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	0c1b      	lsrs	r3, r3, #16
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d10d      	bne.n	8003c7e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	43da      	mvns	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bf0c      	ite	eq
 8003c74:	2301      	moveq	r3, #1
 8003c76:	2300      	movne	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	e00c      	b.n	8003c98 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	43da      	mvns	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	bf0c      	ite	eq
 8003c90:	2301      	moveq	r3, #1
 8003c92:	2300      	movne	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d093      	beq.n	8003bc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cb6:	e071      	b.n	8003d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc6:	d123      	bne.n	8003d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cd6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ce0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfc:	f043 0204 	orr.w	r2, r3, #4
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e067      	b.n	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d16:	d041      	beq.n	8003d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d18:	f7fe fcea 	bl	80026f0 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d302      	bcc.n	8003d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d136      	bne.n	8003d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	0c1b      	lsrs	r3, r3, #16
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d10c      	bne.n	8003d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	43da      	mvns	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4013      	ands	r3, r2
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bf14      	ite	ne
 8003d4a:	2301      	movne	r3, #1
 8003d4c:	2300      	moveq	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	e00b      	b.n	8003d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	43da      	mvns	r2, r3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bf14      	ite	ne
 8003d64:	2301      	movne	r3, #1
 8003d66:	2300      	moveq	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d016      	beq.n	8003d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d88:	f043 0220 	orr.w	r2, r3, #32
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e021      	b.n	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	0c1b      	lsrs	r3, r3, #16
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d10c      	bne.n	8003dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	43da      	mvns	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4013      	ands	r3, r2
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	bf14      	ite	ne
 8003db8:	2301      	movne	r3, #1
 8003dba:	2300      	moveq	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	e00b      	b.n	8003dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	bf14      	ite	ne
 8003dd2:	2301      	movne	r3, #1
 8003dd4:	2300      	moveq	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f47f af6d 	bne.w	8003cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003df4:	e034      	b.n	8003e60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f8e3 	bl	8003fc2 <I2C_IsAcknowledgeFailed>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e034      	b.n	8003e70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0c:	d028      	beq.n	8003e60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e0e:	f7fe fc6f 	bl	80026f0 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d302      	bcc.n	8003e24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d11d      	bne.n	8003e60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e2e:	2b80      	cmp	r3, #128	@ 0x80
 8003e30:	d016      	beq.n	8003e60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4c:	f043 0220 	orr.w	r2, r3, #32
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e007      	b.n	8003e70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e6a:	2b80      	cmp	r3, #128	@ 0x80
 8003e6c:	d1c3      	bne.n	8003df6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e84:	e034      	b.n	8003ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 f89b 	bl	8003fc2 <I2C_IsAcknowledgeFailed>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e034      	b.n	8003f00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9c:	d028      	beq.n	8003ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9e:	f7fe fc27 	bl	80026f0 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d302      	bcc.n	8003eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d11d      	bne.n	8003ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d016      	beq.n	8003ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003edc:	f043 0220 	orr.w	r2, r3, #32
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e007      	b.n	8003f00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d1c3      	bne.n	8003e86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f14:	e049      	b.n	8003faa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	2b10      	cmp	r3, #16
 8003f22:	d119      	bne.n	8003f58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0210 	mvn.w	r2, #16
 8003f2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e030      	b.n	8003fba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f58:	f7fe fbca 	bl	80026f0 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d302      	bcc.n	8003f6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d11d      	bne.n	8003faa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f78:	2b40      	cmp	r3, #64	@ 0x40
 8003f7a:	d016      	beq.n	8003faa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	f043 0220 	orr.w	r2, r3, #32
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e007      	b.n	8003fba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb4:	2b40      	cmp	r3, #64	@ 0x40
 8003fb6:	d1ae      	bne.n	8003f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fd8:	d11b      	bne.n	8004012 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fe2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffe:	f043 0204 	orr.w	r2, r3, #4
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr
	...

08004020 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e272      	b.n	8004518 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 8087 	beq.w	800414e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004040:	4b92      	ldr	r3, [pc, #584]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 030c 	and.w	r3, r3, #12
 8004048:	2b04      	cmp	r3, #4
 800404a:	d00c      	beq.n	8004066 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800404c:	4b8f      	ldr	r3, [pc, #572]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 030c 	and.w	r3, r3, #12
 8004054:	2b08      	cmp	r3, #8
 8004056:	d112      	bne.n	800407e <HAL_RCC_OscConfig+0x5e>
 8004058:	4b8c      	ldr	r3, [pc, #560]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004064:	d10b      	bne.n	800407e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004066:	4b89      	ldr	r3, [pc, #548]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d06c      	beq.n	800414c <HAL_RCC_OscConfig+0x12c>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d168      	bne.n	800414c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e24c      	b.n	8004518 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004086:	d106      	bne.n	8004096 <HAL_RCC_OscConfig+0x76>
 8004088:	4b80      	ldr	r3, [pc, #512]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a7f      	ldr	r2, [pc, #508]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 800408e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	e02e      	b.n	80040f4 <HAL_RCC_OscConfig+0xd4>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10c      	bne.n	80040b8 <HAL_RCC_OscConfig+0x98>
 800409e:	4b7b      	ldr	r3, [pc, #492]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a7a      	ldr	r2, [pc, #488]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 80040a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	4b78      	ldr	r3, [pc, #480]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a77      	ldr	r2, [pc, #476]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 80040b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e01d      	b.n	80040f4 <HAL_RCC_OscConfig+0xd4>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040c0:	d10c      	bne.n	80040dc <HAL_RCC_OscConfig+0xbc>
 80040c2:	4b72      	ldr	r3, [pc, #456]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a71      	ldr	r2, [pc, #452]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 80040c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	4b6f      	ldr	r3, [pc, #444]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a6e      	ldr	r2, [pc, #440]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 80040d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	e00b      	b.n	80040f4 <HAL_RCC_OscConfig+0xd4>
 80040dc:	4b6b      	ldr	r3, [pc, #428]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a6a      	ldr	r2, [pc, #424]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 80040e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	4b68      	ldr	r3, [pc, #416]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a67      	ldr	r2, [pc, #412]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 80040ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d013      	beq.n	8004124 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fc:	f7fe faf8 	bl	80026f0 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004104:	f7fe faf4 	bl	80026f0 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b64      	cmp	r3, #100	@ 0x64
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e200      	b.n	8004518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004116:	4b5d      	ldr	r3, [pc, #372]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0xe4>
 8004122:	e014      	b.n	800414e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004124:	f7fe fae4 	bl	80026f0 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800412c:	f7fe fae0 	bl	80026f0 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b64      	cmp	r3, #100	@ 0x64
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e1ec      	b.n	8004518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800413e:	4b53      	ldr	r3, [pc, #332]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x10c>
 800414a:	e000      	b.n	800414e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800414c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d063      	beq.n	8004222 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800415a:	4b4c      	ldr	r3, [pc, #304]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00b      	beq.n	800417e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004166:	4b49      	ldr	r3, [pc, #292]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b08      	cmp	r3, #8
 8004170:	d11c      	bne.n	80041ac <HAL_RCC_OscConfig+0x18c>
 8004172:	4b46      	ldr	r3, [pc, #280]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d116      	bne.n	80041ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417e:	4b43      	ldr	r3, [pc, #268]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d005      	beq.n	8004196 <HAL_RCC_OscConfig+0x176>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d001      	beq.n	8004196 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e1c0      	b.n	8004518 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004196:	4b3d      	ldr	r3, [pc, #244]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4939      	ldr	r1, [pc, #228]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041aa:	e03a      	b.n	8004222 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d020      	beq.n	80041f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041b4:	4b36      	ldr	r3, [pc, #216]	@ (8004290 <HAL_RCC_OscConfig+0x270>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ba:	f7fe fa99 	bl	80026f0 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c2:	f7fe fa95 	bl	80026f0 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e1a1      	b.n	8004518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d4:	4b2d      	ldr	r3, [pc, #180]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f0      	beq.n	80041c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e0:	4b2a      	ldr	r3, [pc, #168]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	4927      	ldr	r1, [pc, #156]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	600b      	str	r3, [r1, #0]
 80041f4:	e015      	b.n	8004222 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041f6:	4b26      	ldr	r3, [pc, #152]	@ (8004290 <HAL_RCC_OscConfig+0x270>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fc:	f7fe fa78 	bl	80026f0 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004204:	f7fe fa74 	bl	80026f0 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e180      	b.n	8004518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004216:	4b1d      	ldr	r3, [pc, #116]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d03a      	beq.n	80042a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d019      	beq.n	800426a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004236:	4b17      	ldr	r3, [pc, #92]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 8004238:	2201      	movs	r2, #1
 800423a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423c:	f7fe fa58 	bl	80026f0 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004244:	f7fe fa54 	bl	80026f0 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e160      	b.n	8004518 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004256:	4b0d      	ldr	r3, [pc, #52]	@ (800428c <HAL_RCC_OscConfig+0x26c>)
 8004258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004262:	2001      	movs	r0, #1
 8004264:	f000 face 	bl	8004804 <RCC_Delay>
 8004268:	e01c      	b.n	80042a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800426a:	4b0a      	ldr	r3, [pc, #40]	@ (8004294 <HAL_RCC_OscConfig+0x274>)
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004270:	f7fe fa3e 	bl	80026f0 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004276:	e00f      	b.n	8004298 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004278:	f7fe fa3a 	bl	80026f0 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d908      	bls.n	8004298 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e146      	b.n	8004518 <HAL_RCC_OscConfig+0x4f8>
 800428a:	bf00      	nop
 800428c:	40021000 	.word	0x40021000
 8004290:	42420000 	.word	0x42420000
 8004294:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004298:	4b92      	ldr	r3, [pc, #584]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e9      	bne.n	8004278 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 80a6 	beq.w	80043fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042b2:	2300      	movs	r3, #0
 80042b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b6:	4b8b      	ldr	r3, [pc, #556]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10d      	bne.n	80042de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c2:	4b88      	ldr	r3, [pc, #544]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	4a87      	ldr	r2, [pc, #540]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 80042c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042cc:	61d3      	str	r3, [r2, #28]
 80042ce:	4b85      	ldr	r3, [pc, #532]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d6:	60bb      	str	r3, [r7, #8]
 80042d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042da:	2301      	movs	r3, #1
 80042dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042de:	4b82      	ldr	r3, [pc, #520]	@ (80044e8 <HAL_RCC_OscConfig+0x4c8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d118      	bne.n	800431c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ea:	4b7f      	ldr	r3, [pc, #508]	@ (80044e8 <HAL_RCC_OscConfig+0x4c8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a7e      	ldr	r2, [pc, #504]	@ (80044e8 <HAL_RCC_OscConfig+0x4c8>)
 80042f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f6:	f7fe f9fb 	bl	80026f0 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fe:	f7fe f9f7 	bl	80026f0 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b64      	cmp	r3, #100	@ 0x64
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e103      	b.n	8004518 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004310:	4b75      	ldr	r3, [pc, #468]	@ (80044e8 <HAL_RCC_OscConfig+0x4c8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0f0      	beq.n	80042fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d106      	bne.n	8004332 <HAL_RCC_OscConfig+0x312>
 8004324:	4b6f      	ldr	r3, [pc, #444]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	4a6e      	ldr	r2, [pc, #440]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	6213      	str	r3, [r2, #32]
 8004330:	e02d      	b.n	800438e <HAL_RCC_OscConfig+0x36e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10c      	bne.n	8004354 <HAL_RCC_OscConfig+0x334>
 800433a:	4b6a      	ldr	r3, [pc, #424]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	4a69      	ldr	r2, [pc, #420]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 8004340:	f023 0301 	bic.w	r3, r3, #1
 8004344:	6213      	str	r3, [r2, #32]
 8004346:	4b67      	ldr	r3, [pc, #412]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	4a66      	ldr	r2, [pc, #408]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 800434c:	f023 0304 	bic.w	r3, r3, #4
 8004350:	6213      	str	r3, [r2, #32]
 8004352:	e01c      	b.n	800438e <HAL_RCC_OscConfig+0x36e>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	2b05      	cmp	r3, #5
 800435a:	d10c      	bne.n	8004376 <HAL_RCC_OscConfig+0x356>
 800435c:	4b61      	ldr	r3, [pc, #388]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	4a60      	ldr	r2, [pc, #384]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 8004362:	f043 0304 	orr.w	r3, r3, #4
 8004366:	6213      	str	r3, [r2, #32]
 8004368:	4b5e      	ldr	r3, [pc, #376]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	4a5d      	ldr	r2, [pc, #372]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	6213      	str	r3, [r2, #32]
 8004374:	e00b      	b.n	800438e <HAL_RCC_OscConfig+0x36e>
 8004376:	4b5b      	ldr	r3, [pc, #364]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	4a5a      	ldr	r2, [pc, #360]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	6213      	str	r3, [r2, #32]
 8004382:	4b58      	ldr	r3, [pc, #352]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	4a57      	ldr	r2, [pc, #348]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 8004388:	f023 0304 	bic.w	r3, r3, #4
 800438c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d015      	beq.n	80043c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004396:	f7fe f9ab 	bl	80026f0 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439c:	e00a      	b.n	80043b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439e:	f7fe f9a7 	bl	80026f0 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e0b1      	b.n	8004518 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b4:	4b4b      	ldr	r3, [pc, #300]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0ee      	beq.n	800439e <HAL_RCC_OscConfig+0x37e>
 80043c0:	e014      	b.n	80043ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c2:	f7fe f995 	bl	80026f0 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c8:	e00a      	b.n	80043e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ca:	f7fe f991 	bl	80026f0 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043d8:	4293      	cmp	r3, r2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e09b      	b.n	8004518 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e0:	4b40      	ldr	r3, [pc, #256]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1ee      	bne.n	80043ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d105      	bne.n	80043fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f2:	4b3c      	ldr	r3, [pc, #240]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	4a3b      	ldr	r2, [pc, #236]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 80043f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 8087 	beq.w	8004516 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004408:	4b36      	ldr	r3, [pc, #216]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 030c 	and.w	r3, r3, #12
 8004410:	2b08      	cmp	r3, #8
 8004412:	d061      	beq.n	80044d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d146      	bne.n	80044aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800441c:	4b33      	ldr	r3, [pc, #204]	@ (80044ec <HAL_RCC_OscConfig+0x4cc>)
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004422:	f7fe f965 	bl	80026f0 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800442a:	f7fe f961 	bl	80026f0 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e06d      	b.n	8004518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800443c:	4b29      	ldr	r3, [pc, #164]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f0      	bne.n	800442a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004450:	d108      	bne.n	8004464 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004452:	4b24      	ldr	r3, [pc, #144]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	4921      	ldr	r1, [pc, #132]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 8004460:	4313      	orrs	r3, r2
 8004462:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004464:	4b1f      	ldr	r3, [pc, #124]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a19      	ldr	r1, [r3, #32]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	430b      	orrs	r3, r1
 8004476:	491b      	ldr	r1, [pc, #108]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 8004478:	4313      	orrs	r3, r2
 800447a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800447c:	4b1b      	ldr	r3, [pc, #108]	@ (80044ec <HAL_RCC_OscConfig+0x4cc>)
 800447e:	2201      	movs	r2, #1
 8004480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004482:	f7fe f935 	bl	80026f0 <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800448a:	f7fe f931 	bl	80026f0 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e03d      	b.n	8004518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800449c:	4b11      	ldr	r3, [pc, #68]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0f0      	beq.n	800448a <HAL_RCC_OscConfig+0x46a>
 80044a8:	e035      	b.n	8004516 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044aa:	4b10      	ldr	r3, [pc, #64]	@ (80044ec <HAL_RCC_OscConfig+0x4cc>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b0:	f7fe f91e 	bl	80026f0 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b8:	f7fe f91a 	bl	80026f0 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e026      	b.n	8004518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ca:	4b06      	ldr	r3, [pc, #24]	@ (80044e4 <HAL_RCC_OscConfig+0x4c4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1f0      	bne.n	80044b8 <HAL_RCC_OscConfig+0x498>
 80044d6:	e01e      	b.n	8004516 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d107      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e019      	b.n	8004518 <HAL_RCC_OscConfig+0x4f8>
 80044e4:	40021000 	.word	0x40021000
 80044e8:	40007000 	.word	0x40007000
 80044ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004520 <HAL_RCC_OscConfig+0x500>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	429a      	cmp	r2, r3
 8004502:	d106      	bne.n	8004512 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450e:	429a      	cmp	r2, r3
 8004510:	d001      	beq.n	8004516 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e000      	b.n	8004518 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40021000 	.word	0x40021000

08004524 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0d0      	b.n	80046da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004538:	4b6a      	ldr	r3, [pc, #424]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c0>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d910      	bls.n	8004568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004546:	4b67      	ldr	r3, [pc, #412]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f023 0207 	bic.w	r2, r3, #7
 800454e:	4965      	ldr	r1, [pc, #404]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	4313      	orrs	r3, r2
 8004554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004556:	4b63      	ldr	r3, [pc, #396]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d001      	beq.n	8004568 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e0b8      	b.n	80046da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d020      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004580:	4b59      	ldr	r3, [pc, #356]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	4a58      	ldr	r2, [pc, #352]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004586:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800458a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004598:	4b53      	ldr	r3, [pc, #332]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	4a52      	ldr	r2, [pc, #328]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 800459e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80045a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a4:	4b50      	ldr	r3, [pc, #320]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	494d      	ldr	r1, [pc, #308]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d040      	beq.n	8004644 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d107      	bne.n	80045da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ca:	4b47      	ldr	r3, [pc, #284]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d115      	bne.n	8004602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e07f      	b.n	80046da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d107      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e2:	4b41      	ldr	r3, [pc, #260]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e073      	b.n	80046da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f2:	4b3d      	ldr	r3, [pc, #244]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e06b      	b.n	80046da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004602:	4b39      	ldr	r3, [pc, #228]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f023 0203 	bic.w	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	4936      	ldr	r1, [pc, #216]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004610:	4313      	orrs	r3, r2
 8004612:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004614:	f7fe f86c 	bl	80026f0 <HAL_GetTick>
 8004618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461a:	e00a      	b.n	8004632 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461c:	f7fe f868 	bl	80026f0 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e053      	b.n	80046da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004632:	4b2d      	ldr	r3, [pc, #180]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f003 020c 	and.w	r2, r3, #12
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	429a      	cmp	r2, r3
 8004642:	d1eb      	bne.n	800461c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004644:	4b27      	ldr	r3, [pc, #156]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d210      	bcs.n	8004674 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004652:	4b24      	ldr	r3, [pc, #144]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 0207 	bic.w	r2, r3, #7
 800465a:	4922      	ldr	r1, [pc, #136]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c0>)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	4313      	orrs	r3, r2
 8004660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004662:	4b20      	ldr	r3, [pc, #128]	@ (80046e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d001      	beq.n	8004674 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e032      	b.n	80046da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004680:	4b19      	ldr	r3, [pc, #100]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4916      	ldr	r1, [pc, #88]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 800468e:	4313      	orrs	r3, r2
 8004690:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d009      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800469e:	4b12      	ldr	r3, [pc, #72]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	490e      	ldr	r1, [pc, #56]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046b2:	f000 f821 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 80046b6:	4602      	mov	r2, r0
 80046b8:	4b0b      	ldr	r3, [pc, #44]	@ (80046e8 <HAL_RCC_ClockConfig+0x1c4>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	091b      	lsrs	r3, r3, #4
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	490a      	ldr	r1, [pc, #40]	@ (80046ec <HAL_RCC_ClockConfig+0x1c8>)
 80046c4:	5ccb      	ldrb	r3, [r1, r3]
 80046c6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ca:	4a09      	ldr	r2, [pc, #36]	@ (80046f0 <HAL_RCC_ClockConfig+0x1cc>)
 80046cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046ce:	4b09      	ldr	r3, [pc, #36]	@ (80046f4 <HAL_RCC_ClockConfig+0x1d0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fd ffca 	bl	800266c <HAL_InitTick>

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40022000 	.word	0x40022000
 80046e8:	40021000 	.word	0x40021000
 80046ec:	08005fe8 	.word	0x08005fe8
 80046f0:	20000208 	.word	0x20000208
 80046f4:	2000020c 	.word	0x2000020c

080046f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	2300      	movs	r3, #0
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	2300      	movs	r3, #0
 800470c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004712:	4b1e      	ldr	r3, [pc, #120]	@ (800478c <HAL_RCC_GetSysClockFreq+0x94>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f003 030c 	and.w	r3, r3, #12
 800471e:	2b04      	cmp	r3, #4
 8004720:	d002      	beq.n	8004728 <HAL_RCC_GetSysClockFreq+0x30>
 8004722:	2b08      	cmp	r3, #8
 8004724:	d003      	beq.n	800472e <HAL_RCC_GetSysClockFreq+0x36>
 8004726:	e027      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004728:	4b19      	ldr	r3, [pc, #100]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x98>)
 800472a:	613b      	str	r3, [r7, #16]
      break;
 800472c:	e027      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	0c9b      	lsrs	r3, r3, #18
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	4a17      	ldr	r2, [pc, #92]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004738:	5cd3      	ldrb	r3, [r2, r3]
 800473a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d010      	beq.n	8004768 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004746:	4b11      	ldr	r3, [pc, #68]	@ (800478c <HAL_RCC_GetSysClockFreq+0x94>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	0c5b      	lsrs	r3, r3, #17
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	4a11      	ldr	r2, [pc, #68]	@ (8004798 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004752:	5cd3      	ldrb	r3, [r2, r3]
 8004754:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a0d      	ldr	r2, [pc, #52]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x98>)
 800475a:	fb03 f202 	mul.w	r2, r3, r2
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	fbb2 f3f3 	udiv	r3, r2, r3
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	e004      	b.n	8004772 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a0c      	ldr	r2, [pc, #48]	@ (800479c <HAL_RCC_GetSysClockFreq+0xa4>)
 800476c:	fb02 f303 	mul.w	r3, r2, r3
 8004770:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	613b      	str	r3, [r7, #16]
      break;
 8004776:	e002      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004778:	4b05      	ldr	r3, [pc, #20]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x98>)
 800477a:	613b      	str	r3, [r7, #16]
      break;
 800477c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800477e:	693b      	ldr	r3, [r7, #16]
}
 8004780:	4618      	mov	r0, r3
 8004782:	371c      	adds	r7, #28
 8004784:	46bd      	mov	sp, r7
 8004786:	bc80      	pop	{r7}
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40021000 	.word	0x40021000
 8004790:	007a1200 	.word	0x007a1200
 8004794:	08006000 	.word	0x08006000
 8004798:	08006010 	.word	0x08006010
 800479c:	003d0900 	.word	0x003d0900

080047a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047a4:	4b02      	ldr	r3, [pc, #8]	@ (80047b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80047a6:	681b      	ldr	r3, [r3, #0]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr
 80047b0:	20000208 	.word	0x20000208

080047b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047b8:	f7ff fff2 	bl	80047a0 <HAL_RCC_GetHCLKFreq>
 80047bc:	4602      	mov	r2, r0
 80047be:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	0a1b      	lsrs	r3, r3, #8
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	4903      	ldr	r1, [pc, #12]	@ (80047d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ca:	5ccb      	ldrb	r3, [r1, r3]
 80047cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40021000 	.word	0x40021000
 80047d8:	08005ff8 	.word	0x08005ff8

080047dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047e0:	f7ff ffde 	bl	80047a0 <HAL_RCC_GetHCLKFreq>
 80047e4:	4602      	mov	r2, r0
 80047e6:	4b05      	ldr	r3, [pc, #20]	@ (80047fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	0adb      	lsrs	r3, r3, #11
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	4903      	ldr	r1, [pc, #12]	@ (8004800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047f2:	5ccb      	ldrb	r3, [r1, r3]
 80047f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40021000 	.word	0x40021000
 8004800:	08005ff8 	.word	0x08005ff8

08004804 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800480c:	4b0a      	ldr	r3, [pc, #40]	@ (8004838 <RCC_Delay+0x34>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a0a      	ldr	r2, [pc, #40]	@ (800483c <RCC_Delay+0x38>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	0a5b      	lsrs	r3, r3, #9
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004820:	bf00      	nop
  }
  while (Delay --);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1e5a      	subs	r2, r3, #1
 8004826:	60fa      	str	r2, [r7, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1f9      	bne.n	8004820 <RCC_Delay+0x1c>
}
 800482c:	bf00      	nop
 800482e:	bf00      	nop
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr
 8004838:	20000208 	.word	0x20000208
 800483c:	10624dd3 	.word	0x10624dd3

08004840 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e042      	b.n	80048d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fd fd1c 	bl	80022a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2224      	movs	r2, #36	@ 0x24
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fdb7 	bl	80053f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695a      	ldr	r2, [r3, #20]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08a      	sub	sp, #40	@ 0x28
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	4613      	mov	r3, r2
 80048ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d175      	bne.n	80049ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_UART_Transmit+0x2c>
 8004906:	88fb      	ldrh	r3, [r7, #6]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e06e      	b.n	80049ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2221      	movs	r2, #33	@ 0x21
 800491a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800491e:	f7fd fee7 	bl	80026f0 <HAL_GetTick>
 8004922:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	88fa      	ldrh	r2, [r7, #6]
 8004928:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	88fa      	ldrh	r2, [r7, #6]
 800492e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004938:	d108      	bne.n	800494c <HAL_UART_Transmit+0x6c>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d104      	bne.n	800494c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004942:	2300      	movs	r3, #0
 8004944:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	e003      	b.n	8004954 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004950:	2300      	movs	r3, #0
 8004952:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004954:	e02e      	b.n	80049b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2200      	movs	r2, #0
 800495e:	2180      	movs	r1, #128	@ 0x80
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fb1c 	bl	8004f9e <UART_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d005      	beq.n	8004978 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e03a      	b.n	80049ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10b      	bne.n	8004996 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800498c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	3302      	adds	r3, #2
 8004992:	61bb      	str	r3, [r7, #24]
 8004994:	e007      	b.n	80049a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	781a      	ldrb	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	3301      	adds	r3, #1
 80049a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1cb      	bne.n	8004956 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2200      	movs	r2, #0
 80049c6:	2140      	movs	r1, #64	@ 0x40
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 fae8 	bl	8004f9e <UART_WaitOnFlagUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e006      	b.n	80049ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	e000      	b.n	80049ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80049ec:	2302      	movs	r3, #2
  }
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3720      	adds	r7, #32
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	4613      	mov	r3, r2
 8004a02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d112      	bne.n	8004a36 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_UART_Receive_IT+0x26>
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e00b      	b.n	8004a38 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a26:	88fb      	ldrh	r3, [r7, #6]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 fb0f 	bl	8005050 <UART_Start_Receive_IT>
 8004a32:	4603      	mov	r3, r0
 8004a34:	e000      	b.n	8004a38 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004a36:	2302      	movs	r3, #2
  }
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b0ba      	sub	sp, #232	@ 0xe8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10f      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a8a:	f003 0320 	and.w	r3, r3, #32
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d009      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x66>
 8004a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fbec 	bl	800527c <UART_Receive_IT>
      return;
 8004aa4:	e25b      	b.n	8004f5e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004aa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 80de 	beq.w	8004c6c <HAL_UART_IRQHandler+0x22c>
 8004ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d106      	bne.n	8004aca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80d1 	beq.w	8004c6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00b      	beq.n	8004aee <HAL_UART_IRQHandler+0xae>
 8004ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae6:	f043 0201 	orr.w	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00b      	beq.n	8004b12 <HAL_UART_IRQHandler+0xd2>
 8004afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0a:	f043 0202 	orr.w	r2, r3, #2
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00b      	beq.n	8004b36 <HAL_UART_IRQHandler+0xf6>
 8004b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d005      	beq.n	8004b36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b2e:	f043 0204 	orr.w	r2, r3, #4
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d011      	beq.n	8004b66 <HAL_UART_IRQHandler+0x126>
 8004b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d105      	bne.n	8004b5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d005      	beq.n	8004b66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b5e:	f043 0208 	orr.w	r2, r3, #8
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 81f2 	beq.w	8004f54 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b74:	f003 0320 	and.w	r3, r3, #32
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <HAL_UART_IRQHandler+0x14e>
 8004b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b80:	f003 0320 	and.w	r3, r3, #32
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fb77 	bl	800527c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	bf14      	ite	ne
 8004b9c:	2301      	movne	r3, #1
 8004b9e:	2300      	moveq	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d103      	bne.n	8004bba <HAL_UART_IRQHandler+0x17a>
 8004bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d04f      	beq.n	8004c5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fa81 	bl	80050c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d041      	beq.n	8004c52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3314      	adds	r3, #20
 8004bd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004bdc:	e853 3f00 	ldrex	r3, [r3]
 8004be0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004be4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004be8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3314      	adds	r3, #20
 8004bf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004bfa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c0a:	e841 2300 	strex	r3, r2, [r1]
 8004c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1d9      	bne.n	8004bce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d013      	beq.n	8004c4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c26:	4a7e      	ldr	r2, [pc, #504]	@ (8004e20 <HAL_UART_IRQHandler+0x3e0>)
 8004c28:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fd fed4 	bl	80029dc <HAL_DMA_Abort_IT>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d016      	beq.n	8004c68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c44:	4610      	mov	r0, r2
 8004c46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c48:	e00e      	b.n	8004c68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f993 	bl	8004f76 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c50:	e00a      	b.n	8004c68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f98f 	bl	8004f76 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c58:	e006      	b.n	8004c68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f98b 	bl	8004f76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004c66:	e175      	b.n	8004f54 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c68:	bf00      	nop
    return;
 8004c6a:	e173      	b.n	8004f54 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	f040 814f 	bne.w	8004f14 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c7a:	f003 0310 	and.w	r3, r3, #16
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 8148 	beq.w	8004f14 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8141 	beq.w	8004f14 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c92:	2300      	movs	r3, #0
 8004c94:	60bb      	str	r3, [r7, #8]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 80b6 	beq.w	8004e24 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8145 	beq.w	8004f58 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	f080 813e 	bcs.w	8004f58 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ce2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	f000 8088 	beq.w	8004e00 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	330c      	adds	r3, #12
 8004cf6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004cfe:	e853 3f00 	ldrex	r3, [r3]
 8004d02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	330c      	adds	r3, #12
 8004d18:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004d1c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d28:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d2c:	e841 2300 	strex	r3, r2, [r1]
 8004d30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1d9      	bne.n	8004cf0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3314      	adds	r3, #20
 8004d42:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3314      	adds	r3, #20
 8004d5c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d60:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d64:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d66:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d68:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e1      	bne.n	8004d3c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3314      	adds	r3, #20
 8004d7e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d82:	e853 3f00 	ldrex	r3, [r3]
 8004d86:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3314      	adds	r3, #20
 8004d98:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d9c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d9e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004da2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004daa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e3      	bne.n	8004d78 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	330c      	adds	r3, #12
 8004dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004dce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dd0:	f023 0310 	bic.w	r3, r3, #16
 8004dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	330c      	adds	r3, #12
 8004dde:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004de2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004de4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004de8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004df0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1e3      	bne.n	8004dbe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fd fdb3 	bl	8002966 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	4619      	mov	r1, r3
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f8b6 	bl	8004f88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e1c:	e09c      	b.n	8004f58 <HAL_UART_IRQHandler+0x518>
 8004e1e:	bf00      	nop
 8004e20:	08005187 	.word	0x08005187
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 808e 	beq.w	8004f5c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 8089 	beq.w	8004f5c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	330c      	adds	r3, #12
 8004e50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	330c      	adds	r3, #12
 8004e6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e3      	bne.n	8004e4a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3314      	adds	r3, #20
 8004e88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	623b      	str	r3, [r7, #32]
   return(result);
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	f023 0301 	bic.w	r3, r3, #1
 8004e98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3314      	adds	r3, #20
 8004ea2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004ea6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004eac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1e3      	bne.n	8004e82 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	330c      	adds	r3, #12
 8004ece:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0310 	bic.w	r3, r3, #16
 8004ede:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	330c      	adds	r3, #12
 8004ee8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004eec:	61fa      	str	r2, [r7, #28]
 8004eee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef0:	69b9      	ldr	r1, [r7, #24]
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	e841 2300 	strex	r3, r2, [r1]
 8004ef8:	617b      	str	r3, [r7, #20]
   return(result);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1e3      	bne.n	8004ec8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f83b 	bl	8004f88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f12:	e023      	b.n	8004f5c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d009      	beq.n	8004f34 <HAL_UART_IRQHandler+0x4f4>
 8004f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f93e 	bl	80051ae <UART_Transmit_IT>
    return;
 8004f32:	e014      	b.n	8004f5e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00e      	beq.n	8004f5e <HAL_UART_IRQHandler+0x51e>
 8004f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d008      	beq.n	8004f5e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f97d 	bl	800524c <UART_EndTransmit_IT>
    return;
 8004f52:	e004      	b.n	8004f5e <HAL_UART_IRQHandler+0x51e>
    return;
 8004f54:	bf00      	nop
 8004f56:	e002      	b.n	8004f5e <HAL_UART_IRQHandler+0x51e>
      return;
 8004f58:	bf00      	nop
 8004f5a:	e000      	b.n	8004f5e <HAL_UART_IRQHandler+0x51e>
      return;
 8004f5c:	bf00      	nop
  }
}
 8004f5e:	37e8      	adds	r7, #232	@ 0xe8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr

08004f76 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bc80      	pop	{r7}
 8004f86:	4770      	bx	lr

08004f88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bc80      	pop	{r7}
 8004f9c:	4770      	bx	lr

08004f9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b086      	sub	sp, #24
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	603b      	str	r3, [r7, #0]
 8004faa:	4613      	mov	r3, r2
 8004fac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fae:	e03b      	b.n	8005028 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb6:	d037      	beq.n	8005028 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb8:	f7fd fb9a 	bl	80026f0 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	6a3a      	ldr	r2, [r7, #32]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d302      	bcc.n	8004fce <UART_WaitOnFlagUntilTimeout+0x30>
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e03a      	b.n	8005048 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d023      	beq.n	8005028 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b80      	cmp	r3, #128	@ 0x80
 8004fe4:	d020      	beq.n	8005028 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b40      	cmp	r3, #64	@ 0x40
 8004fea:	d01d      	beq.n	8005028 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b08      	cmp	r3, #8
 8004ff8:	d116      	bne.n	8005028 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	617b      	str	r3, [r7, #20]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 f856 	bl	80050c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2208      	movs	r2, #8
 800501a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e00f      	b.n	8005048 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	4013      	ands	r3, r2
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	429a      	cmp	r2, r3
 8005036:	bf0c      	ite	eq
 8005038:	2301      	moveq	r3, #1
 800503a:	2300      	movne	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	461a      	mov	r2, r3
 8005040:	79fb      	ldrb	r3, [r7, #7]
 8005042:	429a      	cmp	r2, r3
 8005044:	d0b4      	beq.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	4613      	mov	r3, r2
 800505c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	88fa      	ldrh	r2, [r7, #6]
 8005068:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	88fa      	ldrh	r2, [r7, #6]
 800506e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2222      	movs	r2, #34	@ 0x22
 800507a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005094:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	695a      	ldr	r2, [r3, #20]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f042 0201 	orr.w	r2, r2, #1
 80050a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f042 0220 	orr.w	r2, r2, #32
 80050b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	bc80      	pop	{r7}
 80050c0:	4770      	bx	lr

080050c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b095      	sub	sp, #84	@ 0x54
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	330c      	adds	r3, #12
 80050d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	330c      	adds	r3, #12
 80050e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80050ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e5      	bne.n	80050ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3314      	adds	r3, #20
 8005104:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	61fb      	str	r3, [r7, #28]
   return(result);
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3314      	adds	r3, #20
 800511c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800511e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005120:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005124:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800512c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e5      	bne.n	80050fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005136:	2b01      	cmp	r3, #1
 8005138:	d119      	bne.n	800516e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	330c      	adds	r3, #12
 8005140:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	60bb      	str	r3, [r7, #8]
   return(result);
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f023 0310 	bic.w	r3, r3, #16
 8005150:	647b      	str	r3, [r7, #68]	@ 0x44
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	330c      	adds	r3, #12
 8005158:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800515a:	61ba      	str	r2, [r7, #24]
 800515c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515e:	6979      	ldr	r1, [r7, #20]
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	613b      	str	r3, [r7, #16]
   return(result);
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1e5      	bne.n	800513a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800517c:	bf00      	nop
 800517e:	3754      	adds	r7, #84	@ 0x54
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr

08005186 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005192:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f7ff fee8 	bl	8004f76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051a6:	bf00      	nop
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b085      	sub	sp, #20
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b21      	cmp	r3, #33	@ 0x21
 80051c0:	d13e      	bne.n	8005240 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ca:	d114      	bne.n	80051f6 <UART_Transmit_IT+0x48>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d110      	bne.n	80051f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	1c9a      	adds	r2, r3, #2
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	621a      	str	r2, [r3, #32]
 80051f4:	e008      	b.n	8005208 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	1c59      	adds	r1, r3, #1
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6211      	str	r1, [r2, #32]
 8005200:	781a      	ldrb	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29b      	uxth	r3, r3
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	4619      	mov	r1, r3
 8005216:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10f      	bne.n	800523c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800522a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800523a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	e000      	b.n	8005242 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005240:	2302      	movs	r3, #2
  }
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr

0800524c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005262:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2220      	movs	r2, #32
 8005268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7ff fe79 	bl	8004f64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08c      	sub	sp, #48	@ 0x30
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b22      	cmp	r3, #34	@ 0x22
 800528e:	f040 80ae 	bne.w	80053ee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800529a:	d117      	bne.n	80052cc <UART_Receive_IT+0x50>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d113      	bne.n	80052cc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052a4:	2300      	movs	r3, #0
 80052a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c4:	1c9a      	adds	r2, r3, #2
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80052ca:	e026      	b.n	800531a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052de:	d007      	beq.n	80052f0 <UART_Receive_IT+0x74>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <UART_Receive_IT+0x82>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d106      	bne.n	80052fe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fa:	701a      	strb	r2, [r3, #0]
 80052fc:	e008      	b.n	8005310 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800530a:	b2da      	uxtb	r2, r3
 800530c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800530e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29b      	uxth	r3, r3
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	4619      	mov	r1, r3
 8005328:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800532a:	2b00      	cmp	r3, #0
 800532c:	d15d      	bne.n	80053ea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0220 	bic.w	r2, r2, #32
 800533c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800534c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695a      	ldr	r2, [r3, #20]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0201 	bic.w	r2, r2, #1
 800535c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2220      	movs	r2, #32
 8005362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005370:	2b01      	cmp	r3, #1
 8005372:	d135      	bne.n	80053e0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	330c      	adds	r3, #12
 8005380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	e853 3f00 	ldrex	r3, [r3]
 8005388:	613b      	str	r3, [r7, #16]
   return(result);
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f023 0310 	bic.w	r3, r3, #16
 8005390:	627b      	str	r3, [r7, #36]	@ 0x24
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	330c      	adds	r3, #12
 8005398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800539a:	623a      	str	r2, [r7, #32]
 800539c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	69f9      	ldr	r1, [r7, #28]
 80053a0:	6a3a      	ldr	r2, [r7, #32]
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e5      	bne.n	800537a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0310 	and.w	r3, r3, #16
 80053b8:	2b10      	cmp	r3, #16
 80053ba:	d10a      	bne.n	80053d2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053bc:	2300      	movs	r3, #0
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053d6:	4619      	mov	r1, r3
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff fdd5 	bl	8004f88 <HAL_UARTEx_RxEventCallback>
 80053de:	e002      	b.n	80053e6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7fb fa21 	bl	8000828 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	e002      	b.n	80053f0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	e000      	b.n	80053f0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80053ee:	2302      	movs	r3, #2
  }
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3730      	adds	r7, #48	@ 0x30
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005432:	f023 030c 	bic.w	r3, r3, #12
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6812      	ldr	r2, [r2, #0]
 800543a:	68b9      	ldr	r1, [r7, #8]
 800543c:	430b      	orrs	r3, r1
 800543e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a2c      	ldr	r2, [pc, #176]	@ (800550c <UART_SetConfig+0x114>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d103      	bne.n	8005468 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005460:	f7ff f9bc 	bl	80047dc <HAL_RCC_GetPCLK2Freq>
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	e002      	b.n	800546e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005468:	f7ff f9a4 	bl	80047b4 <HAL_RCC_GetPCLK1Freq>
 800546c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	009a      	lsls	r2, r3, #2
 8005478:	441a      	add	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	fbb2 f3f3 	udiv	r3, r2, r3
 8005484:	4a22      	ldr	r2, [pc, #136]	@ (8005510 <UART_SetConfig+0x118>)
 8005486:	fba2 2303 	umull	r2, r3, r2, r3
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	0119      	lsls	r1, r3, #4
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4613      	mov	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	009a      	lsls	r2, r3, #2
 8005498:	441a      	add	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80054a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005510 <UART_SetConfig+0x118>)
 80054a6:	fba3 0302 	umull	r0, r3, r3, r2
 80054aa:	095b      	lsrs	r3, r3, #5
 80054ac:	2064      	movs	r0, #100	@ 0x64
 80054ae:	fb00 f303 	mul.w	r3, r0, r3
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	3332      	adds	r3, #50	@ 0x32
 80054b8:	4a15      	ldr	r2, [pc, #84]	@ (8005510 <UART_SetConfig+0x118>)
 80054ba:	fba2 2303 	umull	r2, r3, r2, r3
 80054be:	095b      	lsrs	r3, r3, #5
 80054c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054c4:	4419      	add	r1, r3
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4613      	mov	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	009a      	lsls	r2, r3, #2
 80054d0:	441a      	add	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80054dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005510 <UART_SetConfig+0x118>)
 80054de:	fba3 0302 	umull	r0, r3, r3, r2
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	2064      	movs	r0, #100	@ 0x64
 80054e6:	fb00 f303 	mul.w	r3, r0, r3
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	3332      	adds	r3, #50	@ 0x32
 80054f0:	4a07      	ldr	r2, [pc, #28]	@ (8005510 <UART_SetConfig+0x118>)
 80054f2:	fba2 2303 	umull	r2, r3, r2, r3
 80054f6:	095b      	lsrs	r3, r3, #5
 80054f8:	f003 020f 	and.w	r2, r3, #15
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	440a      	add	r2, r1
 8005502:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005504:	bf00      	nop
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40013800 	.word	0x40013800
 8005510:	51eb851f 	.word	0x51eb851f

08005514 <_vsniprintf_r>:
 8005514:	b530      	push	{r4, r5, lr}
 8005516:	4614      	mov	r4, r2
 8005518:	2c00      	cmp	r4, #0
 800551a:	4605      	mov	r5, r0
 800551c:	461a      	mov	r2, r3
 800551e:	b09b      	sub	sp, #108	@ 0x6c
 8005520:	da05      	bge.n	800552e <_vsniprintf_r+0x1a>
 8005522:	238b      	movs	r3, #139	@ 0x8b
 8005524:	6003      	str	r3, [r0, #0]
 8005526:	f04f 30ff 	mov.w	r0, #4294967295
 800552a:	b01b      	add	sp, #108	@ 0x6c
 800552c:	bd30      	pop	{r4, r5, pc}
 800552e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005532:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005536:	bf0c      	ite	eq
 8005538:	4623      	moveq	r3, r4
 800553a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800553e:	9302      	str	r3, [sp, #8]
 8005540:	9305      	str	r3, [sp, #20]
 8005542:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005546:	9100      	str	r1, [sp, #0]
 8005548:	9104      	str	r1, [sp, #16]
 800554a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800554e:	4669      	mov	r1, sp
 8005550:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005552:	f000 f99f 	bl	8005894 <_svfiprintf_r>
 8005556:	1c43      	adds	r3, r0, #1
 8005558:	bfbc      	itt	lt
 800555a:	238b      	movlt	r3, #139	@ 0x8b
 800555c:	602b      	strlt	r3, [r5, #0]
 800555e:	2c00      	cmp	r4, #0
 8005560:	d0e3      	beq.n	800552a <_vsniprintf_r+0x16>
 8005562:	2200      	movs	r2, #0
 8005564:	9b00      	ldr	r3, [sp, #0]
 8005566:	701a      	strb	r2, [r3, #0]
 8005568:	e7df      	b.n	800552a <_vsniprintf_r+0x16>
	...

0800556c <vsniprintf>:
 800556c:	b507      	push	{r0, r1, r2, lr}
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	4613      	mov	r3, r2
 8005572:	460a      	mov	r2, r1
 8005574:	4601      	mov	r1, r0
 8005576:	4803      	ldr	r0, [pc, #12]	@ (8005584 <vsniprintf+0x18>)
 8005578:	6800      	ldr	r0, [r0, #0]
 800557a:	f7ff ffcb 	bl	8005514 <_vsniprintf_r>
 800557e:	b003      	add	sp, #12
 8005580:	f85d fb04 	ldr.w	pc, [sp], #4
 8005584:	20000214 	.word	0x20000214

08005588 <memset>:
 8005588:	4603      	mov	r3, r0
 800558a:	4402      	add	r2, r0
 800558c:	4293      	cmp	r3, r2
 800558e:	d100      	bne.n	8005592 <memset+0xa>
 8005590:	4770      	bx	lr
 8005592:	f803 1b01 	strb.w	r1, [r3], #1
 8005596:	e7f9      	b.n	800558c <memset+0x4>

08005598 <__errno>:
 8005598:	4b01      	ldr	r3, [pc, #4]	@ (80055a0 <__errno+0x8>)
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	20000214 	.word	0x20000214

080055a4 <__libc_init_array>:
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	2600      	movs	r6, #0
 80055a8:	4d0c      	ldr	r5, [pc, #48]	@ (80055dc <__libc_init_array+0x38>)
 80055aa:	4c0d      	ldr	r4, [pc, #52]	@ (80055e0 <__libc_init_array+0x3c>)
 80055ac:	1b64      	subs	r4, r4, r5
 80055ae:	10a4      	asrs	r4, r4, #2
 80055b0:	42a6      	cmp	r6, r4
 80055b2:	d109      	bne.n	80055c8 <__libc_init_array+0x24>
 80055b4:	f000 fc78 	bl	8005ea8 <_init>
 80055b8:	2600      	movs	r6, #0
 80055ba:	4d0a      	ldr	r5, [pc, #40]	@ (80055e4 <__libc_init_array+0x40>)
 80055bc:	4c0a      	ldr	r4, [pc, #40]	@ (80055e8 <__libc_init_array+0x44>)
 80055be:	1b64      	subs	r4, r4, r5
 80055c0:	10a4      	asrs	r4, r4, #2
 80055c2:	42a6      	cmp	r6, r4
 80055c4:	d105      	bne.n	80055d2 <__libc_init_array+0x2e>
 80055c6:	bd70      	pop	{r4, r5, r6, pc}
 80055c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055cc:	4798      	blx	r3
 80055ce:	3601      	adds	r6, #1
 80055d0:	e7ee      	b.n	80055b0 <__libc_init_array+0xc>
 80055d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055d6:	4798      	blx	r3
 80055d8:	3601      	adds	r6, #1
 80055da:	e7f2      	b.n	80055c2 <__libc_init_array+0x1e>
 80055dc:	08006048 	.word	0x08006048
 80055e0:	08006048 	.word	0x08006048
 80055e4:	08006048 	.word	0x08006048
 80055e8:	0800604c 	.word	0x0800604c

080055ec <__retarget_lock_acquire_recursive>:
 80055ec:	4770      	bx	lr

080055ee <__retarget_lock_release_recursive>:
 80055ee:	4770      	bx	lr

080055f0 <_free_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4605      	mov	r5, r0
 80055f4:	2900      	cmp	r1, #0
 80055f6:	d040      	beq.n	800567a <_free_r+0x8a>
 80055f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055fc:	1f0c      	subs	r4, r1, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	bfb8      	it	lt
 8005602:	18e4      	addlt	r4, r4, r3
 8005604:	f000 f8de 	bl	80057c4 <__malloc_lock>
 8005608:	4a1c      	ldr	r2, [pc, #112]	@ (800567c <_free_r+0x8c>)
 800560a:	6813      	ldr	r3, [r2, #0]
 800560c:	b933      	cbnz	r3, 800561c <_free_r+0x2c>
 800560e:	6063      	str	r3, [r4, #4]
 8005610:	6014      	str	r4, [r2, #0]
 8005612:	4628      	mov	r0, r5
 8005614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005618:	f000 b8da 	b.w	80057d0 <__malloc_unlock>
 800561c:	42a3      	cmp	r3, r4
 800561e:	d908      	bls.n	8005632 <_free_r+0x42>
 8005620:	6820      	ldr	r0, [r4, #0]
 8005622:	1821      	adds	r1, r4, r0
 8005624:	428b      	cmp	r3, r1
 8005626:	bf01      	itttt	eq
 8005628:	6819      	ldreq	r1, [r3, #0]
 800562a:	685b      	ldreq	r3, [r3, #4]
 800562c:	1809      	addeq	r1, r1, r0
 800562e:	6021      	streq	r1, [r4, #0]
 8005630:	e7ed      	b.n	800560e <_free_r+0x1e>
 8005632:	461a      	mov	r2, r3
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	b10b      	cbz	r3, 800563c <_free_r+0x4c>
 8005638:	42a3      	cmp	r3, r4
 800563a:	d9fa      	bls.n	8005632 <_free_r+0x42>
 800563c:	6811      	ldr	r1, [r2, #0]
 800563e:	1850      	adds	r0, r2, r1
 8005640:	42a0      	cmp	r0, r4
 8005642:	d10b      	bne.n	800565c <_free_r+0x6c>
 8005644:	6820      	ldr	r0, [r4, #0]
 8005646:	4401      	add	r1, r0
 8005648:	1850      	adds	r0, r2, r1
 800564a:	4283      	cmp	r3, r0
 800564c:	6011      	str	r1, [r2, #0]
 800564e:	d1e0      	bne.n	8005612 <_free_r+0x22>
 8005650:	6818      	ldr	r0, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	4408      	add	r0, r1
 8005656:	6010      	str	r0, [r2, #0]
 8005658:	6053      	str	r3, [r2, #4]
 800565a:	e7da      	b.n	8005612 <_free_r+0x22>
 800565c:	d902      	bls.n	8005664 <_free_r+0x74>
 800565e:	230c      	movs	r3, #12
 8005660:	602b      	str	r3, [r5, #0]
 8005662:	e7d6      	b.n	8005612 <_free_r+0x22>
 8005664:	6820      	ldr	r0, [r4, #0]
 8005666:	1821      	adds	r1, r4, r0
 8005668:	428b      	cmp	r3, r1
 800566a:	bf01      	itttt	eq
 800566c:	6819      	ldreq	r1, [r3, #0]
 800566e:	685b      	ldreq	r3, [r3, #4]
 8005670:	1809      	addeq	r1, r1, r0
 8005672:	6021      	streq	r1, [r4, #0]
 8005674:	6063      	str	r3, [r4, #4]
 8005676:	6054      	str	r4, [r2, #4]
 8005678:	e7cb      	b.n	8005612 <_free_r+0x22>
 800567a:	bd38      	pop	{r3, r4, r5, pc}
 800567c:	20000fc8 	.word	0x20000fc8

08005680 <sbrk_aligned>:
 8005680:	b570      	push	{r4, r5, r6, lr}
 8005682:	4e0f      	ldr	r6, [pc, #60]	@ (80056c0 <sbrk_aligned+0x40>)
 8005684:	460c      	mov	r4, r1
 8005686:	6831      	ldr	r1, [r6, #0]
 8005688:	4605      	mov	r5, r0
 800568a:	b911      	cbnz	r1, 8005692 <sbrk_aligned+0x12>
 800568c:	f000 fbaa 	bl	8005de4 <_sbrk_r>
 8005690:	6030      	str	r0, [r6, #0]
 8005692:	4621      	mov	r1, r4
 8005694:	4628      	mov	r0, r5
 8005696:	f000 fba5 	bl	8005de4 <_sbrk_r>
 800569a:	1c43      	adds	r3, r0, #1
 800569c:	d103      	bne.n	80056a6 <sbrk_aligned+0x26>
 800569e:	f04f 34ff 	mov.w	r4, #4294967295
 80056a2:	4620      	mov	r0, r4
 80056a4:	bd70      	pop	{r4, r5, r6, pc}
 80056a6:	1cc4      	adds	r4, r0, #3
 80056a8:	f024 0403 	bic.w	r4, r4, #3
 80056ac:	42a0      	cmp	r0, r4
 80056ae:	d0f8      	beq.n	80056a2 <sbrk_aligned+0x22>
 80056b0:	1a21      	subs	r1, r4, r0
 80056b2:	4628      	mov	r0, r5
 80056b4:	f000 fb96 	bl	8005de4 <_sbrk_r>
 80056b8:	3001      	adds	r0, #1
 80056ba:	d1f2      	bne.n	80056a2 <sbrk_aligned+0x22>
 80056bc:	e7ef      	b.n	800569e <sbrk_aligned+0x1e>
 80056be:	bf00      	nop
 80056c0:	20000fc4 	.word	0x20000fc4

080056c4 <_malloc_r>:
 80056c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056c8:	1ccd      	adds	r5, r1, #3
 80056ca:	f025 0503 	bic.w	r5, r5, #3
 80056ce:	3508      	adds	r5, #8
 80056d0:	2d0c      	cmp	r5, #12
 80056d2:	bf38      	it	cc
 80056d4:	250c      	movcc	r5, #12
 80056d6:	2d00      	cmp	r5, #0
 80056d8:	4606      	mov	r6, r0
 80056da:	db01      	blt.n	80056e0 <_malloc_r+0x1c>
 80056dc:	42a9      	cmp	r1, r5
 80056de:	d904      	bls.n	80056ea <_malloc_r+0x26>
 80056e0:	230c      	movs	r3, #12
 80056e2:	6033      	str	r3, [r6, #0]
 80056e4:	2000      	movs	r0, #0
 80056e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057c0 <_malloc_r+0xfc>
 80056ee:	f000 f869 	bl	80057c4 <__malloc_lock>
 80056f2:	f8d8 3000 	ldr.w	r3, [r8]
 80056f6:	461c      	mov	r4, r3
 80056f8:	bb44      	cbnz	r4, 800574c <_malloc_r+0x88>
 80056fa:	4629      	mov	r1, r5
 80056fc:	4630      	mov	r0, r6
 80056fe:	f7ff ffbf 	bl	8005680 <sbrk_aligned>
 8005702:	1c43      	adds	r3, r0, #1
 8005704:	4604      	mov	r4, r0
 8005706:	d158      	bne.n	80057ba <_malloc_r+0xf6>
 8005708:	f8d8 4000 	ldr.w	r4, [r8]
 800570c:	4627      	mov	r7, r4
 800570e:	2f00      	cmp	r7, #0
 8005710:	d143      	bne.n	800579a <_malloc_r+0xd6>
 8005712:	2c00      	cmp	r4, #0
 8005714:	d04b      	beq.n	80057ae <_malloc_r+0xea>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	4639      	mov	r1, r7
 800571a:	4630      	mov	r0, r6
 800571c:	eb04 0903 	add.w	r9, r4, r3
 8005720:	f000 fb60 	bl	8005de4 <_sbrk_r>
 8005724:	4581      	cmp	r9, r0
 8005726:	d142      	bne.n	80057ae <_malloc_r+0xea>
 8005728:	6821      	ldr	r1, [r4, #0]
 800572a:	4630      	mov	r0, r6
 800572c:	1a6d      	subs	r5, r5, r1
 800572e:	4629      	mov	r1, r5
 8005730:	f7ff ffa6 	bl	8005680 <sbrk_aligned>
 8005734:	3001      	adds	r0, #1
 8005736:	d03a      	beq.n	80057ae <_malloc_r+0xea>
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	442b      	add	r3, r5
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	f8d8 3000 	ldr.w	r3, [r8]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	bb62      	cbnz	r2, 80057a0 <_malloc_r+0xdc>
 8005746:	f8c8 7000 	str.w	r7, [r8]
 800574a:	e00f      	b.n	800576c <_malloc_r+0xa8>
 800574c:	6822      	ldr	r2, [r4, #0]
 800574e:	1b52      	subs	r2, r2, r5
 8005750:	d420      	bmi.n	8005794 <_malloc_r+0xd0>
 8005752:	2a0b      	cmp	r2, #11
 8005754:	d917      	bls.n	8005786 <_malloc_r+0xc2>
 8005756:	1961      	adds	r1, r4, r5
 8005758:	42a3      	cmp	r3, r4
 800575a:	6025      	str	r5, [r4, #0]
 800575c:	bf18      	it	ne
 800575e:	6059      	strne	r1, [r3, #4]
 8005760:	6863      	ldr	r3, [r4, #4]
 8005762:	bf08      	it	eq
 8005764:	f8c8 1000 	streq.w	r1, [r8]
 8005768:	5162      	str	r2, [r4, r5]
 800576a:	604b      	str	r3, [r1, #4]
 800576c:	4630      	mov	r0, r6
 800576e:	f000 f82f 	bl	80057d0 <__malloc_unlock>
 8005772:	f104 000b 	add.w	r0, r4, #11
 8005776:	1d23      	adds	r3, r4, #4
 8005778:	f020 0007 	bic.w	r0, r0, #7
 800577c:	1ac2      	subs	r2, r0, r3
 800577e:	bf1c      	itt	ne
 8005780:	1a1b      	subne	r3, r3, r0
 8005782:	50a3      	strne	r3, [r4, r2]
 8005784:	e7af      	b.n	80056e6 <_malloc_r+0x22>
 8005786:	6862      	ldr	r2, [r4, #4]
 8005788:	42a3      	cmp	r3, r4
 800578a:	bf0c      	ite	eq
 800578c:	f8c8 2000 	streq.w	r2, [r8]
 8005790:	605a      	strne	r2, [r3, #4]
 8005792:	e7eb      	b.n	800576c <_malloc_r+0xa8>
 8005794:	4623      	mov	r3, r4
 8005796:	6864      	ldr	r4, [r4, #4]
 8005798:	e7ae      	b.n	80056f8 <_malloc_r+0x34>
 800579a:	463c      	mov	r4, r7
 800579c:	687f      	ldr	r7, [r7, #4]
 800579e:	e7b6      	b.n	800570e <_malloc_r+0x4a>
 80057a0:	461a      	mov	r2, r3
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	42a3      	cmp	r3, r4
 80057a6:	d1fb      	bne.n	80057a0 <_malloc_r+0xdc>
 80057a8:	2300      	movs	r3, #0
 80057aa:	6053      	str	r3, [r2, #4]
 80057ac:	e7de      	b.n	800576c <_malloc_r+0xa8>
 80057ae:	230c      	movs	r3, #12
 80057b0:	4630      	mov	r0, r6
 80057b2:	6033      	str	r3, [r6, #0]
 80057b4:	f000 f80c 	bl	80057d0 <__malloc_unlock>
 80057b8:	e794      	b.n	80056e4 <_malloc_r+0x20>
 80057ba:	6005      	str	r5, [r0, #0]
 80057bc:	e7d6      	b.n	800576c <_malloc_r+0xa8>
 80057be:	bf00      	nop
 80057c0:	20000fc8 	.word	0x20000fc8

080057c4 <__malloc_lock>:
 80057c4:	4801      	ldr	r0, [pc, #4]	@ (80057cc <__malloc_lock+0x8>)
 80057c6:	f7ff bf11 	b.w	80055ec <__retarget_lock_acquire_recursive>
 80057ca:	bf00      	nop
 80057cc:	20000fc0 	.word	0x20000fc0

080057d0 <__malloc_unlock>:
 80057d0:	4801      	ldr	r0, [pc, #4]	@ (80057d8 <__malloc_unlock+0x8>)
 80057d2:	f7ff bf0c 	b.w	80055ee <__retarget_lock_release_recursive>
 80057d6:	bf00      	nop
 80057d8:	20000fc0 	.word	0x20000fc0

080057dc <__ssputs_r>:
 80057dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e0:	461f      	mov	r7, r3
 80057e2:	688e      	ldr	r6, [r1, #8]
 80057e4:	4682      	mov	sl, r0
 80057e6:	42be      	cmp	r6, r7
 80057e8:	460c      	mov	r4, r1
 80057ea:	4690      	mov	r8, r2
 80057ec:	680b      	ldr	r3, [r1, #0]
 80057ee:	d82d      	bhi.n	800584c <__ssputs_r+0x70>
 80057f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80057f8:	d026      	beq.n	8005848 <__ssputs_r+0x6c>
 80057fa:	6965      	ldr	r5, [r4, #20]
 80057fc:	6909      	ldr	r1, [r1, #16]
 80057fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005802:	eba3 0901 	sub.w	r9, r3, r1
 8005806:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800580a:	1c7b      	adds	r3, r7, #1
 800580c:	444b      	add	r3, r9
 800580e:	106d      	asrs	r5, r5, #1
 8005810:	429d      	cmp	r5, r3
 8005812:	bf38      	it	cc
 8005814:	461d      	movcc	r5, r3
 8005816:	0553      	lsls	r3, r2, #21
 8005818:	d527      	bpl.n	800586a <__ssputs_r+0x8e>
 800581a:	4629      	mov	r1, r5
 800581c:	f7ff ff52 	bl	80056c4 <_malloc_r>
 8005820:	4606      	mov	r6, r0
 8005822:	b360      	cbz	r0, 800587e <__ssputs_r+0xa2>
 8005824:	464a      	mov	r2, r9
 8005826:	6921      	ldr	r1, [r4, #16]
 8005828:	f000 fafa 	bl	8005e20 <memcpy>
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005836:	81a3      	strh	r3, [r4, #12]
 8005838:	6126      	str	r6, [r4, #16]
 800583a:	444e      	add	r6, r9
 800583c:	6026      	str	r6, [r4, #0]
 800583e:	463e      	mov	r6, r7
 8005840:	6165      	str	r5, [r4, #20]
 8005842:	eba5 0509 	sub.w	r5, r5, r9
 8005846:	60a5      	str	r5, [r4, #8]
 8005848:	42be      	cmp	r6, r7
 800584a:	d900      	bls.n	800584e <__ssputs_r+0x72>
 800584c:	463e      	mov	r6, r7
 800584e:	4632      	mov	r2, r6
 8005850:	4641      	mov	r1, r8
 8005852:	6820      	ldr	r0, [r4, #0]
 8005854:	f000 faac 	bl	8005db0 <memmove>
 8005858:	2000      	movs	r0, #0
 800585a:	68a3      	ldr	r3, [r4, #8]
 800585c:	1b9b      	subs	r3, r3, r6
 800585e:	60a3      	str	r3, [r4, #8]
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	4433      	add	r3, r6
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586a:	462a      	mov	r2, r5
 800586c:	f000 fae6 	bl	8005e3c <_realloc_r>
 8005870:	4606      	mov	r6, r0
 8005872:	2800      	cmp	r0, #0
 8005874:	d1e0      	bne.n	8005838 <__ssputs_r+0x5c>
 8005876:	4650      	mov	r0, sl
 8005878:	6921      	ldr	r1, [r4, #16]
 800587a:	f7ff feb9 	bl	80055f0 <_free_r>
 800587e:	230c      	movs	r3, #12
 8005880:	f8ca 3000 	str.w	r3, [sl]
 8005884:	89a3      	ldrh	r3, [r4, #12]
 8005886:	f04f 30ff 	mov.w	r0, #4294967295
 800588a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800588e:	81a3      	strh	r3, [r4, #12]
 8005890:	e7e9      	b.n	8005866 <__ssputs_r+0x8a>
	...

08005894 <_svfiprintf_r>:
 8005894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005898:	4698      	mov	r8, r3
 800589a:	898b      	ldrh	r3, [r1, #12]
 800589c:	4607      	mov	r7, r0
 800589e:	061b      	lsls	r3, r3, #24
 80058a0:	460d      	mov	r5, r1
 80058a2:	4614      	mov	r4, r2
 80058a4:	b09d      	sub	sp, #116	@ 0x74
 80058a6:	d510      	bpl.n	80058ca <_svfiprintf_r+0x36>
 80058a8:	690b      	ldr	r3, [r1, #16]
 80058aa:	b973      	cbnz	r3, 80058ca <_svfiprintf_r+0x36>
 80058ac:	2140      	movs	r1, #64	@ 0x40
 80058ae:	f7ff ff09 	bl	80056c4 <_malloc_r>
 80058b2:	6028      	str	r0, [r5, #0]
 80058b4:	6128      	str	r0, [r5, #16]
 80058b6:	b930      	cbnz	r0, 80058c6 <_svfiprintf_r+0x32>
 80058b8:	230c      	movs	r3, #12
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	f04f 30ff 	mov.w	r0, #4294967295
 80058c0:	b01d      	add	sp, #116	@ 0x74
 80058c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c6:	2340      	movs	r3, #64	@ 0x40
 80058c8:	616b      	str	r3, [r5, #20]
 80058ca:	2300      	movs	r3, #0
 80058cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80058ce:	2320      	movs	r3, #32
 80058d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058d4:	2330      	movs	r3, #48	@ 0x30
 80058d6:	f04f 0901 	mov.w	r9, #1
 80058da:	f8cd 800c 	str.w	r8, [sp, #12]
 80058de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005a78 <_svfiprintf_r+0x1e4>
 80058e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058e6:	4623      	mov	r3, r4
 80058e8:	469a      	mov	sl, r3
 80058ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058ee:	b10a      	cbz	r2, 80058f4 <_svfiprintf_r+0x60>
 80058f0:	2a25      	cmp	r2, #37	@ 0x25
 80058f2:	d1f9      	bne.n	80058e8 <_svfiprintf_r+0x54>
 80058f4:	ebba 0b04 	subs.w	fp, sl, r4
 80058f8:	d00b      	beq.n	8005912 <_svfiprintf_r+0x7e>
 80058fa:	465b      	mov	r3, fp
 80058fc:	4622      	mov	r2, r4
 80058fe:	4629      	mov	r1, r5
 8005900:	4638      	mov	r0, r7
 8005902:	f7ff ff6b 	bl	80057dc <__ssputs_r>
 8005906:	3001      	adds	r0, #1
 8005908:	f000 80a7 	beq.w	8005a5a <_svfiprintf_r+0x1c6>
 800590c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800590e:	445a      	add	r2, fp
 8005910:	9209      	str	r2, [sp, #36]	@ 0x24
 8005912:	f89a 3000 	ldrb.w	r3, [sl]
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 809f 	beq.w	8005a5a <_svfiprintf_r+0x1c6>
 800591c:	2300      	movs	r3, #0
 800591e:	f04f 32ff 	mov.w	r2, #4294967295
 8005922:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005926:	f10a 0a01 	add.w	sl, sl, #1
 800592a:	9304      	str	r3, [sp, #16]
 800592c:	9307      	str	r3, [sp, #28]
 800592e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005932:	931a      	str	r3, [sp, #104]	@ 0x68
 8005934:	4654      	mov	r4, sl
 8005936:	2205      	movs	r2, #5
 8005938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800593c:	484e      	ldr	r0, [pc, #312]	@ (8005a78 <_svfiprintf_r+0x1e4>)
 800593e:	f000 fa61 	bl	8005e04 <memchr>
 8005942:	9a04      	ldr	r2, [sp, #16]
 8005944:	b9d8      	cbnz	r0, 800597e <_svfiprintf_r+0xea>
 8005946:	06d0      	lsls	r0, r2, #27
 8005948:	bf44      	itt	mi
 800594a:	2320      	movmi	r3, #32
 800594c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005950:	0711      	lsls	r1, r2, #28
 8005952:	bf44      	itt	mi
 8005954:	232b      	movmi	r3, #43	@ 0x2b
 8005956:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800595a:	f89a 3000 	ldrb.w	r3, [sl]
 800595e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005960:	d015      	beq.n	800598e <_svfiprintf_r+0xfa>
 8005962:	4654      	mov	r4, sl
 8005964:	2000      	movs	r0, #0
 8005966:	f04f 0c0a 	mov.w	ip, #10
 800596a:	9a07      	ldr	r2, [sp, #28]
 800596c:	4621      	mov	r1, r4
 800596e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005972:	3b30      	subs	r3, #48	@ 0x30
 8005974:	2b09      	cmp	r3, #9
 8005976:	d94b      	bls.n	8005a10 <_svfiprintf_r+0x17c>
 8005978:	b1b0      	cbz	r0, 80059a8 <_svfiprintf_r+0x114>
 800597a:	9207      	str	r2, [sp, #28]
 800597c:	e014      	b.n	80059a8 <_svfiprintf_r+0x114>
 800597e:	eba0 0308 	sub.w	r3, r0, r8
 8005982:	fa09 f303 	lsl.w	r3, r9, r3
 8005986:	4313      	orrs	r3, r2
 8005988:	46a2      	mov	sl, r4
 800598a:	9304      	str	r3, [sp, #16]
 800598c:	e7d2      	b.n	8005934 <_svfiprintf_r+0xa0>
 800598e:	9b03      	ldr	r3, [sp, #12]
 8005990:	1d19      	adds	r1, r3, #4
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	9103      	str	r1, [sp, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	bfbb      	ittet	lt
 800599a:	425b      	neglt	r3, r3
 800599c:	f042 0202 	orrlt.w	r2, r2, #2
 80059a0:	9307      	strge	r3, [sp, #28]
 80059a2:	9307      	strlt	r3, [sp, #28]
 80059a4:	bfb8      	it	lt
 80059a6:	9204      	strlt	r2, [sp, #16]
 80059a8:	7823      	ldrb	r3, [r4, #0]
 80059aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80059ac:	d10a      	bne.n	80059c4 <_svfiprintf_r+0x130>
 80059ae:	7863      	ldrb	r3, [r4, #1]
 80059b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80059b2:	d132      	bne.n	8005a1a <_svfiprintf_r+0x186>
 80059b4:	9b03      	ldr	r3, [sp, #12]
 80059b6:	3402      	adds	r4, #2
 80059b8:	1d1a      	adds	r2, r3, #4
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	9203      	str	r2, [sp, #12]
 80059be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80059c2:	9305      	str	r3, [sp, #20]
 80059c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005a7c <_svfiprintf_r+0x1e8>
 80059c8:	2203      	movs	r2, #3
 80059ca:	4650      	mov	r0, sl
 80059cc:	7821      	ldrb	r1, [r4, #0]
 80059ce:	f000 fa19 	bl	8005e04 <memchr>
 80059d2:	b138      	cbz	r0, 80059e4 <_svfiprintf_r+0x150>
 80059d4:	2240      	movs	r2, #64	@ 0x40
 80059d6:	9b04      	ldr	r3, [sp, #16]
 80059d8:	eba0 000a 	sub.w	r0, r0, sl
 80059dc:	4082      	lsls	r2, r0
 80059de:	4313      	orrs	r3, r2
 80059e0:	3401      	adds	r4, #1
 80059e2:	9304      	str	r3, [sp, #16]
 80059e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059e8:	2206      	movs	r2, #6
 80059ea:	4825      	ldr	r0, [pc, #148]	@ (8005a80 <_svfiprintf_r+0x1ec>)
 80059ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059f0:	f000 fa08 	bl	8005e04 <memchr>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	d036      	beq.n	8005a66 <_svfiprintf_r+0x1d2>
 80059f8:	4b22      	ldr	r3, [pc, #136]	@ (8005a84 <_svfiprintf_r+0x1f0>)
 80059fa:	bb1b      	cbnz	r3, 8005a44 <_svfiprintf_r+0x1b0>
 80059fc:	9b03      	ldr	r3, [sp, #12]
 80059fe:	3307      	adds	r3, #7
 8005a00:	f023 0307 	bic.w	r3, r3, #7
 8005a04:	3308      	adds	r3, #8
 8005a06:	9303      	str	r3, [sp, #12]
 8005a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a0a:	4433      	add	r3, r6
 8005a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a0e:	e76a      	b.n	80058e6 <_svfiprintf_r+0x52>
 8005a10:	460c      	mov	r4, r1
 8005a12:	2001      	movs	r0, #1
 8005a14:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a18:	e7a8      	b.n	800596c <_svfiprintf_r+0xd8>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f04f 0c0a 	mov.w	ip, #10
 8005a20:	4619      	mov	r1, r3
 8005a22:	3401      	adds	r4, #1
 8005a24:	9305      	str	r3, [sp, #20]
 8005a26:	4620      	mov	r0, r4
 8005a28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a2c:	3a30      	subs	r2, #48	@ 0x30
 8005a2e:	2a09      	cmp	r2, #9
 8005a30:	d903      	bls.n	8005a3a <_svfiprintf_r+0x1a6>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d0c6      	beq.n	80059c4 <_svfiprintf_r+0x130>
 8005a36:	9105      	str	r1, [sp, #20]
 8005a38:	e7c4      	b.n	80059c4 <_svfiprintf_r+0x130>
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a42:	e7f0      	b.n	8005a26 <_svfiprintf_r+0x192>
 8005a44:	ab03      	add	r3, sp, #12
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	462a      	mov	r2, r5
 8005a4a:	4638      	mov	r0, r7
 8005a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8005a88 <_svfiprintf_r+0x1f4>)
 8005a4e:	a904      	add	r1, sp, #16
 8005a50:	f3af 8000 	nop.w
 8005a54:	1c42      	adds	r2, r0, #1
 8005a56:	4606      	mov	r6, r0
 8005a58:	d1d6      	bne.n	8005a08 <_svfiprintf_r+0x174>
 8005a5a:	89ab      	ldrh	r3, [r5, #12]
 8005a5c:	065b      	lsls	r3, r3, #25
 8005a5e:	f53f af2d 	bmi.w	80058bc <_svfiprintf_r+0x28>
 8005a62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a64:	e72c      	b.n	80058c0 <_svfiprintf_r+0x2c>
 8005a66:	ab03      	add	r3, sp, #12
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	462a      	mov	r2, r5
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	4b06      	ldr	r3, [pc, #24]	@ (8005a88 <_svfiprintf_r+0x1f4>)
 8005a70:	a904      	add	r1, sp, #16
 8005a72:	f000 f87d 	bl	8005b70 <_printf_i>
 8005a76:	e7ed      	b.n	8005a54 <_svfiprintf_r+0x1c0>
 8005a78:	08006012 	.word	0x08006012
 8005a7c:	08006018 	.word	0x08006018
 8005a80:	0800601c 	.word	0x0800601c
 8005a84:	00000000 	.word	0x00000000
 8005a88:	080057dd 	.word	0x080057dd

08005a8c <_printf_common>:
 8005a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a90:	4616      	mov	r6, r2
 8005a92:	4698      	mov	r8, r3
 8005a94:	688a      	ldr	r2, [r1, #8]
 8005a96:	690b      	ldr	r3, [r1, #16]
 8005a98:	4607      	mov	r7, r0
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	bfb8      	it	lt
 8005a9e:	4613      	movlt	r3, r2
 8005aa0:	6033      	str	r3, [r6, #0]
 8005aa2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005aac:	b10a      	cbz	r2, 8005ab2 <_printf_common+0x26>
 8005aae:	3301      	adds	r3, #1
 8005ab0:	6033      	str	r3, [r6, #0]
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	0699      	lsls	r1, r3, #26
 8005ab6:	bf42      	ittt	mi
 8005ab8:	6833      	ldrmi	r3, [r6, #0]
 8005aba:	3302      	addmi	r3, #2
 8005abc:	6033      	strmi	r3, [r6, #0]
 8005abe:	6825      	ldr	r5, [r4, #0]
 8005ac0:	f015 0506 	ands.w	r5, r5, #6
 8005ac4:	d106      	bne.n	8005ad4 <_printf_common+0x48>
 8005ac6:	f104 0a19 	add.w	sl, r4, #25
 8005aca:	68e3      	ldr	r3, [r4, #12]
 8005acc:	6832      	ldr	r2, [r6, #0]
 8005ace:	1a9b      	subs	r3, r3, r2
 8005ad0:	42ab      	cmp	r3, r5
 8005ad2:	dc2b      	bgt.n	8005b2c <_printf_common+0xa0>
 8005ad4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ad8:	6822      	ldr	r2, [r4, #0]
 8005ada:	3b00      	subs	r3, #0
 8005adc:	bf18      	it	ne
 8005ade:	2301      	movne	r3, #1
 8005ae0:	0692      	lsls	r2, r2, #26
 8005ae2:	d430      	bmi.n	8005b46 <_printf_common+0xba>
 8005ae4:	4641      	mov	r1, r8
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005aec:	47c8      	blx	r9
 8005aee:	3001      	adds	r0, #1
 8005af0:	d023      	beq.n	8005b3a <_printf_common+0xae>
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	6922      	ldr	r2, [r4, #16]
 8005af6:	f003 0306 	and.w	r3, r3, #6
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	bf14      	ite	ne
 8005afe:	2500      	movne	r5, #0
 8005b00:	6833      	ldreq	r3, [r6, #0]
 8005b02:	f04f 0600 	mov.w	r6, #0
 8005b06:	bf08      	it	eq
 8005b08:	68e5      	ldreq	r5, [r4, #12]
 8005b0a:	f104 041a 	add.w	r4, r4, #26
 8005b0e:	bf08      	it	eq
 8005b10:	1aed      	subeq	r5, r5, r3
 8005b12:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005b16:	bf08      	it	eq
 8005b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	bfc4      	itt	gt
 8005b20:	1a9b      	subgt	r3, r3, r2
 8005b22:	18ed      	addgt	r5, r5, r3
 8005b24:	42b5      	cmp	r5, r6
 8005b26:	d11a      	bne.n	8005b5e <_printf_common+0xd2>
 8005b28:	2000      	movs	r0, #0
 8005b2a:	e008      	b.n	8005b3e <_printf_common+0xb2>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	4652      	mov	r2, sl
 8005b30:	4641      	mov	r1, r8
 8005b32:	4638      	mov	r0, r7
 8005b34:	47c8      	blx	r9
 8005b36:	3001      	adds	r0, #1
 8005b38:	d103      	bne.n	8005b42 <_printf_common+0xb6>
 8005b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b42:	3501      	adds	r5, #1
 8005b44:	e7c1      	b.n	8005aca <_printf_common+0x3e>
 8005b46:	2030      	movs	r0, #48	@ 0x30
 8005b48:	18e1      	adds	r1, r4, r3
 8005b4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b54:	4422      	add	r2, r4
 8005b56:	3302      	adds	r3, #2
 8005b58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b5c:	e7c2      	b.n	8005ae4 <_printf_common+0x58>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	4622      	mov	r2, r4
 8005b62:	4641      	mov	r1, r8
 8005b64:	4638      	mov	r0, r7
 8005b66:	47c8      	blx	r9
 8005b68:	3001      	adds	r0, #1
 8005b6a:	d0e6      	beq.n	8005b3a <_printf_common+0xae>
 8005b6c:	3601      	adds	r6, #1
 8005b6e:	e7d9      	b.n	8005b24 <_printf_common+0x98>

08005b70 <_printf_i>:
 8005b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b74:	7e0f      	ldrb	r7, [r1, #24]
 8005b76:	4691      	mov	r9, r2
 8005b78:	2f78      	cmp	r7, #120	@ 0x78
 8005b7a:	4680      	mov	r8, r0
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	469a      	mov	sl, r3
 8005b80:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b86:	d807      	bhi.n	8005b98 <_printf_i+0x28>
 8005b88:	2f62      	cmp	r7, #98	@ 0x62
 8005b8a:	d80a      	bhi.n	8005ba2 <_printf_i+0x32>
 8005b8c:	2f00      	cmp	r7, #0
 8005b8e:	f000 80d3 	beq.w	8005d38 <_printf_i+0x1c8>
 8005b92:	2f58      	cmp	r7, #88	@ 0x58
 8005b94:	f000 80ba 	beq.w	8005d0c <_printf_i+0x19c>
 8005b98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ba0:	e03a      	b.n	8005c18 <_printf_i+0xa8>
 8005ba2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ba6:	2b15      	cmp	r3, #21
 8005ba8:	d8f6      	bhi.n	8005b98 <_printf_i+0x28>
 8005baa:	a101      	add	r1, pc, #4	@ (adr r1, 8005bb0 <_printf_i+0x40>)
 8005bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bb0:	08005c09 	.word	0x08005c09
 8005bb4:	08005c1d 	.word	0x08005c1d
 8005bb8:	08005b99 	.word	0x08005b99
 8005bbc:	08005b99 	.word	0x08005b99
 8005bc0:	08005b99 	.word	0x08005b99
 8005bc4:	08005b99 	.word	0x08005b99
 8005bc8:	08005c1d 	.word	0x08005c1d
 8005bcc:	08005b99 	.word	0x08005b99
 8005bd0:	08005b99 	.word	0x08005b99
 8005bd4:	08005b99 	.word	0x08005b99
 8005bd8:	08005b99 	.word	0x08005b99
 8005bdc:	08005d1f 	.word	0x08005d1f
 8005be0:	08005c47 	.word	0x08005c47
 8005be4:	08005cd9 	.word	0x08005cd9
 8005be8:	08005b99 	.word	0x08005b99
 8005bec:	08005b99 	.word	0x08005b99
 8005bf0:	08005d41 	.word	0x08005d41
 8005bf4:	08005b99 	.word	0x08005b99
 8005bf8:	08005c47 	.word	0x08005c47
 8005bfc:	08005b99 	.word	0x08005b99
 8005c00:	08005b99 	.word	0x08005b99
 8005c04:	08005ce1 	.word	0x08005ce1
 8005c08:	6833      	ldr	r3, [r6, #0]
 8005c0a:	1d1a      	adds	r2, r3, #4
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6032      	str	r2, [r6, #0]
 8005c10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e09e      	b.n	8005d5a <_printf_i+0x1ea>
 8005c1c:	6833      	ldr	r3, [r6, #0]
 8005c1e:	6820      	ldr	r0, [r4, #0]
 8005c20:	1d19      	adds	r1, r3, #4
 8005c22:	6031      	str	r1, [r6, #0]
 8005c24:	0606      	lsls	r6, r0, #24
 8005c26:	d501      	bpl.n	8005c2c <_printf_i+0xbc>
 8005c28:	681d      	ldr	r5, [r3, #0]
 8005c2a:	e003      	b.n	8005c34 <_printf_i+0xc4>
 8005c2c:	0645      	lsls	r5, r0, #25
 8005c2e:	d5fb      	bpl.n	8005c28 <_printf_i+0xb8>
 8005c30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c34:	2d00      	cmp	r5, #0
 8005c36:	da03      	bge.n	8005c40 <_printf_i+0xd0>
 8005c38:	232d      	movs	r3, #45	@ 0x2d
 8005c3a:	426d      	negs	r5, r5
 8005c3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c40:	230a      	movs	r3, #10
 8005c42:	4859      	ldr	r0, [pc, #356]	@ (8005da8 <_printf_i+0x238>)
 8005c44:	e011      	b.n	8005c6a <_printf_i+0xfa>
 8005c46:	6821      	ldr	r1, [r4, #0]
 8005c48:	6833      	ldr	r3, [r6, #0]
 8005c4a:	0608      	lsls	r0, r1, #24
 8005c4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c50:	d402      	bmi.n	8005c58 <_printf_i+0xe8>
 8005c52:	0649      	lsls	r1, r1, #25
 8005c54:	bf48      	it	mi
 8005c56:	b2ad      	uxthmi	r5, r5
 8005c58:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c5a:	6033      	str	r3, [r6, #0]
 8005c5c:	bf14      	ite	ne
 8005c5e:	230a      	movne	r3, #10
 8005c60:	2308      	moveq	r3, #8
 8005c62:	4851      	ldr	r0, [pc, #324]	@ (8005da8 <_printf_i+0x238>)
 8005c64:	2100      	movs	r1, #0
 8005c66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c6a:	6866      	ldr	r6, [r4, #4]
 8005c6c:	2e00      	cmp	r6, #0
 8005c6e:	bfa8      	it	ge
 8005c70:	6821      	ldrge	r1, [r4, #0]
 8005c72:	60a6      	str	r6, [r4, #8]
 8005c74:	bfa4      	itt	ge
 8005c76:	f021 0104 	bicge.w	r1, r1, #4
 8005c7a:	6021      	strge	r1, [r4, #0]
 8005c7c:	b90d      	cbnz	r5, 8005c82 <_printf_i+0x112>
 8005c7e:	2e00      	cmp	r6, #0
 8005c80:	d04b      	beq.n	8005d1a <_printf_i+0x1aa>
 8005c82:	4616      	mov	r6, r2
 8005c84:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c88:	fb03 5711 	mls	r7, r3, r1, r5
 8005c8c:	5dc7      	ldrb	r7, [r0, r7]
 8005c8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c92:	462f      	mov	r7, r5
 8005c94:	42bb      	cmp	r3, r7
 8005c96:	460d      	mov	r5, r1
 8005c98:	d9f4      	bls.n	8005c84 <_printf_i+0x114>
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	d10b      	bne.n	8005cb6 <_printf_i+0x146>
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	07df      	lsls	r7, r3, #31
 8005ca2:	d508      	bpl.n	8005cb6 <_printf_i+0x146>
 8005ca4:	6923      	ldr	r3, [r4, #16]
 8005ca6:	6861      	ldr	r1, [r4, #4]
 8005ca8:	4299      	cmp	r1, r3
 8005caa:	bfde      	ittt	le
 8005cac:	2330      	movle	r3, #48	@ 0x30
 8005cae:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cb2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005cb6:	1b92      	subs	r2, r2, r6
 8005cb8:	6122      	str	r2, [r4, #16]
 8005cba:	464b      	mov	r3, r9
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	4640      	mov	r0, r8
 8005cc0:	f8cd a000 	str.w	sl, [sp]
 8005cc4:	aa03      	add	r2, sp, #12
 8005cc6:	f7ff fee1 	bl	8005a8c <_printf_common>
 8005cca:	3001      	adds	r0, #1
 8005ccc:	d14a      	bne.n	8005d64 <_printf_i+0x1f4>
 8005cce:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd2:	b004      	add	sp, #16
 8005cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	f043 0320 	orr.w	r3, r3, #32
 8005cde:	6023      	str	r3, [r4, #0]
 8005ce0:	2778      	movs	r7, #120	@ 0x78
 8005ce2:	4832      	ldr	r0, [pc, #200]	@ (8005dac <_printf_i+0x23c>)
 8005ce4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	6831      	ldr	r1, [r6, #0]
 8005cec:	061f      	lsls	r7, r3, #24
 8005cee:	f851 5b04 	ldr.w	r5, [r1], #4
 8005cf2:	d402      	bmi.n	8005cfa <_printf_i+0x18a>
 8005cf4:	065f      	lsls	r7, r3, #25
 8005cf6:	bf48      	it	mi
 8005cf8:	b2ad      	uxthmi	r5, r5
 8005cfa:	6031      	str	r1, [r6, #0]
 8005cfc:	07d9      	lsls	r1, r3, #31
 8005cfe:	bf44      	itt	mi
 8005d00:	f043 0320 	orrmi.w	r3, r3, #32
 8005d04:	6023      	strmi	r3, [r4, #0]
 8005d06:	b11d      	cbz	r5, 8005d10 <_printf_i+0x1a0>
 8005d08:	2310      	movs	r3, #16
 8005d0a:	e7ab      	b.n	8005c64 <_printf_i+0xf4>
 8005d0c:	4826      	ldr	r0, [pc, #152]	@ (8005da8 <_printf_i+0x238>)
 8005d0e:	e7e9      	b.n	8005ce4 <_printf_i+0x174>
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	f023 0320 	bic.w	r3, r3, #32
 8005d16:	6023      	str	r3, [r4, #0]
 8005d18:	e7f6      	b.n	8005d08 <_printf_i+0x198>
 8005d1a:	4616      	mov	r6, r2
 8005d1c:	e7bd      	b.n	8005c9a <_printf_i+0x12a>
 8005d1e:	6833      	ldr	r3, [r6, #0]
 8005d20:	6825      	ldr	r5, [r4, #0]
 8005d22:	1d18      	adds	r0, r3, #4
 8005d24:	6961      	ldr	r1, [r4, #20]
 8005d26:	6030      	str	r0, [r6, #0]
 8005d28:	062e      	lsls	r6, r5, #24
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	d501      	bpl.n	8005d32 <_printf_i+0x1c2>
 8005d2e:	6019      	str	r1, [r3, #0]
 8005d30:	e002      	b.n	8005d38 <_printf_i+0x1c8>
 8005d32:	0668      	lsls	r0, r5, #25
 8005d34:	d5fb      	bpl.n	8005d2e <_printf_i+0x1be>
 8005d36:	8019      	strh	r1, [r3, #0]
 8005d38:	2300      	movs	r3, #0
 8005d3a:	4616      	mov	r6, r2
 8005d3c:	6123      	str	r3, [r4, #16]
 8005d3e:	e7bc      	b.n	8005cba <_printf_i+0x14a>
 8005d40:	6833      	ldr	r3, [r6, #0]
 8005d42:	2100      	movs	r1, #0
 8005d44:	1d1a      	adds	r2, r3, #4
 8005d46:	6032      	str	r2, [r6, #0]
 8005d48:	681e      	ldr	r6, [r3, #0]
 8005d4a:	6862      	ldr	r2, [r4, #4]
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	f000 f859 	bl	8005e04 <memchr>
 8005d52:	b108      	cbz	r0, 8005d58 <_printf_i+0x1e8>
 8005d54:	1b80      	subs	r0, r0, r6
 8005d56:	6060      	str	r0, [r4, #4]
 8005d58:	6863      	ldr	r3, [r4, #4]
 8005d5a:	6123      	str	r3, [r4, #16]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d62:	e7aa      	b.n	8005cba <_printf_i+0x14a>
 8005d64:	4632      	mov	r2, r6
 8005d66:	4649      	mov	r1, r9
 8005d68:	4640      	mov	r0, r8
 8005d6a:	6923      	ldr	r3, [r4, #16]
 8005d6c:	47d0      	blx	sl
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d0ad      	beq.n	8005cce <_printf_i+0x15e>
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	079b      	lsls	r3, r3, #30
 8005d76:	d413      	bmi.n	8005da0 <_printf_i+0x230>
 8005d78:	68e0      	ldr	r0, [r4, #12]
 8005d7a:	9b03      	ldr	r3, [sp, #12]
 8005d7c:	4298      	cmp	r0, r3
 8005d7e:	bfb8      	it	lt
 8005d80:	4618      	movlt	r0, r3
 8005d82:	e7a6      	b.n	8005cd2 <_printf_i+0x162>
 8005d84:	2301      	movs	r3, #1
 8005d86:	4632      	mov	r2, r6
 8005d88:	4649      	mov	r1, r9
 8005d8a:	4640      	mov	r0, r8
 8005d8c:	47d0      	blx	sl
 8005d8e:	3001      	adds	r0, #1
 8005d90:	d09d      	beq.n	8005cce <_printf_i+0x15e>
 8005d92:	3501      	adds	r5, #1
 8005d94:	68e3      	ldr	r3, [r4, #12]
 8005d96:	9903      	ldr	r1, [sp, #12]
 8005d98:	1a5b      	subs	r3, r3, r1
 8005d9a:	42ab      	cmp	r3, r5
 8005d9c:	dcf2      	bgt.n	8005d84 <_printf_i+0x214>
 8005d9e:	e7eb      	b.n	8005d78 <_printf_i+0x208>
 8005da0:	2500      	movs	r5, #0
 8005da2:	f104 0619 	add.w	r6, r4, #25
 8005da6:	e7f5      	b.n	8005d94 <_printf_i+0x224>
 8005da8:	08006023 	.word	0x08006023
 8005dac:	08006034 	.word	0x08006034

08005db0 <memmove>:
 8005db0:	4288      	cmp	r0, r1
 8005db2:	b510      	push	{r4, lr}
 8005db4:	eb01 0402 	add.w	r4, r1, r2
 8005db8:	d902      	bls.n	8005dc0 <memmove+0x10>
 8005dba:	4284      	cmp	r4, r0
 8005dbc:	4623      	mov	r3, r4
 8005dbe:	d807      	bhi.n	8005dd0 <memmove+0x20>
 8005dc0:	1e43      	subs	r3, r0, #1
 8005dc2:	42a1      	cmp	r1, r4
 8005dc4:	d008      	beq.n	8005dd8 <memmove+0x28>
 8005dc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dce:	e7f8      	b.n	8005dc2 <memmove+0x12>
 8005dd0:	4601      	mov	r1, r0
 8005dd2:	4402      	add	r2, r0
 8005dd4:	428a      	cmp	r2, r1
 8005dd6:	d100      	bne.n	8005dda <memmove+0x2a>
 8005dd8:	bd10      	pop	{r4, pc}
 8005dda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005de2:	e7f7      	b.n	8005dd4 <memmove+0x24>

08005de4 <_sbrk_r>:
 8005de4:	b538      	push	{r3, r4, r5, lr}
 8005de6:	2300      	movs	r3, #0
 8005de8:	4d05      	ldr	r5, [pc, #20]	@ (8005e00 <_sbrk_r+0x1c>)
 8005dea:	4604      	mov	r4, r0
 8005dec:	4608      	mov	r0, r1
 8005dee:	602b      	str	r3, [r5, #0]
 8005df0:	f7fc fb34 	bl	800245c <_sbrk>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d102      	bne.n	8005dfe <_sbrk_r+0x1a>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	b103      	cbz	r3, 8005dfe <_sbrk_r+0x1a>
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	bd38      	pop	{r3, r4, r5, pc}
 8005e00:	20000fbc 	.word	0x20000fbc

08005e04 <memchr>:
 8005e04:	4603      	mov	r3, r0
 8005e06:	b510      	push	{r4, lr}
 8005e08:	b2c9      	uxtb	r1, r1
 8005e0a:	4402      	add	r2, r0
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	4618      	mov	r0, r3
 8005e10:	d101      	bne.n	8005e16 <memchr+0x12>
 8005e12:	2000      	movs	r0, #0
 8005e14:	e003      	b.n	8005e1e <memchr+0x1a>
 8005e16:	7804      	ldrb	r4, [r0, #0]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	428c      	cmp	r4, r1
 8005e1c:	d1f6      	bne.n	8005e0c <memchr+0x8>
 8005e1e:	bd10      	pop	{r4, pc}

08005e20 <memcpy>:
 8005e20:	440a      	add	r2, r1
 8005e22:	4291      	cmp	r1, r2
 8005e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e28:	d100      	bne.n	8005e2c <memcpy+0xc>
 8005e2a:	4770      	bx	lr
 8005e2c:	b510      	push	{r4, lr}
 8005e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e32:	4291      	cmp	r1, r2
 8005e34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e38:	d1f9      	bne.n	8005e2e <memcpy+0xe>
 8005e3a:	bd10      	pop	{r4, pc}

08005e3c <_realloc_r>:
 8005e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e40:	4680      	mov	r8, r0
 8005e42:	4615      	mov	r5, r2
 8005e44:	460c      	mov	r4, r1
 8005e46:	b921      	cbnz	r1, 8005e52 <_realloc_r+0x16>
 8005e48:	4611      	mov	r1, r2
 8005e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e4e:	f7ff bc39 	b.w	80056c4 <_malloc_r>
 8005e52:	b92a      	cbnz	r2, 8005e60 <_realloc_r+0x24>
 8005e54:	f7ff fbcc 	bl	80055f0 <_free_r>
 8005e58:	2400      	movs	r4, #0
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e60:	f000 f81a 	bl	8005e98 <_malloc_usable_size_r>
 8005e64:	4285      	cmp	r5, r0
 8005e66:	4606      	mov	r6, r0
 8005e68:	d802      	bhi.n	8005e70 <_realloc_r+0x34>
 8005e6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e6e:	d8f4      	bhi.n	8005e5a <_realloc_r+0x1e>
 8005e70:	4629      	mov	r1, r5
 8005e72:	4640      	mov	r0, r8
 8005e74:	f7ff fc26 	bl	80056c4 <_malloc_r>
 8005e78:	4607      	mov	r7, r0
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	d0ec      	beq.n	8005e58 <_realloc_r+0x1c>
 8005e7e:	42b5      	cmp	r5, r6
 8005e80:	462a      	mov	r2, r5
 8005e82:	4621      	mov	r1, r4
 8005e84:	bf28      	it	cs
 8005e86:	4632      	movcs	r2, r6
 8005e88:	f7ff ffca 	bl	8005e20 <memcpy>
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	4640      	mov	r0, r8
 8005e90:	f7ff fbae 	bl	80055f0 <_free_r>
 8005e94:	463c      	mov	r4, r7
 8005e96:	e7e0      	b.n	8005e5a <_realloc_r+0x1e>

08005e98 <_malloc_usable_size_r>:
 8005e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e9c:	1f18      	subs	r0, r3, #4
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bfbc      	itt	lt
 8005ea2:	580b      	ldrlt	r3, [r1, r0]
 8005ea4:	18c0      	addlt	r0, r0, r3
 8005ea6:	4770      	bx	lr

08005ea8 <_init>:
 8005ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eaa:	bf00      	nop
 8005eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eae:	bc08      	pop	{r3}
 8005eb0:	469e      	mov	lr, r3
 8005eb2:	4770      	bx	lr

08005eb4 <_fini>:
 8005eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb6:	bf00      	nop
 8005eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eba:	bc08      	pop	{r3}
 8005ebc:	469e      	mov	lr, r3
 8005ebe:	4770      	bx	lr
